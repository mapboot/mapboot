{
  "version": 3,
  "sources": ["../../js/editor/cloud.js", "../../js/shared/models.js", "../../js/editor/models/models.js", "../../js/editor/navigation.js", "../../js/editor/undoRedo/commit.js", "../../js/editor/undoRedo/select.js", "../../js/editor/selection.js", "../../js/editor/editing/hitTest.js", "../../js/editor/polygonGenerator.js", "../../js/editor/undoRedo/delete.js", "../../js/editor/UI/toolsMenu.js", "../../js/editor/editing/editing.js", "../../js/editor/undoRedo/utils.js", "../../js/editor/undoRedo/addDoor.js", "../../js/editor/undoRedo/addPoint.js", "../../js/editor/undoRedo/move.js", "../../js/editor/UI/locationsUI.js", "../../js/editor/UI/pointUI.js", "../../js/editor/editing/state.js", "../../js/editor/dialogBox.js", "../../js/editor/UI/layerUI.js", "../../js/editor/draw.js", "../../js/editor/editor.js", "../../js/editor/UI/groupUI.js", "../../js/editor/UI/mapUI.js", "../../js/editor/UI/embedDialogUI.js", "../../js/editor/UI/sideMenuUI.js", "../../js/editor/widget.js", "../../js/editor/mapboot.js"],
  "sourcesContent": ["\nexport async function getMap({ mapid, onSuccess, onError }) {\n  try {\n    const resp = await fetch(`/Builder/GetMap?mapid=${encodeURIComponent(mapid)}`);\n    if (!resp.ok) throw new Error(`Load failed: ${resp.status} ${resp.statusText}`);\n    const data = await resp.json();\n    console.log(\"map fetched!\", data);\n    onSuccess?.(data);\n  } catch (err) {\n    onError?.(err);\n  }\n}\n\nexport async function postMap({ map, onSuccess, onError }) {\n  try {\n    const resp = await fetch(\n      `/Builder/PostMap?mapid=${encodeURIComponent(map.id)}`,\n      {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(map)\n      }\n    );\n    if (!resp.ok) throw new Error(`Save failed: ${resp.status} ${resp.statusText}`);\n    // Parse updated map JSON\n    // Attempt to parse JSON; fallback to the original map object\n    let updated;\n    try {\n      updated = await resp.json();\n    } catch {\n      updated = map;\n    }\n\n    console.log(\"map saved, server returned:\", updated);\n    onSuccess?.(updated);\n  } catch (err) {\n    onError?.(err);\n  }\n}\n\nexport async function publishMap({ mapid, onSuccess, onError }) {\n  try {\n    const resp = await fetch(\n      `/Builder/PublishMap?mapid=${encodeURIComponent(mapid)}`,\n      { method: \"POST\" }\n    );\n    if (!resp.ok) throw new Error(`Publish failed: ${resp.status} ${resp.statusText}`);\n    // Parse any JSON result (e.g., published map info)\n       let result;\n    try {\n      result = await resp.json();\n    } catch {\n      result = null;\n    }\n    console.log(\"map published, server returned:\", result);\n    onSuccess?.(result);\n    console.log(\"map published, server returned:\", result);\n    onSuccess?.(result);\n  } catch (err) {\n    onError?.(err);\n  }}", "\n\nexport const floorColor = '#EAEAEA';\nexport const publicColor = '#DDE1E2';\nexport const privateColor = '#C9CED2';\nexport const greenColor = '#6eb682';\nexport const sandColor = '#fae26a';\nexport const waterColor = '#87c4f5';\nexport const innerWallColor = '#C1C3C7';\nexport const outerWallColor = '#586974';\n\nexport const GroupType = Object.freeze({\n  REGULAR: 'regular',\n  TRANSIT: 'transit'\n});\n\n\n\n\nexport const StyleIds = Object.freeze({\n  FLOOR: 'floor',\n  PUBLIC: 'public',\n  PRIVATE: 'private',\n  INNERWALL: 'innerwall',\n  OUTERWALL: 'outerwall',\n  NONE: 'none',\n});\nexport const styleOrder = [\n\n  StyleIds.FLOOR,\n  StyleIds.PUBLIC,\n  StyleIds.PRIVATE,\n  StyleIds.INNERWALL,\n  StyleIds.OUTERWALL,\n  StyleIds.NONE,\n];\n\n\nexport class StyleModel {\n\n  constructor(id, color, lineThickness) {\n\n    // When color is passed as first param\n    this.id = id;\n    this.color = color;\n    this.lineThickness = lineThickness;\n    this.enabled = true;\n\n  }\n}\n\n\nexport const LocationType = Object.freeze({\n  Custom: 'Custom',\n  Exit: 'Exit',\n  Information: 'Information',\n  Restroom: 'Restroom',\n  FamilyRestroom: 'Family Restroom',\n  MaleRestroom: 'Male Restroom',\n  FemaleRestroom: 'Female Restroom',\n  Parking: 'Parking',\n  AccessibleRamp: 'Accessible Ramp',\n  ATM: 'ATM',\n  FirstAid: 'FirstAid',\n  Security: 'Security',\n  FireExtinguisher: 'Fire Extinguisher',\n  EmergencyExit: 'Emergency Exit',\n  LostAndFound: 'Lost And Found',\n  WaitingArea: 'Waiting Area',\n  ChargingStation: 'Charging Station',\n  VendingMachine: 'Vending Machine',\n  FoodService: 'Food Service',\n  Cafeteria: 'Cafeteria',\n  WaterFountain: 'Water Fountain',\n  SmokingArea: 'Smoking Area',\n  Playground: 'Playground',\n  GreenSpace: 'Green Space',\n  Kiosk: 'Kiosk',\n  Current_Kiosk: 'Current Kiosk',\n  FoodService: 'Food Service',\n  Taxi: 'Taxi',\n  Bus: 'Bus',\n  RideShare: 'RideShare',\n  Stairs: 'Stairs',\n  Escalator: 'Escalator',\n  Elevator: 'Elevator',\n  ServiceElevator: 'Service Elevator',\n  CrateElevator: 'CrateE levator',\n  FreightElevator: 'Freigh tElevator',\n  TrashCompactor: 'Trash Compactor',\n  TrashOpenBox: 'Trash Open Box',\n});\n\n\nexport const UnitType = Object.freeze({\n  Meters: 'm',\n  Feet: 'feet'\n});\n\n\nexport const DisplayType = Object.freeze({\n  None: 'None',\n  Icon: 'Icon',\n  Label: 'Label'\n});\n\n\nexport class Vec3 {\n  /**\n   * @param {{ X?: number, Y?: number, Z?: number, x?: number, y?: number, z?: number }} obj\n   */\n  constructor(obj = {}) {\n    // pick whichever casing your JSON has\n    this.x = obj.x ?? obj.X ?? 0;\n    this.y = obj.y ?? obj.Y ?? 0;\n    this.z = obj.z ?? obj.Z ?? 0;\n  }\n}\n\n", "import { map } from \"../editor.js\";\nimport {\n  Vec3, StyleModel, LocationType, UnitType, DisplayType,\n  floorColor, publicColor, privateColor, greenColor, sandColor, waterColor, innerWallColor, outerWallColor, GroupType\n} from \"../../shared/models.js\";\n\nexport const enabledColor = 'rgb(117, 206, 146)';\nexport const disabledColor = 'rgb(219, 118, 118)';\n\nexport const SelectionMode = Object.freeze({\n  POINT: 'point',\n  LINE: 'line',\n  POLYGON: 'polygon'\n});\n\n\n\n\nexport class PointModel {\n  constructor(src = {}) {\n    if (src && typeof src === \"object\" && (\"position\" in src)) {\n      // JSON source path\n      this.position = new Vec3(src.position);\n      this.groupId = src.groupId;\n      this.layerId = src.layerId;\n      this.locationId = src.locationId;\n      if (src.twins) this.twins = [...src.twins];\n    } else {\n      // Raw position path\n      this.position = new Vec3();\n      this.groupId = '';\n      this.layerId = '';\n    }\n  }\n  toJSON() {\n    return {\n      position: this.position,\n      groupId: this.groupId,\n      layerId: this.layerId,\n      locationId: this.locationId,\n      twins: this.twins\n    }\n  }\n}\n\n\nexport class LineModel {\n  constructor(src = {}) {\n    if (src && typeof src === \"object\" && (\"pointIds\" in src || \"styleId\" in src)) {\n      // \u2500 Hydrate from JSON \u2500\n      this.styleId = src.styleId ?? \"none\";\n      // this.points = (src.points ?? []).map(n => new PointModel(n));\n\n      this.pointIds = [...(src.pointIds ?? [])];\n    } else {\n      // \u2500 New line \u2500\n      this.styleId = \"none\";\n      // this.points = [];\n      this.pointIds = [];\n    }\n  }\n\n  toJSON() {\n    return {\n      styleId: this.styleId,\n      pointIds: this.pointIds\n    };\n  }\n}\n\n\n/* 3. layerModel (owns a list of styles) */\nexport class LayerModel {\n  /**\n   * @param {object|string} srcOrName\n   *    - If it\u2019s an object, treat it as JSON (e.g., from storage).\n   *    - If it\u2019s a string, treat it as the name of a new  layer.\n   */\n  constructor(srcOrName = {}) {\n    if (typeof srcOrName === \"object\" && (srcOrName.styles || typeof srcOrName.name === \"string\")) {\n      const src = /** @type {{ id?: string; name?: string; enabled?: boolean; layerOpacity?: number; backgroundOpacity?: number;styles?: object; locations?: object }} */ (srcOrName);\n\n      this.name = src.name;\n      this.enabled = src.enabled !== false;\n      this.backgroundOpacity = src.backgroundOpacity ?? 1;\n      // this.layerOpacity = src.layerOpacity ?? 1;\n      this.backgroundDataURI = src.backgroundDataURI || \"\";\n      this.backgroundWorldWidth = src.backgroundWorldWidth ?? 100;\n      this.backgroundWorldHeight = src.backgroundWorldHeight ?? 100;\n\n      this.locationIds = [...srcOrName.locationIds];\n      this.polygons = {};\n      if (src.polygons && typeof src.polygons === 'object') {\n        Object.entries(src.polygons).forEach(([rid, rData]) => {\n          this.polygons[rid] = new PolygonModel(rData);\n        });\n      }\n\n\n\n      this.lines = {};\n      // \u2500\u2500\u2500 Branches \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n      if (src && typeof src.lines === 'object' && !Array.isArray(src.lines)) {\n        this.lines = Object.entries(src.lines).reduce((dict, [key, bData]) => {\n          const line = new LineModel(bData);\n          dict[key] = line;\n          return dict;\n        }, {});\n      }\n      this.lineLayers = {};\n      this.polygonsByStyle = {};\n\n    } else {\n      // New  layer from name string\n\n      this.name = \"layer\";\n      this.enabled = true;\n      this.backgroundOpacity = 1;\n      this.backgroundDataURI = \"\";\n      this.backgroundWorldWidth = 100;\n      this.backgroundWorldHeight = 100;\n\n      this.polygons = {};\n      this.lines = {};\n      this.locationIds = [];\n\n      this.lineLayers = {};\n      this.polygonsByStyle = {};\n\n    }\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      enabled: this.enabled,\n      opacity: this.opacity,\n      lines: this.lines,\n      polygons: Object.fromEntries(\n        Object.entries(this.polygons).map(([id, polygon]) => [id, polygon.toJSON?.() || polygon])\n      ),\n      locationIds: this.locationIds\n    };\n  }\n}\n\n\nexport class GroupModel {\n  /**\n  * @param {object} [src] \u2013 optional JSON from Unity.\n  *   If provided, can have `.id`, `.name`, `.layout`, `.path`, \n  *   `.lines`, `. layers`, `.locations`, and `.styles`.\n  */\n  constructor(src = {}) {\n    this.name = src.name || \"\";\n    this.meta = src.meta || \"\";\n    this.type = src.type || GroupType.REGULAR;\n    this.enabled = src.enabled || true;\n\n    if (src && typeof src.layers === 'object' && !Array.isArray(src.layers)) {\n      this.layers = Object.entries(src.layers).reduce((dict, [id, gData]) => {\n        const layer = new LayerModel(gData);\n        dict[id] = layer;\n        return dict;\n      }, {});\n    } else {\n      this.name = \"Group\";\n      this.type = GroupType.REGULAR;\n      this.layers = {};\n      const layer = new LayerModel({});\n      // layer.name = \"\";\n      const initlayerId = generateShortGuid();\n      this.layers[initlayerId] = layer;\n    }\n  }\n}\n\n\nexport class MapModel {\n  /**\n   * @param {object} [src] \u2013 optional JSON from Unity.\n   *   If provided, can have `.id`, `.name`, `.layout`, `.path`, \n   *   `.lines`, `. layers`, `.locations`, and `.styles`.\n   */\n  constructor(src = {}) {\n    this.id = src.id || generateShortGuid();\n    this.name = src.name || \"My Map\";\n    this.meta = src.meta || \"\";\n    this.owner = src.owner || \"\";\n    this.settings = src.settings || new MapSettingsModel();\n    this.groups = {};\n\n\n    // \u2500\u2500\u2500 Group \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    if (src && typeof src.groups === 'object' && !Array.isArray(src.groups)) {\n      this.groups = Object.entries(src.groups).reduce((dict, [id, bData]) => {\n        const group = new GroupModel(bData);\n        dict[id] = group;\n        return dict;\n      }, {});\n    } else {\n      const initGroupId = generateShortGuid();\n      this.groups[initGroupId] = new GroupModel();\n    }\n\n    this.points = {};\n    if (src.points && typeof src.points === \"object\" && !Array.isArray(src.points)) {\n      Object.entries(src.points).forEach(([id, data]) => {\n        this.points[id] = new PointModel(data);\n      });\n    }\n\n    this.locations = {};\n    if (src.locations && typeof src.locations === \"object\" && !Array.isArray(src.locations)) {\n      Object.entries(src.locations).forEach(([id, data]) => {\n        this.locations[id] = new LocationModel(data);\n      });\n    }\n\n    this.styles = {};\n    const defaults = [\n      ['none', null, 0],\n      ['floor', floorColor, 0],\n      ['public', publicColor, 0],\n      ['private', privateColor, 0],\n      ['innerwall', innerWallColor, 3],\n      ['outerwall', outerWallColor, 4],\n    ];\n\n\n\n\n    defaults.forEach(([id, color, lineThickness]) => {\n      const style = new StyleModel(id, color, lineThickness);\n      style.enabled = true;\n      this.styles[id] = style;\n    });\n  }\n\n  toJSON() {\n    return {\n      id: this.id,\n      name: this.name,\n      meta: this.meta,\n      groups: this.groups,\n      points: this.points,\n      locations: this.locations,\n      settings: this.settings\n    }\n  }\n}\n\n\nexport class MapSettingsModel {\n  constructor(src = {}) {\n    /* raw JSON has lines:[...] at the root */\n    this.unit = src.unit ?? UnitType.Meters;\n    this.gridSize = src.gridSize ?? 1;\n    //   this.doorWidth = src.doorWidth ?? 1;\n    this.rotationSnap = src.rotationSnap ?? 5;\n    this.selectionRadius = src.selectionRadius ?? 15;\n    this.allowedDomains = src.allowedDomains || [];\n  }\n  toJSON() {\n    return {\n      unit: this.unit,\n      gridSize: this.gridSize,\n      //   doorWidth: this.doorWidth,\n      rotationSnap: this.rotationSnap,\n      selectionRadius: this.selectionRadius,\n      allowedDomains: this.allowedDomains\n    };\n  }\n}\n\nexport class LocationModel {\n  constructor(src = {}) {\n    /* raw JSON has lines:[...] at the root */\n    if (src) {\n      //  this.id = src.id ?? '';\n      this.name = src.name ?? '';\n      this.meta = src.meta ?? '';\n      this.locationType = src.locationType ?? LocationType.Custom;\n      this.displayType = src.displayType ?? DisplayType.None;\n      this.polygonIds = [...(src.polygonIds ?? [])];\n      this.accessPointIds = [...(src.accessPointIds ?? [])];\n      this.groupId = src.groupId;\n      this.layerId = src.layerId;\n      this.pointId = src.pointId;\n      this.iconUrl = src.iconUrl;\n    } else {\n      this.locationType = LocationType.Custom;\n      this.displayType = DisplayType.None;\n      this.polygonIds = [];\n      this.accessPointIds = [];\n      this.groupId = '';\n      this.layerId = '';\n    }\n  }\n  toJSON() {\n    return {\n      name: this.name,\n      meta: this.meta,\n      locationType: this.locationType,\n      displayType: this.displayType,\n      polygonIds: this.polygonIds,\n      accessPointIds: this.accessPointIds,\n      groupId: this.groupId,\n      layerId: this.layerId,\n      pointId: this.pointId,\n    };\n  }\n}\n\n\nexport class PolygonModel {\n  /**\n   * @param {object|Array} srcOrNodeIds\n   * @param {string} [styleId=\"floor\"]   Ignored when first param is an object\n   */\n  constructor(srcOrNodeIds = [], styleId = \"public\") {\n    if (\n      srcOrNodeIds &&\n      typeof srcOrNodeIds === \"object\" &&\n      Array.isArray(srcOrNodeIds.pointIds)\n    ) {\n      this.pointIds = srcOrNodeIds.pointIds ?? [];         // Array<PointModel|raw>\n      this.styleId = srcOrNodeIds.styleId;\n\n    } else {\n      this.pointIds = Array.isArray(srcOrNodeIds) ? srcOrNodeIds : [];\n      this.styleId = styleId;\n    }\n  }\n  toJSON() {\n    return {\n      pointIds: this.pointIds,\n      styleId: this.styleId,\n    };\n  }\n\n\n  /** Signed area in world\u2011units\u00B2 (positive = CCW, negative = CW). */\n  get area() {\n    // Resolve GUIDs \u2192 PointModel, skip any missing vertices\n    const points = this.pointIds\n      .map(id => map.points[id])\n      .filter(Boolean);\n\n    const n = points.length;\n    if (n < 3) return 0;                    // not a polygon\n\n    let a = 0;\n    for (let i = 0; i < n; i++) {\n      const p = this._pos(points[i]);\n      const q = this._pos(points[(i + 1) % n]);\n      a += p.x * q.z - q.x * p.z;\n    }\n    return a / 2;\n  }\n\n  /** Centroid of the polygon (\u2248 geometric center). */\n  get centroid() {\n    const points = this.pointIds\n      .map(id => map.points[id])\n      .filter(Boolean);\n\n    const n = points.length;\n    if (n === 0) return { x: 0, z: 0 };\n\n    let cx = 0, cz = 0;\n    points.forEach(pt => {\n      const p = this._pos(pt);\n      cx += p.x;\n      cz += p.z;\n    });\n    return { x: cx / n, z: cz / n };\n  }\n\n  /** Convenience: returns [`guid1`, `guid2`, \u2026] (sorted). */\n  get fingerprint() {\n    // Return sorted list of valid pointIds (no longer relying on PointModel.guid)\n    return this.pointIds\n      .filter(id => map.points[id])\n      .slice()\n      .sort();\n  }\n\n  /** Toggle visibility. */\n  toggle() { this.enabled = !this.enabled; }\n\n\n\n  // Internal helper to coerce raw or PointModel to {x,z}\n  _pos(point) {\n    return { x: point.position.x, z: point.position.z };\n  }\n}\n\nexport function generateShortGuid() {\n  const bytes = crypto.getRandomValues(new Uint8Array(4));\n  return Array.from(bytes)\n    .map(b => b.toString(16).padStart(2, \"0\"))\n    .join(\"\");\n}\n", "\n\n// FSM States\nexport const STATES = {\n    IDLE: 'IDLE',\n    PANNING: 'PANNING'\n};\n\n// FSM Events\nexport const EVENTS = {\n    POINTER_DOWN: 'POINTER_DOWN',\n    POINTER_MOVE: 'POINTER_MOVE',\n    POINTER_UP: 'POINTER_UP',\n    WHEEL: 'WHEEL'\n};\n\n/**\n * Creates a navigation system for the given canvas.\n * @param {HTMLCanvasElement} canvas   Canvas element to attach navigation to\n * @param {Object}   [options]         Optional configuration\n * @param {Function} [options.onUpdate]  Callback invoked after every pan/zoom\n * @returns {Object} Navigator instance with cleanup methods\n */\nexport function createNavigator(canvas, options = {}) {\n    // options: initialPan {dx,dy}, initialScale, onUpdate callback\n    const {\n        onUpdate = () => { },\n        initialPan = { dx: 0, dy: 0 },\n        initialScale = 10\n    } = options;\n    if (!canvas) {\n        throw new Error('Canvas element is required');\n    }\n\n    // Transform state\n    let transform = {\n        scale: initialScale,\n        dx: initialPan.dx ?? 0,\n        dy: initialPan.dy ?? 0\n    };\n\n    // FSM state\n    let currentState = STATES.IDLE;\n    let lastPointer = { x: 0, y: 0 };\n\n    // Event handlers for each state\n    const stateHandlers = {\n        [STATES.IDLE]: {\n            [EVENTS.POINTER_DOWN]: (event) => {\n                const altKey = event.altKey || event.metaKey;\n                // Only start panning on left mouse button or primary touch\n                //   if (event.button === 0 || event.type === 'touchstart') {\n                if (altKey) {\n                    lastPointer.x = getEventX(event);\n                    lastPointer.y = getEventY(event);\n                    return STATES.PANNING;\n                }\n                return STATES.IDLE;\n            },\n            [EVENTS.POINTER_MOVE]: () => STATES.IDLE,\n            [EVENTS.POINTER_UP]: () => STATES.IDLE,\n            [EVENTS.WHEEL]: (event) => {\n                handleZoom(event);\n                return STATES.IDLE;\n            }\n        },\n\n        [STATES.PANNING]: {\n\n\n\n            //   [EVENTS.POINTER_DOWN]: () => STATES.PANNING,\n            [EVENTS.POINTER_MOVE]: (event) => {\n                handlePan(event);\n                return STATES.PANNING;\n            },\n            [EVENTS.POINTER_UP]: () => STATES.IDLE,\n            [EVENTS.WHEEL]: (event) => {\n                // Allow zoom while panning\n                handleZoom(event);\n                return STATES.PANNING;\n            }\n        }\n    };\n\n    /**\n     * Get X coordinate from mouse or touch event\n     */\n    function getEventX(event) {\n        if (event.touches && event.touches.length > 0) {\n            return event.touches[0].clientX;\n        }\n        return event.clientX;\n    }\n\n    /**\n     * Get Y coordinate from mouse or touch event\n     */\n    function getEventY(event) {\n        if (event.touches && event.touches.length > 0) {\n            return event.touches[0].clientY;\n        }\n        return event.clientY;\n    }\n\n    /**\n     * Convert screen coordinates to canvas coordinates\n     * Handles the difference between CSS size and canvas resolution\n     */\n    function screenToCanvas(screenX, screenY) {\n        const rect = canvas.getBoundingClientRect();\n        const scaleX = canvas.width / rect.width;\n        const scaleY = canvas.height / rect.height;\n\n        const canvasX = (screenX - rect.left) * scaleX;\n        const canvasY = (screenY - rect.top) * scaleY;\n\n        return { x: canvasX, y: canvasY };\n    }\n\n    /**\n     * Handle panning logic\n     */\n    function handlePan(event) {\n        const currentX = getEventX(event);\n        const currentY = getEventY(event);\n        //  \n        //  const deltaX = currentX - lastPointer.x;\n        //  const deltaY = currentY - lastPointer.y;\n\n\n        // Convert both current and previous positions to canvas space\n        const curCanvas = screenToCanvas(currentX, currentY);\n        const prevCanvas = screenToCanvas(lastPointer.x, lastPointer.y);\n\n        const deltaX = curCanvas.x - prevCanvas.x;\n        const deltaY = curCanvas.y - prevCanvas.y;\n\n        // Update transform in canvas\u2011pixel units\n\n        // Update transform\n        transform.dx += deltaX;\n        transform.dy += deltaY;\n\n        // Update last pointer position\n        lastPointer.x = currentX;\n        lastPointer.y = currentY;\n\n        // Notify of change\n        onUpdate({ ...transform });\n    }\n\n    /**\n     * Handle zoom logic with mouse-centered pivot\n     */\n    function handleZoom(event) {\n        event.preventDefault();\n\n        // Calculate zoom factor from wheel delta\n        const deltaMode = event.deltaMode || 0;\n        const factor = deltaMode === 1 ? 15 : 1; // Line vs pixel scrolling\n        const zoomFactor = Math.exp(-event.deltaY * 0.001 * factor);\n\n        // Get mouse position in canvas coordinates\n        const mousePos = screenToCanvas(event.clientX, event.clientY);\n\n        // Apply zoom transformation\n        // The formula keeps the point under the mouse cursor stationary\n        const newScale = transform.scale * zoomFactor;\n        const newDx = mousePos.x - (mousePos.x - transform.dx) * zoomFactor;\n        const newDy = mousePos.y - (mousePos.y - transform.dy) * zoomFactor;\n\n        // Update transform\n        transform.scale = newScale;\n        transform.dx = newDx;\n        transform.dy = newDy;\n\n        // Notify of change\n        onUpdate({ ...transform });\n    }\n\n    /**\n     * Dispatch an event to the FSM\n     */\n    function dispatch(eventType, event) {\n        const handler = stateHandlers[currentState]?.[eventType];\n        if (handler) {\n            const nextState = handler(event);\n            if (nextState && nextState !== currentState) {\n                currentState = nextState;\n            }\n        }\n    }\n\n    // Event listeners\n    function onPointerDown(event) {\n        dispatch(EVENTS.POINTER_DOWN, event);\n    }\n\n    function onPointerMove(event) {\n        dispatch(EVENTS.POINTER_MOVE, event);\n    }\n\n    function onPointerUp(event) {\n        dispatch(EVENTS.POINTER_UP, event);\n    }\n\n    function onWheel(event) {\n        dispatch(EVENTS.WHEEL, event);\n    }\n\n    // Attach event listeners\n    canvas.addEventListener('mousedown', onPointerDown);\n    canvas.addEventListener('mousemove', onPointerMove);\n    canvas.addEventListener('mouseup', onPointerUp);\n    canvas.addEventListener('mouseleave', onPointerUp); // Treat mouse leave as pointer up\n    canvas.addEventListener('wheel', onWheel, { passive: false });\n\n    // Touch events\n    canvas.addEventListener('touchstart', onPointerDown, { passive: false });\n    canvas.addEventListener('touchmove', onPointerMove, { passive: false });\n    canvas.addEventListener('touchend', onPointerUp, { passive: false });\n\n    // Public API\n    return {\n        /**\n         * Get current transform state\n         */\n        getTransform() {\n            return { ...transform };\n        },\n\n        /**\n         * Set transform state\n         */\n        setTransform(newTransform) {\n            transform = { ...newTransform };\n            onUpdate({ ...transform });\n        },\n\n        /**\n         * Reset transform to default\n         */\n        reset() {\n            transform = { scale: 1.0, dx: 0, dy: 0 };\n            onUpdate({ ...transform });\n        },\n\n        /**\n         * Get current FSM state (for debugging)\n         */\n        getState() {\n            return currentState;\n        },\n\n        /**\n         * Clean up event listeners\n         */\n        destroy() {\n            canvas.removeEventListener('mousedown', onPointerDown);\n            canvas.removeEventListener('mousemove', onPointerMove);\n            canvas.removeEventListener('mouseup', onPointerUp);\n            canvas.removeEventListener('mouseleave', onPointerUp);\n            canvas.removeEventListener('wheel', onWheel);\n            canvas.removeEventListener('touchstart', onPointerDown);\n            canvas.removeEventListener('touchmove', onPointerMove);\n            canvas.removeEventListener('touchend', onPointerUp);\n        }\n    };\n}\n\n// For non-module environments\nif (typeof window !== 'undefined') {\n    window.createNavigator = createNavigator;\n}\n\n", "\nimport { refreshViewport, buildMap } from \"../draw.js\";\nimport { setIsDirty } from \"../selection.js\";\n\nconst undoStack = [];\n\nexport function commit(cmd) {\n    console.log(\"action commited\");\n    cmd.do();\n    undoStack.push(cmd);\n    if (undoStack.length > 30) undoStack.shift();  // optional cap\n    setIsDirty(true);\n    buildMap();\n    refreshViewport();\n}\n\nfunction undo() {\n    const c = undoStack.pop();\n    if (c) {\n        c.undo();\n        refreshViewport();\n    }\n}\n\nwindow.addEventListener('keydown', function (e) {\n    const isUndo = (e.ctrlKey || e.metaKey) && !e.shiftKey && e.key.toLowerCase() === 'z';\n    if (isUndo) {\n        e.preventDefault();\n        undo();\n    }\n});\n\n", "\nimport { map } from '../editor.js'; // or wherever your LayoutModel instance lives\nimport { lineIds, pointIds, setPointId, setLineId, clearSelectionUndoRedo, setPolygonId, polygonIds, treeSelection } from '../selection.js'; // if you  \n\n/**\n * Build a command that restores selection to `afterGuids` on do(),\n * and back to `beforeGuids` on undo().\n *\n * @param {string[]} beforeGuids  \u2013 array of point GUIDs that were selected originally\n * @param {string[]} afterGuids   \u2013 array of point GUIDs after the click/drag\n */\nexport function selectCommand(beforePointIds, afterPointIds, beforeLineIds, afterLineIds, beforePolygonIds, afterPolygonIds) { // setPolygonId(polygonId);\n    return {\n        do() {\n            // Clear everything, then re-select exactly the GUIDs in afterGuids\n            clearSelectionUndoRedo();\n\n            if (!treeSelection || treeSelection.length === 0) return;\n            const sel = treeSelection.at(-1);\n\n            const group = map.groups[sel.groupId];\n            if (!group) return;\n\n            const layer = group.layers[sel.layerId];\n            if (!layer) return;\n\n\n            afterPointIds?.forEach(pointId => {\n                setPointId(pointId);\n            });\n            if (afterPointIds?.length == 0) pointIds.length = 0;\n\n            afterLineIds?.forEach(gId => {\n                setLineId(gId);\n            });\n            if (afterLineIds?.length == 0) lineIds.length = 0;\n\n            afterPolygonIds?.forEach(pId => {\n                setPolygonId(pId);\n            });\n            if (afterPolygonIds?.length == 0) polygonIds.length = 0;\n\n        },\n        undo() {\n            // Clear and then re-select exactly the GUIDs in beforeGuids\n            clearSelectionUndoRedo();\n\n            if (!treeSelection || treeSelection.length === 0) return;\n            const sel = treeSelection.at(-1);\n\n            const group = map.groups[sel.groupId];\n            if (!group) return;\n\n            const layer = group.layers[sel.layerId];\n            if (!layer) return;\n\n            beforePointIds?.forEach(pointId => {\n                setPointId(pointId);\n            });\n            if (beforePointIds?.length == 0) pointIds.length = 0;\n\n            beforeLineIds?.forEach(gId => {\n                setLineId(gId);\n            });\n            if (beforeLineIds?.length == 0) lineIds.length = 0;\n\n            beforePolygonIds?.forEach(pId => {\n                setLineId(pId);\n            });\n            if (beforePolygonIds?.length == 0) polygonIds.length = 0;\n\n        },\n        redo() {\n            this.do();\n        }\n    };\n}\n", "import { refreshViewport, canvasMain, focusOnVertices } from \"./draw.js\";\nimport { FSM_STATES, setFSMState, getCurrentState } from \"./editing/state.js\";\n//import { isDragging } from \"../shared/control.js\";\nimport { SelectionMode } from \"./models/models.js\";\nimport { commit } from \"./undoRedo/commit.js\";\nimport { selectCommand } from \"./undoRedo/select.js\";\nimport { map } from \"./editor.js\";\n\nexport let pointIds = [];\nexport let lineIds = [];\nexport let polygonIds = [];\nexport let treeSelection = [];\n\n//export let layerId = null;\n//export let styleId = null;\nexport let locationId = null;\n//export let groupId = null;\n//export let polygonId = null;\n\nexport let isMapDirty = false;\n\nexport let currentSelectionMode = null;\n\nexport function setPolygonId(polygonId) {\n  if (!treeSelection || treeSelection.length === 0) return;\n  const sel = treeSelection.at(-1);\n  const group = map.groups[sel.groupId];\n  if (!group) return;\n  const layer = group.layers[sel.layerId];\n  if (!layer) return;\n  const polygon = layer.polygons[polygonId];\n  if (!polygon) return;\n  const idx = polygonIds.indexOf(polygonId);\n  if (idx !== -1) {\n    polygonIds.splice(idx, 1);         // remove\n  } else {\n    polygonIds.push(polygonId);        // add\n  }\n  console.log(\"polygon id set to:\", polygonId);\n}\n\nexport function setLineId(lineId) {\n  if (!treeSelection || treeSelection.length === 0) return;\n  const sel = treeSelection.at(-1);\n  const group = map.groups[sel.groupId];\n  if (!group) return;\n  const layer = group.layers[sel.layerId];\n  if (!layer) return;\n  const line = layer.lines[lineId];\n  if (!line) return;\n  const idx = lineIds.indexOf(lineId);\n  if (idx !== -1) {\n    lineIds.splice(idx, 1);         // remove\n  } else {\n    lineIds.push(lineId);           // add\n  }\n}\n\nexport function setPointId(pointId) {\n  const point = map.points[pointId];\n  if (!point) return;\n  const idx = pointIds.indexOf(pointId);\n  if (idx !== -1) {\n    pointIds.splice(idx, 1);        // remove existing\n  } else {\n    pointIds.push(pointId);         // add new\n    console.log(\"point id:\" + pointId);\n  }\n}\n\nexport function setTreeSelection(groupId, layerId) {\n  // Ensure the group exists\n  const group = map.groups[groupId];\n  if (!group) return;\n\n  // If a layerId is provided, ensure that layer exists; otherwise allow group-only toggles\n  if (layerId != null) {\n    const layer = group.layers[layerId];\n    if (!layer) return;\n  }\n\n  // Toggle this (groupId, layerId) entry without clearing others\u2014enables multi-select\n  const idx = treeSelection.findIndex(\n    sel => sel.groupId === groupId && sel.layerId === layerId\n  );\n  if (idx !== -1) {\n    // Already selected, so remove\n    treeSelection.splice(idx, 1);\n  } else {\n    // Add new selection entry\n    treeSelection.push({ groupId, layerId });\n  }\n}\n\nexport function setLocationId(lId) {\n  locationId = lId;\n  console.log(\"LocationId set to:\", lId);\n}\n\nexport function clearSelectionUndoRedo() {\n  pointIds.length = 0;\n  lineIds.length = 0;\n  polygonIds.length = 0;\n}\n\nexport function clearSelection() {\n  const beforeBranchKeys = [...lineIds];\n  const beforeNodesGuids = [...pointIds];\n  const clearSelectionCmd = selectCommand(beforeNodesGuids, [], beforeBranchKeys, []);\n  commit(clearSelectionCmd);\n  setFSMState(FSM_STATES.IDLE);\n  refreshViewport();\n}\n\n/**\n * Change the active selection mode.\n * @param {string} mode \u2013 one of SelectionMode.POINT, .LINE, or .POLYGON\n */\nexport function setSelectionMode(mode) {\n  if (!Object.values(SelectionMode).includes(mode)) {\n    console.error(`Invalid selection mode: ${mode}`);\n    return;\n  }\n  console.log(`selection mode set:  ${mode}`);\n  pointIds.length = 0;\n  lineIds.length = 0;\n  polygonIds.length = 0;\n  locationId = null;\n  currentSelectionMode = mode;\n}\n\nexport function setIsDirty(v) {\n  isMapDirty = v;\n}\n", "import { map, isSnap } from \"./../editor.js\";\nimport { canvasMain, canvasSelection, pickColorMap, navigation } from \"./../../editor/draw.js\";\nimport { treeSelection } from \"./../selection.js\";\n\n/**\n * Hit testing utilities\n * @typedef {import('./types.js').PointId} PointId\n * @typedef {import('./types.js').HitTestResult} HitTestResult\n * @typedef {import('./types.js').WorldRect} WorldRect\n * @typedef {import('./types.js').ClosestPointResult} ClosestPointResult\n * @typedef {import('./types.js').ProjectionResult} ProjectionResult\n */\n\nexport const hitTest = {\n    /**\n     * Find the closest node to the given position within tolerance.\n     * @param {{x: number, z: number}} pos - Position to test\n     * @param {number} tolPx - Tolerance in pixels\n     * @returns {HitTestResult} - Closest node ID and distance\n     */\n    snapToNode(pos) {\n\n        const transform = navigation.getTransform();\n        const pickPx = map.settings.selectionRadius > 0 ? map.settings.selectionRadius : 8;\n        const tol = pickPx / transform.scale;\n\n        let closestId = null;\n        let minDist = tol;\n\n        const sel = treeSelection.at(-1);\n\n        if (sel) {\n            const group = map.groups[sel.groupId];\n            if (!group) return;\n            const layer = group.layers[sel.layerId];\n            if (!layer) return;\n\n            // Iterate all lines & their pointIds\n            Object.values(layer.lines).forEach(line => {\n                line.pointIds.forEach(pid => {\n                    const p = map.points[pid];\n                    if (!p) return;\n                    const dx = p.position.x - pos.x;\n                    const dz = p.position.z - pos.z;\n                    const dist = Math.hypot(dx, dz);\n                    if (dist < minDist) {\n                        minDist = dist;\n                        closestId = pid;\n                    }\n                });\n            });\n        }\n\n        return closestId;\n    },\n        pickPoint(pos) {\n\n        const transform = navigation.getTransform();\n        const pickPx = map.settings.selectionRadius > 0 ? map.settings.selectionRadius : 8;\n        const tol = pickPx / transform.scale;\n\n        let closestId = null;\n        let minDist = tol;\n\n        treeSelection.forEach(sel=>{\n            const group = map.groups[sel.groupId];\n            if (!group) return;\n            const layer = group.layers[sel.layerId];\n            if (!layer) return;\n\n            // Iterate all lines & their pointIds\n            Object.values(layer.lines).forEach(line => {\n                line.pointIds.forEach(pid => {\n                    const p = map.points[pid];\n                    if (!p) return;\n                    const dx = p.position.x - pos.x;\n                    const dz = p.position.z - pos.z;\n                    const dist = Math.hypot(dx, dz);\n                    if (dist < minDist) {\n                        minDist = dist;\n                        closestId = pid;\n                    }\n                });\n            });\n         });\n\n        return closestId;\n    },\n\n    snapToLocation(pos) {\n        const transform = navigation.getTransform();\n        const pickPx = map.settings.selectionRadius > 0 ? map.settings.selectionRadius : 8;\n        const tol = pickPx / transform.scale;\n\n        let closestId = null;\n        let minDist = tol;\n\n\n        treeSelection.forEach(sel => {\n            const group = map.groups[sel.groupId];\n            if (!group) return;\n            const layer = group.layers[sel.layerId];\n            if (!layer) return;\n\n            // Iterate all lines & their pointIds\n            Object.values(layer.locationIds).forEach(locationId => {\n                const location = map.locations[locationId];\n                if (!location) return;\n                const p = location.center;\n                if (!p) return;\n                const dx = p.x - pos.x;\n                const dz = p.y - pos.z;\n                const dist = Math.hypot(dx, dz);\n                if (dist < minDist) {\n                    minDist = dist;\n                    closestId = locationId;\n                }\n\n            });\n        });\n\n        return closestId;\n    },\n\n\n    /**\n     * Find all lines whose points lie within the given rectangle.\n     * @param {WorldRect} rectWorld - Rectangle in world coordinates\n     * @returns {string[]} - Array of line IDs\n     */\n    pickLinesRect(rectWorld) {\n        const { x0, z0, x1, z1 } = rectWorld;\n        const lineIds = [];\n\n        const sel = treeSelection.at(-1);\n        if (sel) {\n            const group = map.groups[sel.groupId];\n            if (!group) return;\n            const layer = group.layers[sel.layerId];\n            if (!layer) return;\n\n            Object.entries(layer.lines).forEach(([lineId, line]) => {\n                const allInside = line.pointIds.every(guid => {\n                    const n = map.points[guid];\n                    return n.position.x >= x0 && n.position.x <= x1 &&\n                        n.position.z >= z0 && n.position.z <= z1;\n                });\n                if (allInside) lineIds.push(lineId);\n            });\n        };\n\n        return lineIds;\n    },\n\n    getSelectedPolygon(e) {\n        // Convert raw mouse coordinates to canvas pixel coordinates\n        const rect = canvasMain.getBoundingClientRect();\n        const x = e.clientX - rect.left;\n        const y = e.clientY - rect.top;\n        const scaleX = canvasMain.width / rect.width;\n        const scaleY = canvasMain.height / rect.height;\n        const px = Math.floor(x * scaleX);\n        const py = Math.floor(y * scaleY);\n\n        // Ensure canvasSelection and pickColorMap are imported at top of file:\n        // import { canvasSelection, pickColorMap } from \"../../editor/draw.js\";\n\n        const ctx = canvasSelection.getContext(\"2d\");\n        const data = ctx.getImageData(px, py, 1, 1).data;  // [r, g, b, a]\n        const pickColor = `rgb(${data[0]},${data[1]},${data[2]})`;\n\n        // Lookup polygon by color, return null if none\n        return pickColorMap[pickColor] || null;\n    },\n\n    /**\n     * Find the closest branch (line) to the given position.\n     * @param {{x: number, z: number}} pos - Position to test\n     * @returns {string | null} - Closest line ID or null\n     */\n    getClosestBranch(pos) {\n        // console.log('getClosestBranch called with pos:', pos);\n        //  const layer = map.groups[groupId]?.layers[layerId];\n        //  if (!layer) {\n        //      //  console.log('No layer found, returning null');\n        //      return null;\n        //  }\n        const transform = navigation.getTransform();\n        const pickPx = map.settings.selectionRadius > 0 ? map.settings.selectionRadius : 8;\n        const tolWorld = pickPx / transform.scale;\n        const tolSq = tolWorld * tolWorld;\n        //  console.log('Tolerance squared:', tolSq);\n\n        let bestId = null;\n        let bestDistSq = tolSq;\n        let bestSegs = Infinity;\n        treeSelection.forEach(sel => {\n            const group = map.groups[sel.groupId];\n            if (!group) return;\n            const layer = group.layers[sel.layerId];\n            if (!layer) return;\n            Object.entries(layer.lines).forEach(([id, line]) => {\n                const pts = line.pointIds.map(nid => map.points[nid]);\n                if (pts.length < 2) return;\n\n                for (let i = 0; i < pts.length - 1; i++) {\n                    const a = pts[i].position;\n                    const b = pts[i + 1].position;\n                    const distSq = this.pointToSegmentDistanceSq(pos.x, pos.z, a.x, a.z, b.x, b.z);\n\n                    if (\n                        distSq < bestDistSq - 1e-9 ||\n                        (Math.abs(distSq - bestDistSq) < 1e-9 && pts.length < bestSegs)\n                    ) {\n                        bestDistSq = distSq;\n                        bestId = id;\n                        bestSegs = pts.length;\n                    }\n                }\n            });\n        });\n\n        // console.log('getClosestBranch returning:', bestId);\n        return bestId;\n    },\n\n    /**\n     * Find the closest point on the given branches (lines).\n     * @param {{x: number, z: number}} pos - Position to test\n     * @param {string[]} lineIds - Array of line IDs to test\n     * @param {number} Dlimit - Distance limit from line ends (default 0)\n     * @returns {ClosestPointResult | null}\n     */\n    getClosestPointOnBranches(pos, lineIds, Dlimit = 0) {\n        let best = {\n            distance: Infinity,\n            x: 0, z: 0,\n            segmentIndex: -1,\n            t: 0,\n            lineId: ''\n        };\n\n        treeSelection.forEach(sel => {\n            const group = map.groups[sel.groupId];\n            if (!group) return;\n            const layer = group.layers[sel.layerId];\n            if (!layer) return;\n\n            lineIds.forEach(lineId => {\n                if (!lineId) return;\n                const line = layer.lines[lineId];\n\n                const points = line.pointIds.map(id => map.points[id]);\n                if (points.length <= 1) return;\n\n                for (let i = 0; i < points.length - 1; i++) {\n                    const a = points[i].position;\n                    const b = points[i + 1].position;\n\n                    const proj = this.projectPointToSegment(pos.x, pos.z, a.x, a.z, b.x, b.z);\n\n                    if (Dlimit > 0) {\n                        const segLen = Math.hypot(b.x - a.x, b.z - a.z);\n                        const tol = segLen > 0 ? Dlimit / segLen : 0;\n                        proj.t = Math.min(1 - tol, Math.max(tol, proj.t));\n                        proj.x = a.x + (b.x - a.x) * proj.t;\n                        proj.z = a.z + (b.z - a.z) * proj.t;\n                    }\n\n                    const dx = pos.x - proj.x;\n                    const dz = pos.z - proj.z;\n                    const dist = Math.hypot(dx, dz);\n\n                    if (dist < best.distance) {\n                        best = {\n                            distance: dist,\n                            x: proj.x,\n                            z: proj.z,\n                            segmentIndex: i,\n                            t: proj.t,\n                            lineId\n                        };\n                    }\n                }\n            });\n        });\n\n        return best;\n    },\n\n    /**\n     * Calculate squared distance from point to line segment.\n     * @param {number} px - Point x coordinate\n     * @param {number} pz - Point z coordinate\n     * @param {number} x1 - Segment start x\n     * @param {number} z1 - Segment start z\n     * @param {number} x2 - Segment end x\n     * @param {number} z2 - Segment end z\n     * @returns {number} - Squared distance\n     */\n    pointToSegmentDistanceSq(px, pz, x1, z1, x2, z2) {\n        const vx = x2 - x1, vz = z2 - z1;\n        const wx = px - x1, wz = pz - z1;\n        const c1 = vx * wx + vz * wz;\n        const c2 = vx * vx + vz * vz;\n        let t = c2 > 0 ? c1 / c2 : 0;\n        t = Math.max(0, Math.min(1, t));\n        const projx = x1 + t * vx;\n        const projz = z1 + t * vz;\n        const dx = px - projx;\n        const dz = pz - projz;\n        return dx * dx + dz * dz;\n    },\n\n    /**\n     * Project a point onto a line segment.\n     * @param {number} px - Point x coordinate\n     * @param {number} pz - Point z coordinate\n     * @param {number} x1 - Segment start x\n     * @param {number} z1 - Segment start z\n     * @param {number} x2 - Segment end x\n     * @param {number} z2 - Segment end z\n     * @returns {ProjectionResult} - Projected point and parameter t\n     */\n    projectPointToSegment(px, pz, x1, z1, x2, z2) {\n        const vx = x2 - x1, vz = z2 - z1;\n        const wx = px - x1, wz = pz - z1;\n        const c1 = vx * wx + vz * wz;\n        const c2 = vx * vx + vz * vz;\n        let t = c2 > 0 ? c1 / c2 : 0;\n        t = Math.max(0, Math.min(1, t));\n\n        return {\n            x: x1 + t * vx,\n            z: z1 + t * vz,\n            t\n        };\n    }\n};\n\nexport function computeCentroid(points) {\n    const sum = { x: 0, y: 0, z: 0 };\n\n    points.forEach(point => {\n        sum.x += point.position.x;\n        sum.y += point.position.y;\n        sum.z += point.position.z;\n    });\n\n    const count = points.length;\n    return {\n        x: sum.x / count,\n        y: sum.y / count,\n        z: sum.z / count\n    };\n}\n\n\nexport function snap(v) {\n    if (!isSnap) return v;\n    // Use custom gridSize if defined and positive, otherwise default SNAP_TRANSLATE\n    const step = (map.settings.gridSize > 0)\n        ? Math.abs(map.settings.gridSize)\n        : 1;\n    return Math.round(v / step) * step;\n}\n", "import { map } from \"./editor.js\";\nimport {  PolygonModel } from \"./models/models.js\";\nimport { treeSelection} from \"./selection.js\";\n \n\n// -----------------------------\n// Geometry helpers\n// -----------------------------\n\n// 2\u2011D point\u2011in\u2011polygon (XZ\u2011plane) using the even\u2011odd rule\nexport function isPointInPolygon(pt, poly) {\n    const x = pt.position ? pt.position.x : pt.x;\n    const y = pt.position ? pt.position.z : pt.z;\n\n    let inside = false;\n    for (let i = 0, j = poly.length - 1; i < poly.length; j = i++) {\n        const pi = poly[i].position ? { x: poly[i].position.x, y: poly[i].position.z }\n            : { x: poly[i].x, y: poly[i].z };\n        const pj = poly[j].position ? { x: poly[j].position.x, y: poly[j].position.z }\n            : { x: poly[j].x, y: poly[j].z };\n\n        const intersect = (pi.y > y) !== (pj.y > y) &&\n            x < (pj.x - pi.x) * (y - pi.y) / (pj.y - pi.y) + pi.x;\n        if (intersect) inside = !inside;\n    }\n    return inside;\n}\n\n// --------------------------------------------------\n// Point-to-segment distance\u00B2 (XZ plane)\nfunction dist2ToSegment(p, a, b) {\n    const px = p.x, pz = p.z;\n    const ax = a.x, az = a.z;\n    const bx = b.x, bz = b.z;\n\n    const vx = bx - ax;\n    const vz = bz - az;\n    const wx = px - ax;\n    const wz = pz - az;\n\n    const c1 = vx * wx + vz * wz;\n    if (c1 <= 0) return (px - ax) ** 2 + (pz - az) ** 2;\n\n    const c2 = vx * vx + vz * vz;\n    if (c2 <= c1) return (px - bx) ** 2 + (pz - bz) ** 2;\n\n    const t = c1 / c2;\n    const projX = ax + t * vx;\n    const projZ = az + t * vz;\n    return (px - projX) ** 2 + (pz - projZ) ** 2;\n}\n\n// --------------------------------------------------\n// \u201CInside OR on edge\u201D test\nconst EPS2 = 1e-6;                     // 1 mm in world units (adjust if needed)\nexport function isPointInOrOnPolygon(pt, poly) {\n    if (isPointInPolygon(pt, poly)) return true;   // strictly inside\n\n    // otherwise, check if it sits on any edge\n    for (let i = 0; i < poly.length; i++) {\n        const a = poly[i].position ?? poly[i];\n        const b = poly[(i + 1) % poly.length].position ?? poly[(i + 1) % poly.length];\n        if (dist2ToSegment(\n            pt.position ?? pt,\n            { x: a.x ?? a.position.x, z: a.z ?? a.position.z },\n            { x: b.x ?? b.position.x, z: b.z ?? b.position.z }\n        ) < EPS2) {\n            return true;          // lies on the border\n        }\n    }\n    return false;\n}\n\n\n\n// --------------------------------------------------\n// Strict\u2011containment test:\n//  \u2022 every vertex of `inner` is in/on `outer`\n//  \u2022 at least one vertex lies strictly inside\n// --------------------------------------------------\nexport function polygonStrictlyContainsPolygon(outer, inner) {\n    let anyStrict = false;\n    for (const v of inner) {\n        if (!isPointInOrOnPolygon(v, outer)) return false;\n        if (isPointInPolygon(v, outer)) anyStrict = true;\n    }\n    return anyStrict;\n}\n\n\n/**\n * Add a polygon if it doesn\u2019t already exist.\n * @param {string[]} pointIds \u2013 GUIDs of the polygon\u2019s perimeter points, in any order.\n * @returns {string|null}    \u2013 Room GUID (existing or newly created), or null if\n *                              the current group / layer is missing.\n */\nexport function tryGeneratePolygon(lineIds, styleId) {\n   // const newRoomId =null;\n    if (!treeSelection || treeSelection.length === 0) return;\n    const sel = treeSelection.at(-1);\n\n    const group = map.groups[sel.groupId];\n    if (!group) return;\n\n    const layer = group.layers[sel.layerId];\n    if (!layer) return;\n \n    let pointIds = stitchBranchesIntoRing(lineIds, layer.lines);\n    if (!pointIds) {\n        console.error(\"Cannot form a closed loop from selected lines:\", lineIds);\n        return;\n    }\n\n    const canonicalKey = pointIds.slice().sort().join(\"|\");\n    const eventualRoomId = generatePolygonIdFromCanonicalKey(canonicalKey);\n\n    layer.polygons ??= {};                       // ensure dict exists\n    layer.polygons[eventualRoomId] = new PolygonModel(pointIds, styleId, true);\n \n}\n\n\n\n/**\n * Stitches the selected line branches into a single closed ring.\n * Works even when the user picks lines in random order or when some\n * line point arrays are reversed.\n *\n * @param {string[]} lineIds\n * @param {object}   lines              layer.lines dictionary\n * @returns {string[]|null}             ordered pointIds ending with the\n *                                      same id that starts the array,\n *                                      or null if the lines do not form\n *                                      ONE simple, closed loop.\n */\nfunction stitchBranchesIntoRing(lineIds, lines) {\n    if (!Array.isArray(lineIds) || lineIds.length === 0) return null;\n\n    // ===== Fast path: single line \u2013 always make a ring if it has \u2265 3 points =====\n    if (lineIds.length === 1) {\n        const pts = lines[lineIds[0]]?.pointIds;\n        if (pts && pts.length >= 3) {\n            const ring = pts.slice();                 // copy\n            if (ring[0] !== ring[ring.length - 1]) {\n                ring.push(ring[0]);                   // close the loop\n            }\n            return ring;                              // no further processing needed\n        }\n        // fall through if fewer than 3 points\n    }\n\n    // 1) Build an undirected adjacency list (pointId -> [neighbourIds])\n    const graph = new Map();\n    for (const lid of lineIds) {\n        const pts = lines[lid]?.pointIds;\n        if (!pts || pts.length < 2) return null;\n\n        for (let i = 0; i < pts.length - 1; i++) {\n            const a = pts[i], b = pts[i + 1];\n            if (!graph.has(a)) graph.set(a, []);\n            if (!graph.has(b)) graph.set(b, []);\n            graph.get(a).push(b);\n            graph.get(b).push(a);\n        }\n    }\n\n    // 2) Every vertex in a simple closed loop must have degree 2\n    for (const [pid, neighbours] of graph) {\n        if (neighbours.length !== 2) return null;\n    }\n\n    // 3) Walk the ring once to produce an ordered list of pointIds\n    const start = graph.keys().next().value;\n    const ring = [start];\n\n    let prev = null;\n    let current = start;\n\n    while (true) {\n        const neighbours = graph.get(current);\n        // pick the neighbour that is NOT the vertex we just came from\n        const next = neighbours[0] === prev ? neighbours[1] : neighbours[0];\n\n        if (next === start) {          // completed the loop\n            ring.push(start);\n            break;\n        }\n        if (ring.includes(next)) {     // encountered a visited vertex too early -> self\u2011intersection\n            return null;\n        }\n        ring.push(next);\n        prev = current;\n        current = next;\n\n        // Safety guard to avoid infinite loops\n        if (ring.length > graph.size + 1) return null;\n    }\n\n    return ring;\n}\n\n \n\n/**\n * FNV-1a 32-bit hash, output in base-36.\n * @param {string} str \u2013 your long polygon key (e.g. \"11845c97|37032f50|\u2026\")\n * @returns {string}   \u2013 a short, \u201Crandom-looking\u201D string like \"k9f3zt\"\n */\nfunction generatePolygonIdFromCanonicalKey(str) {\n    let hash = 0x811c9dc5;            // FNV offset basis (2166136261)\n    for (let i = 0; i < str.length; i++) {\n        hash ^= str.charCodeAt(i);\n        // FNV prime = 16777619\n        hash = (hash * 0x01000193) >>> 0;\n    }\n    // toString(36) gives 0\u20139a\u2013z and is much shorter than hex\n    return hash.toString(36);\n}\n\n \n\n\n", "import {   LineModel, PolygonModel } from '../models/models.js';   // assumes PointModel is already imported somewhere\nimport { map } from '../editor.js'; // or wherever your LayoutModel instance lives\nimport { lineIds, pointIds, polygonIds, setPolygonId, setPointId, treeSelection } from '../selection.js'; // if you also want to auto-select\nimport { buildMap } from \"../draw.js\";\nimport { FSM_STATES, setFSMState } from './../editing/state.js';\n\n\n\n/**\n * Create a command that:\n *  1. Deletes all currently selected points.\n *  2. Automatically detects any line that becomes orphaned (<=1 point) and deletes it too.\n * On undo(), restores every line (with its point\u2010list) and every point exactly as they were.\n */\nexport function deleteCommand() {\n\n    let affectedBranches = {};\n    let affectedPolygons = {};\n    let affectedLocs = {};\n\n\n    if (!treeSelection || treeSelection.length === 0) return;\n    const sel = treeSelection.at(-1);\n\n    const group = map.groups[sel.groupId];\n    if (!group) return;\n\n    const layer = group.layers[sel.layerId];\n    if (!layer) return;\n\n    const cacheGroupId = sel.groupId;\n    const cacheLayerId = sel.layerId;\n\n    lineIds.forEach(gId => {\n        const branchToDelete = layer.lines[gId];\n        if (branchToDelete) {\n            // Clone the line so we can restore it later:\n            const savedBranch = new LineModel({\n                styleId: branchToDelete.styleId,\n                pointIds: [...branchToDelete.pointIds]\n            });\n            affectedBranches[gId] = savedBranch;\n\n            branchToDelete.pointIds.forEach(pointId => {\n               const point = map.points[pointId];\n              if (point.associatedLines.length <= 1) setPointId(pointId);\n            })\n            // points\n            // branchToDelete.pointIds.map(pointId => setPointId(pointId));// add the affected points\n        }\n    });\n\n\n //   // Build a Set once \u2013 O(m) where m = pointIds.length\n //   const deletedIdSet = new Set(pointIds);\n //   // delete the affected polygons as well\n //   Object.entries(layer.polygons).forEach(([polygonId, polygon]) => {\n //       // does this polygon reuse ANY of the deleted IDs?\n //       if (polygon.pointIds?.some(id => deletedIdSet.has(id))) {\n //           setPolygonId(polygonId);\n //       }\n //   });\n\n    polygonIds.forEach(polygonId => {\n        const affectedPolygon = layer.polygons[polygonId];\n        if (affectedPolygon) {\n            // Clone the polygon so we can restore it later:\n            const savedPolygon = new PolygonModel({\n                styleId: affectedPolygon.styleId,\n                pointIds: [...affectedPolygon.pointIds]\n            });\n            affectedPolygons[polygonId] = savedPolygon;\n        }\n    });\n\n\n    pointIds.forEach(pointId => {\n        const point = map.points[pointId];\n        if (!point) return;\n        point.associatedLines.forEach((gId, i) => {\n            const affectedBranch = layer.lines[gId];\n            if (affectedBranch) {\n                // Clone the line so we can restore it later:\n                const savedBranch = new LineModel({\n                    styleId: affectedBranch.styleId,\n                    pointIds: [...affectedBranch.pointIds]\n                });\n\n                affectedBranches[gId] = savedBranch;\n            }\n        });\n\n\n    });\n    return {\n        do() {\n            if (!treeSelection || treeSelection.length === 0) return;\n            const sel = treeSelection.at(-1);\n\n            const group = map.groups[sel.groupId];\n            if (!group) return;\n\n            const layer = group.layers[sel.layerId];\n            if (!layer) return;\n\n            // Reme each point from every recorded line\n            pointIds.forEach(pointId => {\n                const point = map.points[pointId];\n\n                Object.entries(map.locations).forEach(([locationId, location]) => {\n                    if (location.pointId && location.pointId === pointId) {\n                        affectedLocs[locationId] = location;   // shallow clone is enough\n                        const lIdIndex = layer.locationIds.indexOf(locationId);\n                        if (lIdIndex !== -1) layer.locationIds.splice(lIdIndex, 1);\n                        delete map.locations[locationId];\n                    }\n                })\n\n\n                point.associatedLines.forEach((lId, i) => {\n                    const line = layer.lines[lId];\n                    if (!line) return;\n                    const pointIndex = line.pointIds.indexOf(pointId);\n                    if (pointIndex !== -1) line.pointIds.splice(pointIndex, 1);\n                });\n            });\n\n\n            // Clear the point selection\n            pointIds.length = 0\n\n            lineIds.forEach(id => {\n                delete layer.lines[id];\n            });\n            // Clear the line selection\n            lineIds.length = 0\n\n            //clean ploygons selection\n            polygonIds.forEach(polygonId => {\n                delete layer.polygons[polygonId];\n            });\n            polygonIds.length = 0;\n\n            // Clear the global selection so no points remain selected\n            setFSMState(FSM_STATES.IDLE);\n            buildMap();\n\n        },\n\n        undo() {\n            const group = map.groups[cacheGroupId];\n            if (!group) return;\n            const layer = group.layers[cacheLayerId];\n            if (!layer) return;\n\n            Object.entries(affectedBranches).forEach(([gId, restoredBranch]) => {\n                layer.lines[gId] = restoredBranch;\n            });\n\n            Object.entries(affectedPolygons).forEach(([pId, restoredPolygon]) => {\n                layer.polygons[pId] = restoredPolygon;\n            });\n\n            Object.entries(affectedLocs).forEach(([lId, restoredLocation]) => {\n                map.locations[lId] = restoredLocation;\n                layer.locationIds.push(lId);\n            });\n\n            setFSMState(FSM_STATES.IDLE);\n            buildMap();\n\n        },\n\n        redo() {\n            this.do();\n        }\n    };\n}\n\n\n", "import { LineModel, generateShortGuid, SelectionMode, enabledColor, disabledColor, LocationModel } from \"../models/models.js\";\nimport { floorColor, publicColor, privateColor, greenColor, sandColor, waterColor, innerWallColor, outerWallColor } from \"../../shared/models.js\";\nimport { map, isGrid, isSnap, isPreview, switchGridVisibility, switchPreviewVisibility, switchDebugVisibility, switchSnapVisibility, isDebug } from \"../editor.js\";\nimport { canvasMain, refreshViewport, resizeAllCanvases, buildMap, centerView } from \"../draw.js\";\nimport { FSM_STATES, setFSMState } from \"../editing/state.js\";\nimport { commit } from \"../undoRedo/commit.js\";\nimport { deleteCommand } from \"../undoRedo/delete.js\";\nimport { tryGeneratePolygon } from \"../../editor/polygonGenerator.js\";\nimport { polygonIds, lineIds, setSelectionMode, pointIds, setLocationId, treeSelection } from \"../selection.js\";\nimport { updateSideMenuUI } from \"./sideMenuUI.js\";\n\n\n\n\nlet fullscreen = false;\nlet modeButtons = null;\n/* Fullscreen fallback CSS for Safari */\nconst fsFallbackStyle = document.createElement('style');\nfsFallbackStyle.innerHTML = `\n#canvasroot.force-fullscreen {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  z-index: 9999;\n}\n`;\ndocument.head.appendChild(fsFallbackStyle);\n\n\nexport function forcePointSelection() {\n    const pointBtn = document.getElementById(\"point\");\n    if (!modeButtons) return;\n    modeButtons.forEach(b => b.classList.toggle('active', b === pointBtn));\n\n    setSelectionMode(SelectionMode.POINT);\n    canvasMain.focus();\n    refreshViewport();\n}\n\nexport function forcePolygonSelection() {\n    const faceBtn = document.getElementById(\"face\");\n    if (!modeButtons) return;\n    modeButtons.forEach(b => b.classList.toggle('active', b === faceBtn));\n\n    setSelectionMode(SelectionMode.POLYGON);\n    canvasMain.focus();\n    refreshViewport();\n}\n\nexport function deselectEverything() {\n    if (!modeButtons) return;\n    modeButtons.forEach(b => b.classList.toggle('active', false));\n    canvasMain.focus();\n    refreshViewport();\n}\n\nexport function forceEdgeSelection() {\n    const edgeBtn = document.getElementById(\"edge\");\n    if (!modeButtons) return;\n    modeButtons.forEach(b => b.classList.toggle('active', b === edgeBtn));\n\n    setSelectionMode(SelectionMode.LINE);\n    canvasMain.focus();\n    refreshViewport();\n}\n\nexport function initToolsMenu() {\n\n\n\n    const rotateBtn = document.getElementById(\"rotate\");\n    const scaleBtn = document.getElementById(\"scale\");\n    const centerBtn = document.getElementById(\"centereditor\");\n    const addBtn = document.getElementById(\"addpoint\");\n    const deleteBtn = document.getElementById(\"deletenode\");\n    const fullScreenBtn = document.getElementById(\"fullscreeneditor\");\n    const addDoorBtn = document.getElementById(\"adddoor\");\n    const previewBtn = document.getElementById(\"previewmode\");\n    const debugBtn = document.getElementById(\"debugmode\");\n    const snapBtn = document.getElementById(\"snap\");\n\n    // const addLocationBtn = document.getElementById(\"addlocation\");\n\n    const gridBtn = document.getElementById(\"grid\");\n    const pointBtn = document.getElementById(\"point\");\n    const edgeBtn = document.getElementById(\"edge\");\n    const faceBtn = document.getElementById(\"face\");\n\n\n    centerBtn.addEventListener(\"click\", () => {\n        console.log(\"click center btn \");\n        centerView(10);\n    });\n\n    // All mode buttons share one highlight group\n    modeButtons = [pointBtn, edgeBtn, faceBtn, addBtn, addDoorBtn, rotateBtn, scaleBtn];// panBtn,\n\n    /**\n     * Activate a button: set the mode, highlight it, and optionally set selection.\n     * @param {HTMLButtonElement} btn    \u2013 the clicked button\n     * @param {string}            mode   \u2013 EditMode value\n     * @param {string}           [sel]   \u2013 optional SelectionMode value\n     */\n    function activate(btn, mode, sel) {\n        setFSMState(mode);\n        // highlight only this button\n        modeButtons.forEach(b => b.classList.toggle('active', b === btn));\n        // if a selection-mode is provided, set it and refresh\n        if (sel) {\n            setSelectionMode(sel);\n            canvasMain.focus();\n            refreshViewport();\n        }\n    }\n\n    pointBtn.addEventListener(\"click\", () => {\n        activate(pointBtn, FSM_STATES.IDLE, SelectionMode.POINT);\n        updateSideMenuUI(\"none\");\n    });\n    edgeBtn.addEventListener(\"click\", () => {\n        activate(edgeBtn, FSM_STATES.IDLE, SelectionMode.LINE);\n        updateSideMenuUI(\"none\");\n    });\n\n    faceBtn.addEventListener(\"click\", () => {\n        activate(faceBtn, FSM_STATES.IDLE, SelectionMode.POLYGON);\n        updateSideMenuUI(\"none\");\n    });\n\n    rotateBtn.addEventListener(\"click\", () => {\n        activate(rotateBtn, FSM_STATES.ROTATE);\n    });\n\n    scaleBtn.addEventListener(\"click\", () => {\n        activate(scaleBtn, FSM_STATES.SCALE);\n    });\n\n    addBtn.addEventListener(\"click\", () => {\n        activate(addBtn, FSM_STATES.ADD_POINT, null);\n    });\n\n    addDoorBtn.addEventListener(\"click\", () => {\n        activate(addDoorBtn, FSM_STATES.ADD_DOOR, null);\n    });\n\n\n    //  addLocationBtn.addEventListener(\"click\", () => {\n    //      pointIds.forEach(pId => {\n    //          addNewLocation(pId)\n    //          updateSideMenuUI(\"location\");\n    //      })\n    //\n    //      refreshViewport();\n    //  });\n\n    gridBtn.addEventListener(\"click\", () => {\n        switchGridVisibility();\n        updateGridIcon();\n        refreshViewport();\n    });\n\n\n    deleteBtn.addEventListener(\"click\", () => {\n        var deleteSelectionCommand = deleteCommand();\n        commit(deleteSelectionCommand);\n    });\n\n\n    snapBtn.addEventListener(\"click\", () => {\n        switchSnapVisibility();\n        updateSnapIcon();\n        refreshViewport();\n    });\n\n    previewBtn.addEventListener(\"click\", () => {\n        switchPreviewVisibility();\n        updatePreviewIcon();\n        refreshViewport();\n    });\n\n    debugBtn.addEventListener(\"click\", () => {\n        switchDebugVisibility();\n        updateDebugIcon();\n        refreshViewport();\n    });\n\n\n    fullScreenBtn.addEventListener(\"click\", () => {\n        const root = document.getElementById('wrapper');\n        // Detect any native fullscreen\n        const isNativeFS = document.fullscreenElement || document.webkitFullscreenElement || document.msFullscreenElement;\n        if (isNativeFS) {\n            // Exit native fullscreen\n            if (document.exitFullscreen) document.exitFullscreen();\n            else if (document.webkitExitFullscreen) document.webkitExitFullscreen();\n            else if (document.msExitFullscreen) document.msExitFullscreen();\n            // exit will trigger fullscreenchange event\n            return;\n        }\n        // Enter native fullscreen if available\n        if (root.requestFullscreen) {\n            root.requestFullscreen();\n        } else if (root.webkitRequestFullscreen) {\n            root.webkitRequestFullscreen();\n        } else if (root.msRequestFullscreen) {\n            root.msRequestFullscreen();\n        } else {\n            // Fallback for browsers without Fullscreen API\n            root.classList.toggle('force-fullscreen');\n            fullscreen = !fullscreen;\n            updateFullscreenIcon();\n            resizeAllCanvases();\n        }\n    });\n\n    // handle the native fullscreen change event:\n    document.addEventListener('fullscreenchange', () => {\n        fullscreen = !!document.fullscreenElement;\n        updateFullscreenIcon();\n        resizeAllCanvases()\n    });\n\n\n\n\n    const styletoolbar = document.getElementById(\"styletoolbar\");\n    const toolbar = createToolbar();\n    // insert cloud buttons above the tree\n\n    // insert our toolbar immediately below the tree\n    //toolbar.style.marginLeft = `${navTree.offsetLeft}px`;\n    // toolbar.style.marginTop = \"4px\";\n    styletoolbar.appendChild(toolbar);\n\n    activate(pointBtn, FSM_STATES.IDLE, SelectionMode.POINT);\n    updateGridIcon();\n    updateSnapIcon();\n    updatePreviewIcon();\n    updateDebugIcon();\n}\n\n\nfunction updateFullscreenIcon() {\n    const fullScreenBtn = document.getElementById(\"fullscreeneditor\");\n    const img = fullScreenBtn.querySelector('img');\n    if (!img) return;\n    img.src = fullscreen ? 'https://cdn.jsdelivr.net/gh/elseforty/IndoorLens/LocationIcons/Minimize.png'\n        : 'https://cdn.jsdelivr.net/gh/elseforty/IndoorLens/LocationIcons/Maximize.png';\n}\n\n\n\n\nfunction updateGridIcon() {\n    const gridBtn = document.getElementById(\"grid\");\n    gridBtn.innerHTML = '';\n\n    let icon = null;\n    if (!isGrid) icon = \"/Images/HideGrid.png\";\n    else icon = \"/Images/ShowGrid.png\";\n\n    gridBtn.style.backgroundImage = `url(\"${icon}\")`;\n    // optional sizing tweaks:\n    gridBtn.style.backgroundSize = \"contain\";\n    gridBtn.style.backgroundRepeat = \"no-repeat\";\n    gridBtn.style.backgroundPosition = \"center\";\n    gridBtn.style.backgroundSize = \"16px 16px\";\n}\n\nfunction updatePreviewIcon() {\n    const previewBtn = document.getElementById(\"previewmode\");\n    previewBtn.innerHTML = '';\n\n    let icon = null;\n\n    if (!isPreview) icon = \"/Images/PreviewOff.png\";\n    else icon = \"/Images/PreviewOn.png\";\n\n    previewBtn.style.backgroundImage = `url(\"${icon}\")`;\n    previewBtn.style.backgroundSize = \"contain\";\n    previewBtn.style.backgroundRepeat = \"no-repeat\";\n    previewBtn.style.backgroundPosition = \"center\";\n    previewBtn.style.backgroundSize = \"16px 16px\";\n\n\n}\n\nfunction updateDebugIcon() {\n    const debugBtn = document.getElementById(\"debugmode\");\n    debugBtn.innerHTML = '';\n\n    let icon = null;\n\n    if (!isDebug) icon = \"/Images/DebugOff.png\";\n    else icon = \"/Images/DebugOn.png\";\n\n    debugBtn.style.backgroundImage = `url(\"${icon}\")`;\n    debugBtn.style.backgroundSize = \"contain\";\n    debugBtn.style.backgroundRepeat = \"no-repeat\";\n    debugBtn.style.backgroundPosition = \"center\";\n    debugBtn.style.backgroundSize = \"16px 16px\";\n}\n\nfunction updateSnapIcon() {\n    const snapBtn = document.getElementById(\"snap\");\n    snapBtn.innerHTML = '';\n\n    let icon = null;\n\n    if (!isSnap) icon = \"/Images/SnapOff.png\";\n    else icon = \"/Images/SnapOn.png\";\n\n    snapBtn.style.backgroundImage = `url(\"${icon}\")`;\n    snapBtn.style.backgroundSize = \"contain\";\n    snapBtn.style.backgroundRepeat = \"no-repeat\";\n    snapBtn.style.backgroundPosition = \"center\";\n    snapBtn.style.backgroundSize = \"16px 16px\";\n}\n\n\n\n\nfunction createToolbar() {\n    // 1) Parent container\n    const toolbarDiv = document.createElement(\"div\");\n    // lay out toolbar items in one horizontal row\n    toolbarDiv.style.display = \"flex\";\n    toolbarDiv.style.alignItems = \"center\";\n    toolbarDiv.style.gap = \"2px\";\n    toolbarDiv.style.whiteSpace = \"nowrap\";\n    toolbarDiv.id = \"toolbar\";\n\n    /**\n     * Build a compound style\u2010button:\n     *  \u250C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n     *  \u2502 24\u00D724 top    \u2502 \u2190 apply style\n     *  \u251C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n     *  \u2502 24\u00D710 bottom \u2502 \u2190 show / hide toggle\n     *  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n     *\n     * Clicking the top region   \u21D2 assign styleId to selected polygons / lines.\n     * Clicking the bottom region\u21D2 toggle visibility of everything with that styleId.\n     */\n    function makeBtn(id, title, color) {\n\n\n        const style = map.styles[id];\n\n\n        /* outer wrapper \u2013 fixed 24\u00D734 */\n        const wrapper = document.createElement(\"div\");\n        Object.assign(wrapper.style, {\n            width: \"24px\",\n            height: \"30px\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"stretch\",\n            border: \"1px solid #333\",\n            boxSizing: \"border-box\",\n            cursor: \"pointer\"\n        });\n        wrapper.title = title;\n\n        /* --- top region (style applicator) --------------------------- */\n        const top = document.createElement(\"div\");\n        Object.assign(top.style, {\n            height: \"24px\",\n            background: id === \"none\" ? \"transparent\" : color,\n            backgroundImage: id === \"none\" ? 'url(\"/Images/None.png\")' : \"none\",\n            backgroundSize: \"16px 16px\",\n            backgroundPosition: \"center\",\n            backgroundRepeat: \"no-repeat\"\n        });\n\n        /* --- bottom region (show / hide toggle) ---------------------- */\n        const bottom = document.createElement(\"div\");\n        Object.assign(bottom.style, {\n            height: \"6px\",\n            background: style.enabled ? enabledColor : disabledColor,\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            // fontSize: \"8px\",\n            userSelect: \"none\"\n        });\n\n        /* click\u2011top: apply style */\n        top.addEventListener(\"click\", e => {\n            e.stopPropagation();\n            console.log(\"style id is \", id);\n            if (!treeSelection || treeSelection.length === 0) return;\n            const sel = treeSelection.at(-1);\n\n            const group = map.groups[sel.groupId];\n            if (!group) return;\n\n            const layer = group.layers[sel.layerId];\n            if (!layer) return;\n\n            if ([\"innerwall\", \"outerwall\"].includes(id)) {\n                lineIds.forEach(lineId => {\n                    const ln = layer.lines[lineId];\n                    if (ln) {\n                        ln.styleId = id;\n                    }\n                });\n                lineIds.length = 0;\n            } else if ([\"floor\", \"public\", \"private\"].includes(id)) {\n                updatePolygonsStyle(id) ;\n            }\n            else if (id === \"none\") {\n                lineIds.forEach(lineId => {\n                    const ln = layer.lines[lineId];\n                    if (ln) {\n                        ln.styleId = id;\n                    }\n                });\n                lineIds.length = 0;\n            }\n\n            buildMap();\n            refreshViewport();\n        });\n\n        /* click\u2011bottom: toggle visibility */\n        bottom.addEventListener(\"click\", e => {\n            e.stopPropagation();\n\n            /* toggle lines */\n            Object.entries(map.styles).forEach(([styleId, style]) => {\n                if (styleId === id) style.enabled = !style.enabled;\n            });\n\n            bottom.style.background = style.enabled ? enabledColor : disabledColor;\n            refreshViewport();\n        });\n\n        wrapper.appendChild(top);\n        wrapper.appendChild(bottom);\n        return wrapper;\n    }\n\n    // 3) Label + Wall buttons\n\n\n    toolbarDiv.appendChild(document.createTextNode(\"Wall:\"));\n    toolbarDiv.appendChild(makeBtn(\"innerwall\", \"Inner Wall\", innerWallColor));\n    toolbarDiv.appendChild(makeBtn(\"outerwall\", \"Outer Wall\", outerWallColor));\n    toolbarDiv.appendChild(makeBtn(\"none\", \"Clear Wall Style\", null));\n\n    // spacer between Wall and Surface groups\n    const groupSpacer = document.createElement(\"div\");\n    groupSpacer.style.width = \"16px\";\n    toolbarDiv.appendChild(groupSpacer);\n\n    // 4) Label + Surface buttons\n    toolbarDiv.appendChild(document.createTextNode(\"Surface:\"));\n    toolbarDiv.appendChild(makeBtn(\"floor\", \"Floor Surface Color\", floorColor));\n    toolbarDiv.appendChild(makeBtn(\"public\", \"Public Surface Color\", publicColor));\n    toolbarDiv.appendChild(makeBtn(\"private\", \"Private Surface Color\", privateColor));\n\n    return toolbarDiv;\n}\n\n\nexport function addNewLocation(pointId) {\n    const point = map.points[pointId];\n    if (!point || point.locationId) return;\n    const loc = new LocationModel();\n    loc.groupId = point.groupId;\n    loc.layerId = point.layerId;\n    loc.pointId = pointId;\n    loc.name = `Location Name`;\n    const newLocId = generateShortGuid();\n    point.locationId = newLocId;\n\n\n    const group = map.groups[point.groupId];\n    if (!group) return;\n    const layer = group.layers[point.layerId];\n    if (!layer) return;\n\n    layer.locationIds.push(newLocId);\n    map.locations[newLocId] = loc;\n    setLocationId(newLocId);\n}\n\n\nexport function updatePolygonsStyle(styleId) {\n    if (!treeSelection || treeSelection.length === 0) return;\n    const sel = treeSelection.at(-1);\n\n    const group = map.groups[sel.groupId];\n    if (!group) return;\n\n    const layer = group.layers[sel.layerId];\n    if (!layer) return;\n    polygonIds.forEach(pid => {\n        const poly = layer.polygons[pid];\n        if (poly) {\n            poly.styleId = styleId;\n        }\n    });\n    tryGeneratePolygon(lineIds, styleId);\n    polygonIds.length = 0;\n}", "import { buildMap, navigation } from \"./../draw.js\";\nimport { } from \"../navigation.js\";          // \u2B05\uFE0F corrected path\nimport {\n  dispatch,\n  setMousePos,\n  FSM_STATES,\n  FSM_EVENTS, setFSMState,\n  getCurrentState\n} from \"./state.js\";\nimport { clearSelection, setSelectionMode, lineIds, polygonIds, treeSelection } from \"./../selection.js\";\nimport { SelectionMode } from \"../models/models.js\";\nimport { tryGeneratePolygon } from \"../polygonGenerator.js\";\nimport { map } from \"../editor.js\";\nimport { updatePolygonsStyle } from \"./../UI/toolsMenu.js\";\n\n// import { shouldShortCircuit } from \"./control.js\";\n\nexport let canvasMain = null;\nexport let refreshViewport = null;\n\nexport function initEditing(_canvasMain, _updateCanvas) {\n  canvasMain = _canvasMain;\n  refreshViewport = _updateCanvas;\n\n  // Shared handler for both pointermove and pointerrawmove\n  function handlePointerMove(e) {\n    const dpr = window.devicePixelRatio || 1;\n    const rect = canvasMain.getBoundingClientRect();\n\n    // Screen \u2192 buffer pixels\n    const bx = (e.clientX - rect.left) * dpr;\n    const by = (e.clientY - rect.top) * dpr;\n\n    /* -------------------------------------------------------------\n       navigation pan (pan.x, pan.y) is already in *buffer* pixels\n       world = (buffer \u2212 pan) / scale\n    --------------------------------------------------------------*/\n    const transform = navigation.getTransform();\n\n    const worldX = (bx - transform.dx) / transform.scale;\n    const worldZ = (by - transform.dy) / transform.scale;\n\n    // snap & store (note: we use x,z only)\n    setMousePos({ x: worldX, z: worldZ },\n      { x: worldX, z: worldZ });\n\n    dispatch(FSM_EVENTS.POINTER_MOVE, e);\n    // redraw so snapping guides move in real time\n    refreshViewport();\n  }\n\n  canvasMain.addEventListener(\"dblclick\", (e) => {\n    dispatch(FSM_EVENTS.DOUBLE_CLICK, e);\n  });\n\n  canvasMain.addEventListener(\"pointerdown\", (e) => {\n    dispatch(FSM_EVENTS.POINTER_DOWN, e);\n  });\n\n\n  canvasMain.addEventListener(\"pointermove\", handlePointerMove);\n  canvasMain.addEventListener(\"pointerrawmove\", handlePointerMove);\n\n  canvasMain.addEventListener(\"pointerup\", (e) => {\n    dispatch(FSM_EVENTS.POINTER_UP, e);\n  });\n\n\n  window.addEventListener(\"keydown\", e => {\n\n\n    if (e.key === \"Escape\") {\n      clearSelection();\n      setFSMState(FSM_STATES.IDLE);\n    }\n    /*\n        const altKey= e.metaKey || e.altKey;\n    else if (altKey&& e.key === \"q\") {\n      setSelectionMode(SelectionMode.POINT);\n      setFSMState(FSM_STATES.IDLE);\n    }\n    else if (altKey&& e.key === \"w\") {\n      setSelectionMode(SelectionMode.LINE);\n\n      setFSMState(FSM_STATES.IDLE);\n    }\n    else if (altKey&& e.key === \"e\") {\n      setSelectionMode(SelectionMode.POLYGON);\n      setFSMState(FSM_STATES.IDLE);\n    }\n    else if (altKey&& e.key === \"z\") {\n      updatePolygonsStyle('floor');\n      buildMap();\n      refreshViewport();\n    }\n    else if (altKey&& e.key === \"x\") {\n      updatePolygonsStyle('public');\n      buildMap();\n      refreshViewport();\n    }\n    else if (altKey&& e.key === \"c\") {\n      updatePolygonsStyle('private');\n      buildMap();\n      refreshViewport();\n    }\n    else if (altKey&& e.key === \"v\") {\n      updatePolygonsStyle('green');\n      buildMap();\n      refreshViewport();\n    }\n    else if (altKey&& e.key === \"b\") {\n      updatePolygonsStyle('sand');\n      buildMap();\n      refreshViewport();\n    }\n    else if (altKey&& e.key === \"n\") {\n      updatePolygonsStyle('water');\n      buildMap();\n      refreshViewport();\n    }\n*/\n  });\n\n  canvasMain.addEventListener(\"contextmenu\", (e) => {\n    if (e.ctrlKey) {\n      e.preventDefault();\n    }\n  });\n\n\n  // Rectangle-selection animation overlay\n  // function animate() {\n  //   const rectSel = getRectSelectState();\n  //   if (rectSel.active) {\n  //     const octx = canvasOverlay.getContext(\"2d\");\n  //     octx.clearRect(0, 0, canvasOverlay.width, canvasOverlay.height);\n  //     const dpr = window.devicePixelRatio || 1;\n  //     octx.setTransform(dpr, 0, 0, dpr, 0, 0);\n  //     octx.strokeStyle = \"#00e069\";\n  //     octx.lineWidth = 1;\n  //     octx.setLineDash([4, 4]);\n  //     octx.strokeRect(\n  //       Math.min(rectSel.x0, rectSel.x1),\n  //       Math.min(rectSel.y0, rectSel.y1),\n  //       Math.abs(rectSel.x1 - rectSel.x0),\n  //       Math.abs(rectSel.y1 - rectSel.y0)\n  //     );\n  //     octx.setLineDash([]);\n  //   }\n  //   requestAnimationFrame(animate);\n  // }\n  // requestAnimationFrame(animate);\n}", "import { LineModel } from \"../models/models.js\";\n/** Deep-clone one line (keeps GUIDs & positions, omits associations for brevity) */\nexport function cloneBranch(br) {\n    if(!br)return;\n    const copy = new LineModel();\n    copy.styleId = br.styleId;\n    copy.pointIds = [...br.pointIds]\n    return copy;\n}\n\n", "\n\nimport { PointModel, LineModel, generateShortGuid } from '../models/models.js';   // assumes PointModel is already imported somewhere\nimport { Vec3 } from '../../shared/models.js';   // assumes PointModel is already imported somewhere\nimport { map } from '../editor.js';\nimport { buildMap, getSnapPointId } from '../draw.js';\nimport { cloneBranch } from './utils.js';\nimport { FSM_STATES, setFSMState } from './../editing/state.js';\nimport { forceEdgeSelection } from '../UI/toolsMenu.js';\nimport { clearSelectionUndoRedo, treeSelection } from '../selection.js';\n\n\n/**\n * Factory for an \"Add Door\" command.\n * Instead of inserting a single point, this will:\n *  \u2022 Insert two points at position1 and position2 on the same segment\n *  \u2022 Split the original line in two at those points\n *  \u2022 Create a new \"door\" line whose only endpoints are those two points\n *\n  * @param {object} splineTransform \u2013 { segmentIndex, x, z } telling which segment\n * @param {{ x:number, z:number }} position1 \u2013 world-coords for the first door point\n * @param {{ x:number, z:number }} position2 \u2013 world-coords for the second door point\n * @returns {{ do():void, undo():void }}\n */\nexport function addDoorCommand(splineTransform, position1, position2) {\n    // Store a snapshot of the original line point models for restoration on undo\n    let linesToDelete = [];\n    let affectedBranches = {};\n\n    return {\n        do() {\n            if (!position1 || !position2) return;\n            if (!treeSelection || treeSelection.length === 0) return;\n            const sel = treeSelection.at(-1);\n\n            const group = map.groups[sel.groupId];\n            if (!group) return;\n\n            const layer = group.layers[sel.layerId];\n            if (!layer) return;\n\n            const line = layer.lines[splineTransform.lineId];\n            if (!line) return;\n\n            affectedBranches[splineTransform.lineId] = cloneBranch(line);\n            //  linesToDelete.push(splineTransform.lineId);\n\n\n            // 2) Create Node A and Node B at the provided positions, with explicit IDs\n\n            let newPointIdB = getSnapPointId( position1 );\n            \n            if (!newPointIdB) {\n                const nodeB = new PointModel();\n                nodeB.groupId = sel.groupId;\n                nodeB.layerId = sel.layerId;\n                nodeB.position = new Vec3({ x: position1.x, y: 0, z: position1.z });\n                  newPointIdB = generateShortGuid();\n                map.points[newPointIdB] = nodeB;\n            }\n\n            const nodeCenter = new PointModel();\n            nodeCenter.groupId = sel.groupId;\n            nodeCenter.layerId = sel.layerId;\n            nodeCenter.position = new Vec3({ x: splineTransform.x, y: 0, z: splineTransform.z });\n\n            const newPointIdCenter = generateShortGuid();\n            map.points[newPointIdCenter] = nodeCenter;\n\n            let newPointIdA = getSnapPointId( position2 );\n            if (!newPointIdA) {\n                const nodeA = new PointModel();\n                nodeA.groupId = sel.groupId;\n                nodeA.layerId = sel.layerId;\n                nodeA.position = new Vec3({ x: position2.x, y: 0, z: position2.z });\n                newPointIdA = generateShortGuid();\n                map.points[newPointIdA] = nodeA;\n            }\n\n            // 3) Insert both points into line.points at the correct indices.\n            const i = splineTransform.segmentIndex + 1;\n            line.pointIds.splice(i, 0, newPointIdA, newPointIdB);\n\n            // 4) Split into raw halves (arrays of PointModel)\n            const rawFirstNodeIds = line.pointIds.slice(0, i + 1);\n            const rawSecondNodeIds = line.pointIds.slice(i + 1);\n\n            // 5) Build the first half: keep the original PointModel instances so their\n            //    associatedLines arrays (and any external references) remain intact.\n            line.pointIds = rawFirstNodeIds.slice();\n\n\n            // Make sure every point in the first-half line knows about this line\n\n            // 6) Create line for secondHalf with existing points (if \u2265 2)\n            if (rawSecondNodeIds.length >= 2) {\n                const newBranch = new LineModel();\n                newBranch.styleId = line.styleId;\n                const secondHalfBranchKey = generateShortGuid();\n\n                // Use the existing PointModel instances for the second half (includes nodeB)\n                newBranch.pointIds = rawSecondNodeIds.slice();\n                layer.lines[secondHalfBranchKey] = newBranch;\n\n                linesToDelete.push(secondHalfBranchKey);\n            }\n\n            // 7) Create the \"door\" line that connects nodeA \u2194 nodeB\n            const doorBranch = new LineModel();\n            doorBranch.styleId = 'none';\n\n            const doorBranchKey = generateShortGuid();\n\n            doorBranch.isDoor = true;\n            doorBranch.pointIds = [newPointIdA, newPointIdCenter, newPointIdB];\n            layer.lines[doorBranchKey] = doorBranch;\n\n            linesToDelete.push(doorBranchKey);\n\n\n            // 8) Select the new door points so UI can show them\n            // setPointId(nodeA);\n            // setPointId(nodeB);\n\n            // 9) Re-run any spatial processing (e.g. polygon extraction)\n         //   purgeBrokenPolygonsOnLayer(layer);//remove broken plolygons affected by the door adding, the issue is that access point are not added to the polygon if door added after polygon, this is why polygon is dismissed forcing used to create a new one.\n\n            buildMap();\n\n            clearSelectionUndoRedo();\n            forceEdgeSelection();\n            setFSMState(FSM_STATES.IDLE);\n\n        },\n\n        undo() {\n            // 1) Remove door line entirely\n            if (!treeSelection || treeSelection.length === 0) return;\n            const sel = treeSelection.at(-1);\n\n            const group = map.groups[sel.groupId];\n            if (!group) return;\n\n            const layer = group.layers[sel.layerId];\n            if (!layer) return;\n\n            Object.entries(affectedBranches).forEach(([gId, line]) => {\n                layer.lines[gId] = line;\n            });\n\n            linesToDelete.forEach(lineId => {\n                delete layer.lines[lineId];\n            })\n\n            buildMap();\n\n            clearSelectionUndoRedo();\n            setFSMState(FSM_STATES.IDLE);\n\n        },\n\n        redo() {\n            //  clearSelectionUndoRedo();\n            this.do();\n        }\n    };\n}\n\n\n\n\n/**\n * Build an adjacency map of point\u2011id \u2192 Set<neighbour\u2011id>\n * from layer.lines.  O(E) where E = total segments.\n */\nfunction buildNeighboursMap(branchesMap = {}) {\n    const neighbours = new Map();\n    for (const line of Object.values(branchesMap)) {\n        const pts = line?.pointIds;\n        if (!Array.isArray(pts) || pts.length < 2) continue;\n        for (let i = 0; i < pts.length - 1; i++) {\n            const a = pts[i], b = pts[i + 1];\n            if (!neighbours.has(a)) neighbours.set(a, new Set());\n            if (!neighbours.has(b)) neighbours.set(b, new Set());\n            neighbours.get(a).add(b);\n            neighbours.get(b).add(a);\n        }\n    }\n    return neighbours;\n}\n\n/**\n * Validate that a PolygonModel\u2019s point sequence still forms a closed ring.\n * A ring is valid when:\n *   \u2022 At least three unique vertices\n *   \u2022 First and last id are identical (explicit closure)\n *   \u2022 Every consecutive pair of ids is connected by a segment\n *     present in `branchesMap` (layer.lines).\n *\n * @param {PolygonModel} polygon\n * @param {object} branchesMap   Map of lineId \u2192 { pointIds:[\u2026] }\n * @param {Map|null} neighbourMap Optional precomputed adjacency map\n * @returns {boolean}\n */\nexport function polygonFormsClosedRing(\n    polygon,\n    branchesMap = {},\n    neighbourMap = null\n) {\n    const ids = polygon?.pointIds;\n    if (!Array.isArray(ids) || ids.length < 4) return false;   // need 3+ distinct + repeat\n\n    // 1\uFE0F\u20E3 explicit closure\n    if (ids[0] !== ids[ids.length - 1]) return false;\n\n    // 2\uFE0F\u20E3 no duplicate vertices inside (besides closure)\n    const innerIds = ids.slice(0, -1);\n    const unique = new Set(innerIds);\n    if (unique.size !== innerIds.length) return false;\n\n    // 3\uFE0F\u20E3 adjacency check\n    const neighbours = neighbourMap ?? buildNeighboursMap(branchesMap);\n    for (let i = 0; i < ids.length - 1; i++) {\n        const a = ids[i], b = ids[i + 1];\n        if (!(neighbours.get(a)?.has(b))) return false;\n    }\n    return true;\n}\n\n\n\n\n// Helper for cleaning up broken polygons\n/**\n * Remove polygons from layer.polygons that do not form valid closed rings.\n * @param {object} layer\n * @returns {string[]} removed polygon IDs\n */\nexport function purgeBrokenPolygonsOnLayer(layer) {\n    const removed = [];\n    const branchesMap = layer.lines ?? {};\n    const neigh = buildNeighboursMap(branchesMap);\n\n    for (const [polyId, polygon] of Object.entries(layer.polygons)) {\n        if (!polygonFormsClosedRing(polygon, branchesMap, neigh)) {\n            delete layer.polygons[polyId];\n            removed.push(polyId);\n        }\n    }\n    return removed;\n}\n\n", "import { Vec3 } from '../../shared/models.js';\nimport { PointModel, LineModel, generateShortGuid } from '../models/models.js';\nimport { map } from '../editor.js';\nimport { lineIds, pointIds, setPointId, setLineId, treeSelection } from '../selection.js';\nimport { refreshViewport, buildMap, getSnapPointId } from \"../draw.js\";\nimport { mousePos } from \"../editing/state.js\";\nimport { cloneBranch } from './utils.js';\nimport { FSM_STATES, setFSMState } from './../editing/state.js';\n\n// Constants for better maintainability\nconst EPSILON = 1e-6;\nconst SNAP_TOLERANCE_MULTIPLIER = 1.0;\n\n/**\n * Configuration object for geometric operations\n */\nconst CONFIG = {\n    EPSILON,\n    SNAP_TOLERANCE_MULTIPLIER,\n    DEFAULT_Y_COORDINATE: 0\n};\n\n/**\n * Utility functions for geometric operations\n */\nconst GeometryUtils = {\n    /**\n     * Compare two floating point numbers with epsilon tolerance\n     * @param {number} a - First number\n     * @param {number} b - Second number  \n     * @param {number} eps - Epsilon tolerance\n     * @returns {boolean} True if numbers are equal within tolerance\n     */\n    floatEquals(a, b, eps = CONFIG.EPSILON) {\n        return Math.abs(a - b) < eps;\n    },\n\n    /**\n     * Check if value is in the middle range (not at endpoints)\n     * @param {number} value - Value to check\n     * @param {number} eps - Epsilon tolerance\n     * @returns {boolean} True if value is in middle range\n     */\n    isInMiddleRange(value, eps = CONFIG.EPSILON) {\n        return value > eps && value < (1 - eps);\n    },\n\n    /**\n     * Validate array index bounds\n     * @param {Array} array - Array to check\n     * @param {number} index - Index to validate\n     * @returns {boolean} True if index is valid\n     */\n    isValidIndex(array, index) {\n        return Array.isArray(array) && index >= 0 && index < array.length;\n    },\n\n    /**\n     * Calculate distance between two points\n     * @param {Object} p1 - First point {x, z}\n     * @param {Object} p2 - Second point {x, z}\n     * @returns {number} Distance between points\n     */\n    distance(p1, p2) {\n        return Math.hypot(p2.x - p1.x, p2.z - p1.z);\n    },\n\n    /**\n     * Check if two bounding boxes overlap\n     * @param {Object} box1 - First bounding box {minX, maxX, minZ, maxZ}\n     * @param {Object} box2 - Second bounding box {minX, maxX, minZ, maxZ}\n     * @returns {boolean} True if boxes overlap\n     */\n    boundingBoxesOverlap(box1, box2) {\n        return !(box1.maxX < box2.minX || box2.maxX < box1.minX ||\n                box1.maxZ < box2.minZ || box2.maxZ < box1.minZ);\n    }\n};\n\n// Holds a reference to the command's delete-list while `do()` is running\nlet currentLinesToDeleteRef = null;\n\n/**\n * Error handling utilities\n */\nconst ErrorHandler = {\n    /**\n     * Log warning with context\n     * @param {string} message - Warning message\n     * @param {Object} context - Additional context\n     */\n    warn(message, context = {}) {\n        console.warn(`[GeometryEditor] ${message}`, context);\n    },\n\n    /**\n     * Log error with context\n     * @param {string} message - Error message\n     * @param {Error} error - Error object\n     * @param {Object} context - Additional context\n     */\n    error(message, error, context = {}) {\n        console.error(`[GeometryEditor] ${message}`, error, context);\n    },\n\n    /**\n     * Safe execution wrapper\n     * @param {Function} fn - Function to execute\n     * @param {string} operation - Operation name for logging\n     * @param {*} fallback - Fallback value on error\n     * @returns {*} Function result or fallback\n     */\n    safeExecute(fn, operation, fallback = null) {\n        try {\n            return fn();\n        } catch (error) {\n            this.error(`Failed to execute ${operation}`, error);\n            return fallback;\n        }\n    }\n};\n\n/**\n * Point management utilities\n */\nconst PointManager = {\n    /**\n     * Create a new point with proper initialization\n     * @param {Object} position - Point position {x, y, z}\n     * @param {string} groupId - Group ID\n     * @param {string} layerId - Layer ID\n     * @returns {Object} Created point with ID\n     */\n    createPoint(position, groupId, layerId) {\n        const point = new PointModel();\n        point.groupId = groupId;\n        point.layerId = layerId;\n        point.position = new Vec3(position);\n        point.associatedLines = [];\n\n        const pointId = generateShortGuid();\n        map.points[pointId] = point;\n\n        return { point, pointId };\n    },\n\n    /**\n     * Add line association to point\n     * @param {string} pointId - Point ID\n     * @param {string} lineId - Line ID\n     */\n    addLineToPoint(pointId, lineId) {\n        const point = map.points[pointId];\n        if (!point) {\n            ErrorHandler.warn('Point not found for line association', { pointId, lineId });\n            return;\n        }\n\n        if (!Array.isArray(point.associatedLines)) {\n            point.associatedLines = [];\n        }\n\n        if (!point.associatedLines.includes(lineId)) {\n            point.associatedLines.push(lineId);\n        }\n    },\n\n    /**\n     * Remove line association from point\n     * @param {string} pointId - Point ID\n     * @param {string} lineId - Line ID\n     */\n    removeLineFromPoint(pointId, lineId) {\n        const point = map.points[pointId];\n        if (!point || !Array.isArray(point.associatedLines)) return;\n\n        point.associatedLines = point.associatedLines.filter(id => id !== lineId);\n    },\n\n    /**\n     * Get point by ID with validation\n     * @param {string} pointId - Point ID\n     * @returns {Object|null} Point object or null\n     */\n    getPoint(pointId) {\n        const point = map.points[pointId];\n        if (!point) {\n            ErrorHandler.warn('Point not found', { pointId });\n            return null;\n        }\n        return point;\n    }\n};\n\n/**\n * Line management utilities\n */\nconst LineManager = {\n    /**\n     * Create a new line with proper initialization\n     * @param {string} groupId - Group ID\n     * @param {string} layerId - Layer ID\n     * @param {string} styleId - Style ID (optional)\n     * @returns {Object} Created line with ID\n     */\n    createLine(groupId, layerId, styleId = null) {\n        const line = new LineModel(styleId);\n        if (styleId) {\n            line.styleId = styleId;\n        }\n\n        const lineId = generateShortGuid();\n        const context = SelectionManager.getSelectionContext();\n        if (context && context.layer) {\n            context.layer.lines[lineId] = line;\n        }\n\n        return { line, lineId };\n    },\n\n    /**\n     * Safe branch cloning with error handling\n     * @param {string} lineId - Line ID to clone\n     * @param {Object} layer - Layer object\n     * @returns {Object|null} Cloned branch or null\n     */\n    safeBranchClone(lineId, layer) {\n        return ErrorHandler.safeExecute(() => {\n            if (layer.lines[lineId]) {\n                return cloneBranch(layer.lines[lineId]);\n            }\n            return null;\n        }, 'branch cloning');\n    },\n\n    /**\n     * Get line by ID with validation\n     * @param {string} lineId - Line ID\n     * @param {Object} layer - Layer object\n     * @returns {Object|null} Line object or null\n     */\n    getLine(lineId, layer) {\n        const line = layer.lines[lineId];\n        if (!line) {\n            ErrorHandler.warn('Line not found', { lineId });\n            return null;\n        }\n        return line;\n    }\n};\n\n/**\n * Selection management utilities\n */\nconst SelectionManager = {\n    /**\n     * Get current selection context with validation\n     * @returns {Object|null} Selection context or null\n     */\n    getSelectionContext() {\n        if (!treeSelection || treeSelection.length === 0) {\n            ErrorHandler.warn('No selection context available');\n            return null;\n        }\n\n        const selection = treeSelection.at(-1);\n        const group = map.groups[selection.groupId];\n        if (!group) {\n            ErrorHandler.warn('Group not found in selection', { groupId: selection.groupId });\n            return null;\n        }\n\n        const layer = group.layers[selection.layerId];\n        if (!layer) {\n            ErrorHandler.warn('Layer not found in selection', { layerId: selection.layerId });\n            return null;\n        }\n\n        return { selection, group, layer };\n    },\n\n    /**\n     * Update point selection\n     * @param {string} newPointId - New point ID to select\n     */\n    updateSelection(newPointId) {\n        pointIds.length = 0;\n        setPointId(newPointId);\n    },\n\n    /**\n     * Check if a point is currently selected\n     * @returns {boolean} True if point is selected\n     */\n    hasPointSelection() {\n        return pointIds && pointIds.length === 1;\n    },\n\n    /**\n     * Get selected point ID\n     * @returns {string|null} Selected point ID or null\n     */\n    getSelectedPointId() {\n        return this.hasPointSelection() ? pointIds[0] : null;\n    }\n};\n\n/**\n * Intersection handling utilities\n */\nconst IntersectionHandler = {\n    /**\n     * Process a single intersection hit\n     * @param {Object} context - Selection context\n     * @param {string} newPointId - New point ID\n     * @param {Object} hit - Intersection hit data\n     * @param {Array} linesToDelete - Array to track lines for deletion\n     */\n    processSingleHit(context, newPointId, hit, linesToDelete) {\n        return ErrorHandler.safeExecute(() => {\n            if (!hit || !hit.lineId || !newPointId) {\n                ErrorHandler.warn('Invalid parameters for intersection processing');\n                return;\n            }\n\n            const line = LineManager.getLine(hit.lineId, context.layer);\n            if (!line || !GeometryUtils.isValidIndex(line.pointIds, hit.segmentIndex)) {\n                ErrorHandler.warn('Invalid line or segment index', { lineId: hit.lineId, segmentIndex: hit.segmentIndex });\n                return;\n            }\n\n            // Handle intersection based on position\n            if (GeometryUtils.floatEquals(hit.t, 0) || GeometryUtils.floatEquals(hit.t, 1)) {\n                // At segment endpoints - connect to existing point\n                console.log('Intersection at segment endpoint');\n                this.breakBranchAtNode(newPointId);\n            } else if (GeometryUtils.isInMiddleRange(hit.t)) {\n                // In middle of segment - split the line\n                console.log('Intersection in middle of segment');\n                const segmentIndex = hit.segmentIndex;\n                line.pointIds.splice(segmentIndex + 1, 0, newPointId);\n                this.breakBranchAtNode(newPointId);\n            }\n\n            if (!linesToDelete.includes(hit.lineId)) {\n                linesToDelete.push(hit.lineId);\n            }\n        }, 'single hit processing');\n    },\n\n    /**\n     * Process multiple intersection hits\n     * @param {Object} context - Selection context\n     * @param {Object} mainBranch - Main branch object\n     * @param {Array} hits - Array of intersection hits\n     * @param {Array} linesToDelete - Array to track lines for deletion\n     */\n    processMultipleHits(context, mainBranch, hits, linesToDelete) {\n        return ErrorHandler.safeExecute(() => {\n            if (!Array.isArray(hits) || !Array.isArray(linesToDelete)) {\n                ErrorHandler.warn('Invalid parameters for multiple hits processing');\n                return;\n            }\n\n            hits.forEach(hit => {\n                if (hit && hit.lineId) {\n                    this.processSingleHit(context, hit.newPointId, hit, linesToDelete);\n                }\n            });\n        }, 'multiple hits processing');\n    },\n\n    /**\n     * Break branch at intersection node\n     * @param {string} pointId - Point ID where to break\n     */\n    breakBranchAtNode(pointId) {\n        const point = PointManager.getPoint(pointId);\n        if (!point || !Array.isArray(point.associatedLines)) return;\n\n        const group = map.groups[point.groupId];\n        if (!group) return;\n\n        const layer = group.layers[point.layerId];\n        if (!layer) return;\n\n        // Copy array to avoid modification during iteration\n        const lineIds = [...point.associatedLines];\n\n        lineIds.forEach(initialLineId => {\n            const line = layer.lines[initialLineId];\n            if (!line) return;\n\n            const pointIndex = line.pointIds.indexOf(pointId);\n            if (pointIndex <= 0 || pointIndex >= line.pointIds.length - 1) return; // Skip endpoints\n\n            // Create new line (inherit style)\n            const newLineId = generateShortGuid();\n            const newLine = new LineModel(line.styleId);\n            newLine.styleId = line.styleId;\n            layer.lines[newLineId] = newLine;\n\n\n               // \uD83D\uDC49 Tell the caller\u2019s undo logic to delete this line later\n   if (currentLinesToDeleteRef && !currentLinesToDeleteRef.includes(newLineId)) {\n       currentLinesToDeleteRef.push(newLineId);\n   }\n\n            // Split the point arrays\n            const leftPoints = line.pointIds.slice(0, pointIndex + 1); // includes split point\n            const rightPoints = line.pointIds.slice(pointIndex);        // includes split point\n\n            line.pointIds = leftPoints;\n            newLine.pointIds = rightPoints;\n\n\n            // Update associations for points in right segment\n            rightPoints.forEach(pId => {\n                const pt = PointManager.getPoint(pId);\n                if (!pt) return;\n\n                // Remove old association (except for split point)\n                if (pId !== pointId) {\n                    PointManager.removeLineFromPoint(pId, initialLineId);\n                }\n\n                // Add new association\n                PointManager.addLineToPoint(pId, newLineId);\n            });\n\n            // Ensure split point references both halves\n            PointManager.addLineToPoint(pointId, newLineId);\n        });\n    }\n};\n\n/**\n * Geometric calculation utilities\n */\nconst GeometricCalculator = {\n    /**\n     * Find if point lies on any line segment\n     * @param {Object} point - Point to test {x, z}\n     * @param {number} eps - Epsilon tolerance\n     * @returns {Object|null} Hit information or null\n     */\n    findPointOnAnySegment(point, eps = CONFIG.EPSILON) {\n        if (!point || !treeSelection) {\n            ErrorHandler.warn('Invalid parameters for point-on-segment test');\n            return null;\n        }\n\n        const { x: pointX, z: pointZ } = point;\n\n        return ErrorHandler.safeExecute(() => {\n            for (const selection of treeSelection) {\n                const group = map.groups[selection.groupId];\n                if (!group) continue;\n\n                const layer = group.layers[selection.layerId];\n                if (!layer) continue;\n\n                for (const [lineId, line] of Object.entries(layer.lines)) {\n                    if (!line || !line.pointIds) continue;\n\n                    const points = line.pointIds.map(pid => PointManager.getPoint(pid)).filter(Boolean);\n                    if (points.length < 2) continue;\n\n                    for (let i = 0; i < points.length - 1; i++) {\n                        const segmentHit = this.testPointOnSegment(\n                            { x: pointX, z: pointZ },\n                            points[i].position,\n                            points[i + 1].position,\n                            eps\n                        );\n\n                        if (segmentHit) {\n                            return {\n                                lineId,\n                                segmentIndex: i,\n                                t: segmentHit.t,\n                                x: pointX,\n                                z: pointZ\n                            };\n                        }\n                    }\n                }\n            }\n            return null;\n        }, 'point-on-segment calculation');\n    },\n\n    /**\n     * Test if point lies on a specific line segment\n     * @param {Object} testPoint - Point to test {x, z}\n     * @param {Object} segmentStart - Segment start point\n     * @param {Object} segmentEnd - Segment end point\n     * @param {number} eps - Epsilon tolerance\n     * @returns {Object|null} Hit information or null\n     */\n    testPointOnSegment(testPoint, segmentStart, segmentEnd, eps) {\n        const { x: px, z: pz } = testPoint;\n        const { x: sx, z: sz } = segmentStart;\n        const { x: ex, z: ez } = segmentEnd;\n\n        // Bounding box quick reject\n        const minX = Math.min(sx, ex) - eps;\n        const maxX = Math.max(sx, ex) + eps;\n        const minZ = Math.min(sz, ez) - eps;\n        const maxZ = Math.max(sz, ez) + eps;\n\n        if (px < minX || px > maxX || pz < minZ || pz > maxZ) {\n            return null;\n        }\n\n        // Distance test\n        const segmentDx = ex - sx;\n        const segmentDz = ez - sz;\n        const pointDx = px - sx;\n        const pointDz = pz - sz;\n\n        const cross = Math.abs(segmentDx * pointDz - segmentDz * pointDx);\n        const segmentLength = Math.hypot(segmentDx, segmentDz);\n\n        if (segmentLength < eps) return null; // Degenerate segment\n\n        if (cross / segmentLength <= eps) {\n            // Compute parameter t\n            const dot = pointDx * segmentDx + pointDz * segmentDz;\n            const t = dot / (segmentLength * segmentLength);\n            const clampedT = Math.max(0, Math.min(1, t));\n\n            return { t: clampedT };\n        }\n\n        return null;\n    },\n\n    /**\n     * Find intersections between a line segment and existing geometry\n     * @param {string} excludeLineId - Line ID to exclude from search\n     * @param {Object} startPoint - Segment start point {x, z}\n     * @param {Object} endPoint - Segment end point {x, z}\n     * @returns {Array} Array of intersection objects\n     */\n    findIntersections(excludeLineId, startPoint, endPoint) {\n        if (!startPoint || !endPoint || !treeSelection) {\n            ErrorHandler.warn('Invalid parameters for intersection calculation');\n            return [];\n        }\n\n        const intersections = [];\n        const segmentDx = endPoint.x - startPoint.x;\n        const segmentDz = endPoint.z - startPoint.z;\n\n        return ErrorHandler.safeExecute(() => {\n            treeSelection.forEach(selection => {\n                const group = map.groups[selection.groupId];\n                if (!group) return;\n\n                const layer = group.layers[selection.layerId];\n                if (!layer) return;\n\n                Object.entries(layer.lines).forEach(([lineId, line]) => {\n                    if (lineId === excludeLineId || !line || !line.pointIds) return;\n\n                    const points = line.pointIds.map(pid => PointManager.getPoint(pid)).filter(Boolean);\n                    if (points.length < 2) return;\n\n                    for (let i = 0; i < points.length - 1; i++) {\n                        const intersection = this.calculateSegmentIntersection(\n                            startPoint, endPoint,\n                            points[i].position, points[i + 1].position\n                        );\n\n                        if (intersection) {\n                            intersections.push({\n                                lineId,\n                                x: intersection.x,\n                                z: intersection.z,\n                                segmentIndex: i,\n                                t: intersection.t,\n                                u: intersection.u\n                            });\n                        }\n                    }\n                });\n            });\n\n            return intersections;\n        }, 'intersection calculation', []);\n    },\n\n    /**\n     * Calculate intersection between two line segments\n     * @param {Object} seg1Start - First segment start point\n     * @param {Object} seg1End - First segment end point\n     * @param {Object} seg2Start - Second segment start point\n     * @param {Object} seg2End - Second segment end point\n     * @returns {Object|null} Intersection data or null\n     */\n    calculateSegmentIntersection(seg1Start, seg1End, seg2Start, seg2End) {\n        const dx1 = seg1End.x - seg1Start.x;\n        const dz1 = seg1End.z - seg1Start.z;\n        const dx2 = seg2End.x - seg2Start.x;\n        const dz2 = seg2End.z - seg2Start.z;\n\n        // Fast bounding box overlap test\n        const box1 = {\n            minX: Math.min(seg1Start.x, seg1End.x),\n            maxX: Math.max(seg1Start.x, seg1End.x),\n            minZ: Math.min(seg1Start.z, seg1End.z),\n            maxZ: Math.max(seg1Start.z, seg1End.z)\n        };\n\n        const box2 = {\n            minX: Math.min(seg2Start.x, seg2End.x),\n            maxX: Math.max(seg2Start.x, seg2End.x),\n            minZ: Math.min(seg2Start.z, seg2End.z),\n            maxZ: Math.max(seg2Start.z, seg2End.z)\n        };\n\n        if (!GeometryUtils.boundingBoxesOverlap(box1, box2)) {\n            return null;\n        }\n\n        // Calculate intersection\n        const denominator = dx1 * (-dz2) - dz1 * (-dx2);\n        if (Math.abs(denominator) < CONFIG.EPSILON) return null; // Parallel lines\n\n        const startDx = seg2Start.x - seg1Start.x;\n        const startDz = seg2Start.z - seg1Start.z;\n        const t = (startDx * -dz2 - startDz * -dx2) / denominator;\n        const u = (dx1 * startDz - dz1 * startDx) / denominator;\n\n        // Check if intersection is within both segments\n        if (t >= 0 && t <= 1 && u >= 0 && u <= 1) {\n            const x = seg1Start.x + t * dx1;\n            const z = seg1Start.z + t * dz1;\n\n            return { x, z, t, u };\n        }\n\n        return null;\n    }\n};\n\n/**\n * Command execution strategies\n */\nconst CommandStrategies = {\n    /**\n     * Handle case when a point is selected\n     * @param {Object} context - Selection context\n     * @param {string} selectedPointId - Selected point ID\n     * @param {Object} newPoint - New point data\n     * @param {string} newPointId - New point ID\n     * @param {Array} linesToDelete - Lines to delete array\n     * @param {Object} affectedBranches - Affected branches object\n     * @param {Array} createdPoints - Created points array\n     */\n    handlePointSelection(context, selectedPointId, newPoint, newPointId, linesToDelete, affectedBranches, createdPoints) {\n        const selectedNode = PointManager.getPoint(selectedPointId);\n        if (!selectedNode || !selectedNode.associatedLines || selectedNode.associatedLines.length === 0) {\n            ErrorHandler.warn('Selected point has no associated lines');\n            return;\n        }\n\n        const lineId = selectedNode.associatedLines[0];\n        const targetLine = LineManager.getLine(lineId, context.layer);\n        if (!targetLine) {\n            ErrorHandler.warn('Target line not found', { lineId });\n            return;\n        }\n\n        // Clone branch for undo functionality\n        if (!affectedBranches[lineId]) {\n            affectedBranches[lineId] = LineManager.safeBranchClone(lineId, context.layer);\n        }\n\n        if (selectedNode.associatedLines.length === 1) {\n            this.handleNonSharedPoint(context, selectedPointId, selectedNode, newPoint, newPointId, \n                                    lineId, targetLine, linesToDelete, affectedBranches, createdPoints);\n        } else {\n            this.handleSharedPoint(context, selectedPointId, selectedNode, newPoint, newPointId, \n                                 linesToDelete, affectedBranches, createdPoints);\n        }\n    },\n\n    /**\n     * Handle non-shared point selection\n     */\n    handleNonSharedPoint(context, selectedPointId, selectedNode, newPoint, newPointId, \n                        lineId, targetLine, linesToDelete, affectedBranches, createdPoints) {\n        console.log(\"Selected point is not shared \u2013 creating fresh 2-point line\");\n\n        // Create new line\n        const { line: newLine, lineId: newLineId } = LineManager.createLine(\n            context.selection.groupId, context.selection.layerId\n        );\n\n        newLine.pointIds.push(selectedPointId, newPointId);\n        PointManager.addLineToPoint(selectedPointId, newLineId);\n        PointManager.addLineToPoint(newPointId, newLineId);\n\n        // Check for endpoint intersections\n        this.handleEndpointIntersection(newPoint.position, newPointId, newLineId, context, affectedBranches, linesToDelete);\n\n        // Track for undo\n        setLineId(newLineId);\n        linesToDelete.push(newLineId);\n\n        // Clean up single-point line\n        if (targetLine.pointIds.length === 1) {\n            this.cleanupSinglePointLine(lineId, selectedNode, context, linesToDelete);\n        }\n\n        // Handle segment intersections\n        this.handleSegmentIntersections(selectedNode.position, newPoint.position, newLineId, \n                                      newLine, context, affectedBranches, linesToDelete, createdPoints);\n    },\n\n    /**\n     * Handle shared point selection\n     */\n    handleSharedPoint(context, selectedPointId, selectedNode, newPoint, newPointId, \n                     linesToDelete, affectedBranches, createdPoints) {\n        console.log(\"Selected point is shared\");\n\n        // Create new line\n        const { line: newLine, lineId: newLineId } = LineManager.createLine(\n            context.selection.groupId, context.selection.layerId\n        );\n\n        newLine.pointIds.push(selectedPointId, newPointId);\n        PointManager.addLineToPoint(selectedPointId, newLineId);\n        PointManager.addLineToPoint(newPointId, newLineId);\n\n        // Check for endpoint intersections\n        this.handleEndpointIntersection(newPoint.position, newPointId, newLineId, context, affectedBranches, linesToDelete);\n\n        setLineId(newLineId);\n        linesToDelete.push(newLineId);\n\n        // Handle segment intersections\n        this.handleSegmentIntersections(selectedNode.position, newPoint.position, newLineId, \n                                      newLine, context, affectedBranches, linesToDelete, createdPoints);\n    },\n\n    /**\n     * Handle case when no point is selected\n     */\n    handleNoSelection(context, newPoint, newPointId, linesToDelete, affectedBranches) {\n        console.log(\"No point selected\");\n\n        const hit = GeometricCalculator.findPointOnAnySegment(newPoint.position);\n\n        if (hit) {\n            console.log(\"Point intersects existing line\");\n            const affectedBranch = LineManager.getLine(hit.lineId, context.layer);\n            if (!linesToDelete.includes(hit.lineId) && !affectedBranches[hit.lineId]) {\n                affectedBranches[hit.lineId] = LineManager.safeBranchClone(hit.lineId, context.layer);\n            }\n            IntersectionHandler.processSingleHit(context, newPointId, hit, linesToDelete);\n        } else {\n            console.log(\"No intersection - creating new line\");\n            const { line, lineId: newBranchId } = LineManager.createLine(\n                context.selection.groupId, context.selection.layerId\n            );\n            setLineId(newBranchId);\n\n            linesToDelete.push(newBranchId);\n            line.pointIds.push(newPointId);\n            PointManager.addLineToPoint(newPointId, newBranchId);\n        }\n    },\n\n    /**\n     * Handle endpoint intersections\n     */\n    handleEndpointIntersection(position, pointId, lineId, context, affectedBranches, linesToDelete) {\n        const endpointHit = GeometricCalculator.findPointOnAnySegment(position);\n        if (endpointHit && endpointHit.lineId !== lineId) {\n            endpointHit.newPointId = pointId;\n            PointManager.addLineToPoint(pointId, endpointHit.lineId);\n\n            if (!linesToDelete.includes(endpointHit.lineId) && !affectedBranches[endpointHit.lineId]) {\n                affectedBranches[endpointHit.lineId] = LineManager.safeBranchClone(endpointHit.lineId, context.layer);\n            }\n            IntersectionHandler.processSingleHit(context, pointId, endpointHit, linesToDelete);\n        }\n    },\n\n    /**\n     * Handle segment intersections\n     */\n    handleSegmentIntersections(startPos, endPos, lineId, line, context, affectedBranches, linesToDelete, createdPoints) {\n        const hits = GeometricCalculator.findIntersections(\n            lineId,\n            { x: startPos.x, z: startPos.z },\n            { x: endPos.x, z: endPos.z }\n        ).sort((a, b) => a.t - b.t);\n\n        // Process intersections on the new line\n        let insertOffset = 1;\n        hits.forEach(hit => {\n            if (!GeometryUtils.isInMiddleRange(hit.t)) {\n                // Endpoint intersection - use existing point\n                hit.newPointId = GeometryUtils.floatEquals(hit.t, 0) ? \n                    line.pointIds[0] : line.pointIds[line.pointIds.length - 1];\n                return;\n            }\n\n            // Middle intersection - create new point\n            const { point: intersectionPoint, pointId: intersectionId } = PointManager.createPoint(\n                { x: hit.x, y: CONFIG.DEFAULT_Y_COORDINATE, z: hit.z },\n                context.selection.groupId,\n                context.selection.layerId\n            );\n\n            createdPoints.push(intersectionId);\n            PointManager.addLineToPoint(intersectionId, lineId);\n            PointManager.addLineToPoint(intersectionId, hit.lineId);\n\n            hit.newPointId = intersectionId;\n            line.pointIds.splice(insertOffset, 0, intersectionId);\n            insertOffset += 1;\n        });\n\n        // Update affected branches\n        hits.forEach(hit => {\n            if (!linesToDelete.includes(hit.lineId) && !affectedBranches[hit.lineId]) {\n                affectedBranches[hit.lineId] = LineManager.safeBranchClone(hit.lineId, context.layer);\n            }\n        });\n\n        // Process intersections on existing lines\n        hits.forEach(hit => { hit.t = hit.u; }); // Re-base parameter\n        IntersectionHandler.processMultipleHits(context, line, hits, linesToDelete);\n    },\n\n    /**\n     * Clean up single-point line\n     */\n    cleanupSinglePointLine(lineId, selectedNode, context, linesToDelete) {\n        if (!linesToDelete.includes(lineId)) {\n            linesToDelete.push(lineId);\n        }\n        if (context.layer.lines[lineId]) {\n            delete context.layer.lines[lineId];\n        }\n        selectedNode.associatedLines = selectedNode.associatedLines.filter(id => id !== lineId);\n    }\n};\n\n/**\n * Main command factory function\n * @returns {Object} Command object with do() and undo() methods\n */\nexport function addCommand() {\n    let linesToDelete = [];\n    let affectedBranches = {};\n    let createdPoints = [];\n\n    return {\n        /**\n         * Execute the add command\n         */\n        \n        do() {\n            return ErrorHandler.safeExecute(() => {\n                // Reset state\n\n                linesToDelete.length = 0;\n                affectedBranches = {};\n                createdPoints.length = 0;\n currentLinesToDeleteRef = linesToDelete;   // make it globally reachable\n\n\n                const context = SelectionManager.getSelectionContext();\n                if (!context) {\n                    ErrorHandler.warn('No valid selection context');\n                    return;\n                }\n\n                // Calculate snap tolerance\n                const snapTolerance = Math.abs(map.settings.gridSize) > 0 ?\n                    Math.abs(map.settings.gridSize) * CONFIG.SNAP_TOLERANCE_MULTIPLIER : 1;\n\n                // Get or create point\n                const snapPointId = getSnapPointId(mousePos);\n                let point, newPointId;\n\n                if (!snapPointId) {\n                    console.log('Creating new point');\n                    const result = PointManager.createPoint(\n                        mousePos, \n                        context.selection.groupId, \n                        context.selection.layerId\n                    );\n                    point = result.point;\n                    newPointId = result.pointId;\n                    createdPoints.push(newPointId);\n                } else {\n                    console.log('Using snap point');\n                    point = PointManager.getPoint(snapPointId);\n                    newPointId = snapPointId;\n\n                    if (!point) {\n                        ErrorHandler.error('Snap point not found in map');\n                        return;\n                    }\n                }\n\n                // Execute appropriate strategy based on selection state\n                if (SelectionManager.hasPointSelection()) {\n                    const selectedPointId = SelectionManager.getSelectedPointId();\n                    CommandStrategies.handlePointSelection(\n                        context, selectedPointId, point, newPointId,\n                        linesToDelete, affectedBranches, createdPoints\n                    );\n                } else {\n                    CommandStrategies.handleNoSelection(\n                        context, point, newPointId, linesToDelete, affectedBranches\n                    );\n                }\n\n                // Update selection and rebuild map\n                SelectionManager.updateSelection(newPointId);\n                buildMap();\n                setFSMState(FSM_STATES.ADD_POINT);\n\n            }, 'add command execution', () => {\n                // Fallback: attempt to restore state\n                this.undo();\n            });\n        },\n\n        /**\n         * Undo the add command\n         */\n        undo() {\n            return ErrorHandler.safeExecute(() => {\n                currentLinesToDeleteRef = null;\n                const context = SelectionManager.getSelectionContext();\n                if (!context) return;\n\n                // Remove created lines\n                linesToDelete.forEach(lineId => {\n                    if (context.layer.lines[lineId]) {\n                        delete context.layer.lines[lineId];\n                    }\n                });\n\n                // Restore affected lines\n                Object.keys(affectedBranches).forEach(lineId => {\n                    if (affectedBranches[lineId]) {\n                        context.layer.lines[lineId] = affectedBranches[lineId];\n                    }\n                });\n\n                // Remove created points only if no line still references them\n                createdPoints.forEach(pointId => {\n                    let stillUsed = false;\n                    Object.values(map.groups).forEach(g => {\n                        if (stillUsed) return;\n                        Object.values(g.layers).forEach(l => {\n                            if (stillUsed) return;\n                            Object.values(l.lines).forEach(line => {\n                                if (line && line.pointIds && line.pointIds.includes(pointId)) {\n                                    stillUsed = true;\n                                }\n                            });\n                        });\n                    });\n                    if (!stillUsed && map.points[pointId]) {\n                        delete map.points[pointId];\n                    }\n                });\n\n                // Clear state\n                linesToDelete.length = 0;\n                affectedBranches = {};\n                createdPoints.length = 0;\n\n                buildMap();\n            }, 'add command undo');\n        }\n    };\n}\n\n/**\n * Enhanced pointOnAnySegment with better error handling\n * @param {Object} point - Point to test {x, z}\n * @param {number} eps - Epsilon tolerance\n * @returns {Object|null} Hit information or null\n */\nexport function pointOnAnySegment(point, eps = CONFIG.EPSILON) {\n    return GeometricCalculator.findPointOnAnySegment(point, eps);\n}\n\n/**\n * Enhanced findIntersections with better error handling and bounds checking\n * @param {string} excludeLineId - Line ID to exclude from search\n * @param {Object} startPoint - Segment start point {x, z}\n * @param {Object} endPoint - Segment end point {x, z}\n * @returns {Array} Array of intersection objects\n */\nexport function findIntersections(excludeLineId, startPoint, endPoint) {\n    return GeometricCalculator.findIntersections(excludeLineId, startPoint, endPoint);\n}\n\n/**\n * Split every line that passes through the point with the given pointId at that point\n * @param {string} pointId - Point ID where to break branches\n * @returns {boolean} True if something was split, false otherwise\n */\nexport function breakBranchAtNode(pointId) {\n    IntersectionHandler.breakBranchAtNode(pointId);\n    return true; // Return true for compatibility\n}\n\n\n", "import { map } from '../editor.js'; // or wherever your LayoutModel instance lives\nimport {  treeSelection} from '../selection.js'; // if you  \n \n \n\n// undoRedo.js  (or wherever you keep your command factories)\n/**\n * @param {Array<{guid:string,x:number,z:number}>} before  \u2013 original positions\n * @param {Array<{guid:string,x:number,z:number}>} after   \u2013 final positions\n */\nexport function moveCommand(before, after) {\n\n    return {\n        do() {\n            // move to AFTER\n            after.forEach(a => {\n                if (!treeSelection || treeSelection.length === 0) return;\n            const sel = treeSelection.at(-1);\n\n            const group = map.groups[sel.groupId];\n            if (!group) return;\n\n            const layer = group.layers[sel.layerId];\n            if (!layer) return;\n\n\n\n                const n = map.points[a.pointId];//layer.layout.findNode();\n                if (n) { n.position.x = a.x; n.position.z = a.z; }\n            });\n          \n        },\n        undo() { // restore BEFORE\n            before.forEach(b => {\n                if (!treeSelection || treeSelection.length === 0) return;\n            const sel = treeSelection.at(-1);\n\n            const group = map.groups[sel.groupId];\n            if (!group) return;\n\n            const layer = group.layers[sel.layerId];\n            if (!layer) return;\n\n\n                //  const n = layer.layout.findNode(b.guid);\n                const n = map.points[b.pointId];\n                if (n) { n.position.x = b.x; n.position.z = b.z; }\n               });\n        \n        },\n        redo() { this.do(); }\n    };\n}\n\n ", "import { LocationType, DisplayType } from \"../../shared/models.js\";\nimport { map } from \"../editor.js\";\nimport { canvasMain, refreshViewport } from \"../draw.js\";\nimport { locationId, polygonIds, setPolygonId, treeSelection, setPointId, pointIds } from \"../selection.js\";\nimport { BuildNavigationTree } from \"./sideMenuUI.js\";\nimport { FSM_STATES, setFSMState } from \"./../editing/state.js\";\n\n\n\n\n\nexport function initLocationsUI() {\n\n    // helper to build a label+field wrapper\n    function makeFieldGroup(labelText, fieldEl) {\n        const fg = document.createElement('div');\n        fg.className = 'field-group';\n        fg.style.marginBottom = '8px';\n\n        const label = document.createElement('label');\n        label.textContent = labelText;\n        label.htmlFor = fieldEl.id;\n        fg.appendChild(label);\n\n        fg.appendChild(fieldEl);\n        return fg;\n    }\n\n\n    const container = document.getElementById('locationFieldsContainer');\n    container.innerHTML = ''; // clear old\n\n    // 1) Name\n    const nameInput = document.createElement('input');\n    nameInput.type = 'text';\n    nameInput.id = 'locationName';\n    nameInput.value = '';\n    nameInput.addEventListener('input', e => {\n        const location = getCurrentLocation();\n        if (!location) return null;\n        location.name = e.target.value;\n        BuildNavigationTree(); // update the navigation tree\n    });\n    container.appendChild(makeFieldGroup('Name:', nameInput));\n\n    // 2) Meta Data\n    // 2) Meta Data \u2014 now a textarea with min 3 lines\n    const metaInput = document.createElement('textarea');\n    metaInput.id = 'locationMeta';\n    metaInput.rows = 3;                             // minimum of 3 lines\n    metaInput.style.resize = 'vertical';                   // allow vertical resizing only\n    metaInput.value = '';\n    metaInput.placeholder = 'e.g. Layer 2, East Wing';\n    metaInput.addEventListener('input', e => {\n        const location = getCurrentLocation();\n        if (!location) return;\n        location.meta = e.target.value;\n    });\n    container.appendChild(makeFieldGroup('Meta Data:', metaInput));\n\n    // 4) Location Type select\n    const typeSelect = document.createElement('select');\n    typeSelect.id = 'locationType';\n\n\n\n    Object.entries(LocationType).forEach(([lbl, val]) => {\n        const opt = document.createElement('option');\n        opt.value = val;\n        opt.textContent = lbl;\n        typeSelect.appendChild(opt);\n    });\n    typeSelect.value = LocationType.Custom;\n    typeSelect.addEventListener('change', e => {\n        const location = getCurrentLocation();\n        if (!location) return null;\n        location.locationType = e.target.value;\n    });\n    container.appendChild(makeFieldGroup('Location Type:', typeSelect));\n\n    // 3) Display Type select\n    const dispSelect = document.createElement('select');\n    dispSelect.id = 'displayType';\n\n    Object.entries(DisplayType).forEach(([lbl, val]) => {\n        const opt = document.createElement('option');\n        opt.value = val;\n        opt.textContent = lbl;\n        dispSelect.appendChild(opt);\n    });\n    dispSelect.value = DisplayType.None;\n    dispSelect.addEventListener('change', e => {\n        const location = getCurrentLocation();\n        if (!location) return null;\n        location.displayType = e.target.value;\n    });\n    container.appendChild(makeFieldGroup('Display Type:', dispSelect));\n\n    // Surfaces header with title and image-picker button\n    const surfacesHeader = document.createElement('div');\n    surfacesHeader.className = 'field-group';\n    // Ensure grid layout for surfacesHeader\n    surfacesHeader.style.display = 'grid';\n    surfacesHeader.style.gridTemplateColumns = 'auto 1fr';\n    // Label for the polygons section\n    const surfacesTitle = document.createElement('label');\n    surfacesTitle.textContent = 'Surfaces';\n    surfacesTitle.style.marginRight = 'auto';\n    surfacesHeader.appendChild(surfacesTitle);\n    // Square \"Pick Image\" button\n    const pickSurfaceBtn = document.createElement('button');\n    pickSurfaceBtn.type = 'button';\n    // pickSurfaceBtn.type = 'surfacePicker';\n    pickSurfaceBtn.className = \"btn-img\";\n    pickSurfaceBtn.style.backgroundImage = 'url(/Images/Pick.png)';\n    pickSurfaceBtn.style.backgroundRepeat = \"no-repeat\";\n    pickSurfaceBtn.style.backgroundPosition = \"center\";\n    pickSurfaceBtn.style.backgroundSize = \"16px 16px\";\n    pickSurfaceBtn.style.justifySelf = 'end';\n\n    pickSurfaceBtn.onclick = (e) => {\n        setFSMState(FSM_STATES.PICK_POLYGON);\n        updateLocationsUI();\n    }\n    surfacesHeader.appendChild(pickSurfaceBtn);\n    container.appendChild(surfacesHeader);\n\n    // Container for polygon tags, left-aligned\n    const surfacesTags = document.createElement('div');\n    surfacesTags.id = 'surfacesTags';\n    surfacesTags.className = 'tagContainer';\n    surfacesTags.style.display = 'flex';\n    surfacesTags.style.flexWrap = 'wrap';\n    surfacesTags.style.justifyContent = 'flex-start';\n    // renderTags(location.polygonIds, surfacesTags);\n    container.appendChild(surfacesTags);\n\n\n\n    // Surfaces header with title and image-picker button\n    const accessPointsHeader = document.createElement('div');\n    accessPointsHeader.className = 'field-group';\n    // Ensure grid layout for surfacesHeader\n    accessPointsHeader.style.display = 'grid';\n    accessPointsHeader.style.gridTemplateColumns = 'auto 1fr';\n    // Label for the polygons section\n    const accessPointsTitle = document.createElement('label');\n    accessPointsTitle.textContent = 'Access Points';\n    accessPointsTitle.style.marginRight = 'auto';\n    accessPointsHeader.appendChild(accessPointsTitle);\n\n\n    // Square \"Pick Image\" button\n    const pickAccessPointBtn = document.createElement('button');\n    pickAccessPointBtn.type = 'button';\n    // pickSurfaceBtn.type = 'surfacePicker';\n    pickAccessPointBtn.className = \"btn-img\";\n    pickAccessPointBtn.style.backgroundImage = 'url(/Images/Pick.png)';\n    pickAccessPointBtn.style.backgroundRepeat = \"no-repeat\";\n    pickAccessPointBtn.style.backgroundPosition = \"center\";\n    pickAccessPointBtn.style.backgroundSize = \"16px 16px\";\n    pickAccessPointBtn.style.justifySelf = 'end';\n\n    pickAccessPointBtn.onclick = (e) => {\n        setFSMState(FSM_STATES.PICK_POINT);\n        updateLocationsUI();\n    }\n    accessPointsHeader.appendChild(pickAccessPointBtn);\n    container.appendChild(accessPointsHeader);\n\n\n    const accessPointsTags = document.createElement('div');\n    accessPointsTags.id = 'accessPointsTags';\n    accessPointsTags.className = 'tagContainer';\n    accessPointsTags.style.display = 'flex';\n    accessPointsTags.style.flexWrap = 'wrap';\n    accessPointsTags.style.justifyContent = 'flex-start';\n    // renderTags(location.polygonIds, surfacesTags);\n    container.appendChild(accessPointsTags);\n}\n\nexport function updateLocationsUI() {\n    const location = getCurrentLocation();\n    if (!location) return null;\n\n    location.polygonIds.forEach(polygonId => setPolygonId(polygonId));\n    refreshViewport();\n\n    console.log(\"location.name\" + location.name);\n    // 1) Name\n    const nameInput = document.getElementById('locationName');\n    nameInput.value = location.name || '';\n\n    // 2) Meta Data\n    const metaInput = document.getElementById('locationMeta');\n    metaInput.value = location.meta || '';\n\n    // 3) Display Type select\n    const dispSelect = document.getElementById('displayType');\n    dispSelect.value = location.displayType || DisplayType.None;\n\n    // 4) Location Type select\n    const typeSelect = document.getElementById('locationType');\n    typeSelect.value = location.locationType || LocationType.Custom;\n\n\n    renderPolygonTags(location.polygonIds);\n    renderAccessPointsTags(location.accessPointIds);\n}\n\nfunction getCurrentLocation() {\n\n\n    console.log(\"locationId\" + locationId);\n    const location = map.locations[locationId];\n    return location;\n}\n\n\n\nfunction renderPolygonTags(polyIds) {\n\n    const surfacesTags = document.getElementById('surfacesTags');\n    surfacesTags.innerHTML = \"\";\n    polygonIds.length = 0; // clear previous selection\n    polyIds.forEach((polygonId, i) => {\n        setPolygonId(polygonId);\n\n        const pillBtn = document.createElement(\"span\");\n        pillBtn.className = \"tag-pill\";\n        // Color pill based on polygon validity\n        //  if (validatePolygon(polygonId)) {\n        //      pillBtn.style.backgroundColor = 'rgb(133, 204, 175)';\n        //      // pillBtn.style.color = \n        //  } else {\n        //   pillBtn.style.backgroundColor = 'rgb(217, 122, 122)';\n        // pillBtn.style.color =;\n        //  }\n        pillBtn.textContent = polygonId.length > 3\n            ? polygonId.slice(0, 2) + \"...\"\n            : polygonId;\n        pillBtn.addEventListener(\"click\", () => {\n            setPolygonId(polygonId);\n            refreshViewport();\n        });\n\n        const delSurfaceBtn = document.createElement(\"button\");\n        delSurfaceBtn.type = \"button\";\n        delSurfaceBtn.className = \"close-btn\";\n        delSurfaceBtn.innerHTML = \"&times;\";\n        delSurfaceBtn.addEventListener(\"click\", () => {\n            polyIds.splice(i, 1);   // actually remove the element\n            renderPolygonTags(polyIds);     // re\u2011render tags\n            refreshViewport();             // redraw without the removed surface\n        });\n\n        pillBtn.appendChild(delSurfaceBtn);\n        surfacesTags.appendChild(pillBtn);\n    });\n}\n\n\nexport function renderAccessPointsTags(accesPointIds) {\n    const accessPointsTags = document.getElementById('accessPointsTags');\n    accessPointsTags.innerHTML = \"\";\n    accesPointIds.forEach((pointId, i) => {\n        const pillBtn = document.createElement(\"span\");\n        pillBtn.className = \"tag-pill\";\n        pillBtn.textContent = pointId.length > 3\n            ? pointId.slice(0, 2) + \"...\"\n            : pointId;\n        pillBtn.addEventListener(\"click\", () => {\n            pointIds.length = 0;\n            setPointId(pointId);\n            refreshViewport();\n        });\n        const delBtn = document.createElement(\"button\");\n        delBtn.type = \"button\";\n        delBtn.className = \"close-btn\";\n        delBtn.innerHTML = \"&times;\";\n        delBtn.addEventListener(\"click\", () => {\n            //  map.points[pointId].accessPoint = false;\n            accesPointIds.splice(i, 1);   // actually remove the element\n            renderAccessPointsTags(accesPointIds);\n            refreshViewport();\n        });\n        pillBtn.appendChild(delBtn);\n        accessPointsTags.appendChild(pillBtn);\n    });\n}\n\n\n\n\n ", "/* eslint no-undef: off */\nimport { FSM_STATES, setFSMState } from \"../editing/state.js\";\nimport { refreshViewport } from \"../draw.js\";\nimport { pointIds } from \"../selection.js\";\nimport { map } from \"../editor.js\";\n\n/**\n * Build the \"Twins\" picker UI for a given point.\n * @param {HTMLElement} container   Parent element where the UI goes.\n * @param {PointModel}  point       Currently\u2011selected point model.\n */\nexport function updatePointUI() {\n\nif(pointIds.length!==1) return;\nconst pointId=pointIds[0];\nconst point = map.points[pointId];\n\n    const container = document.getElementById('pointContainer');\n    container.innerHTML = ''; // clear old\n\n    // --- clear any previous markup ---\n    container.innerHTML = \"\";\n\n    /* \u2554\u2550 Header: \"Twins\" label + pick button \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 */\n    const twinsHeader = document.createElement(\"div\");\n    twinsHeader.className = \"field-group\";\n    twinsHeader.style.display = \"grid\";\n    twinsHeader.style.gridTemplateColumns = \"auto 1fr\";\n\n    // label\n    const twinsTitle = document.createElement(\"label\");\n    twinsTitle.textContent = \"Twins\";\n    twinsHeader.appendChild(twinsTitle);\n\n    // pick button\n    const pickTwinsBtn = document.createElement(\"button\");\n    pickTwinsBtn.type = \"button\";\n    pickTwinsBtn.className = \"btn-img\";\n    Object.assign(pickTwinsBtn.style, {\n        backgroundImage: \"url(/Images/Pick.png)\",\n        backgroundRepeat: \"no-repeat\",\n        backgroundPosition: \"center\",\n        backgroundSize: \"16px 16px\",\n        justifySelf: \"end\"\n    });\n\n    pickTwinsBtn.onclick = () => {\n        setFSMState(FSM_STATES.PICK_POINT);   // switch to point\u2011picking mode\n        refreshViewport();                    // visual cue\n    };\n\n    twinsHeader.appendChild(pickTwinsBtn);\n    container.appendChild(twinsHeader);\n\n    /* \u2554\u2550 Tags container showing current twins \u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550 */\n    const twinsTags = document.createElement(\"div\");\n    twinsTags.id = \"twinsTags\";\n    twinsTags.className = \"tagContainer\";\n    Object.assign(twinsTags.style, {\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        justifyContent: \"flex-start\"\n    });\n    container.appendChild(twinsTags);\n\n    renderTwinTags(point.twins ?? [], twinsTags, point);\n}\n\n/* Helper to show the currently selected twin IDs as pills (Access-Points style) */\nfunction renderTwinTags(idList, parent, point) {\n  parent.innerHTML = \"\";\n\n  idList.forEach((pid, idx) => {\n    // pill span\n    const pill = document.createElement(\"span\");\n    pill.className = \"tag-pill\";\n    pill.textContent = pid.length > 3 ? pid.slice(0, 2) + \"\u2026\" : pid;\n\n    // click selects that twin point\n    pill.addEventListener(\"click\", () => {\n      pointIds.length = 0;\n      setPointId(pid);\n      refreshViewport();\n    });\n\n    // delete (\u00D7) button\n    const delBtn = document.createElement(\"button\");\n    delBtn.type = \"button\";\n    delBtn.className = \"close-btn\";\n    delBtn.innerHTML = \"&times;\";\n\n    delBtn.addEventListener(\"click\", (e) => {\n      e.stopPropagation();           // prevent pill click\n      idList.splice(idx, 1);         // remove from array\n      point.twins = [...idList];     // persist change on model\n      renderTwinTags(idList, parent, point);  // re-render\n      refreshViewport();\n    });\n\n    pill.appendChild(delBtn);\n    parent.appendChild(pill);\n  });\n}", "import { SelectionMode } from \"../models/models.js\";\nimport {\n    pointIds, lineIds, polygonIds, setLineId, setPointId, currentSelectionMode,\n    setPolygonId, setLocationId, locationId, treeSelection\n} from \"../selection.js\";\nimport { octx, canvasOverlay, doorNode1Position, doorNode2Position, navigation, drawDoorEdit, drawPointEdit, drawSelectionRect } from \"../draw.js\";\nimport { map, isSnap } from \"../editor.js\";\nimport { hitTest } from \"./hitTest.js\";\nimport { refreshViewport, canvasMain } from \"./editing.js\";\n\n\n//import { NAV_STATES, getNavState } from \"../navigation/state.js\";\n//import { scale, pan } from \"../navigation/navigation.js\";\n\nimport { STATES } from \"../navigation.js\";\n\nimport { computeCentroid, snap } from \"./hitTest.js\";\nimport { commit } from \"../undoRedo/commit.js\";\nimport { addDoorCommand } from \"../undoRedo/addDoor.js\";\nimport { addCommand } from \"../undoRedo/addPoint.js\";\nimport { selectCommand } from \"../undoRedo/select.js\";\nimport { moveCommand } from \"../undoRedo/move.js\";\nimport { updateSideMenuUI } from \"./../UI/sideMenuUI.js\";\nimport { deselectEverything, forcePointSelection, forcePolygonSelection, forceEdgeSelection, addNewLocation } from \"../UI/toolsMenu.js\";\nimport { updateLocationsUI } from \"../UI/locationsUI.js\";\nimport { updatePointUI } from \"../UI/pointUI.js\";\n\n\n\n/**\n * Finite State Machine for handling user interactions\n * @typedef {import('./types.js').PointId} PointId\n * @typedef {import('./types.js').DragState} DragState\n * @typedef {import('./types.js').RectSelectState} RectSelectState\n */\n\n// FSM States\nexport const FSM_STATES = {\n    IDLE: 'Idle',\n    RECT_SELECTING: 'RectSelecting',\n    READY_TO_DRAG: 'ReadyToDrag',\n    DRAGGING: 'Dragging',\n    ROTATE: 'Rotate',\n    SCALE: 'Scale',\n    ADD_POINT: 'AddNode',\n    ADD_DOOR: 'AddDoor',\n    PICK_POLYGON: 'PickPolygon',\n    PICK_POINT: 'PickPoint',\n};\n\n// FSM Events\nexport const FSM_EVENTS = {\n    POINTER_DOWN: 'POINTER_DOWN',\n    POINTER_MOVE: 'POINTER_MOVE',\n    POINTER_UP: 'POINTER_UP',\n    KEY_DOWN: 'KEY_DOWN',\n    KEY_UP: 'KEY_UP',\n    DOUBLE_CLICK: 'DOUBLE_CLICK',\n};\n\nlet currentState = FSM_STATES.IDLE;\n\n// Global state for drag operations\nconst drag = {\n    active: false,\n    startScrX: 0, startScrY: 0,\n    startWorld: { x: 0, z: 0 },\n    pointStarts: new Map(),   // guid \u2192 {x,z}\n    pointIds: []                // the actual PointModel refs\n};\n\nconst DRAG_THRESHOLD = 3;\nexport let mousePos;\nexport let mousePosRaw;\nexport let splineTransform;\n\n\nlet rectSelectState = { active: false, x0: 0, y0: 0, x1: 0, y1: 0 };\nlet startSelectWorld;\n\nlet startMouse, startPositions, startAngle, startDist, startSize;\nlet startVector;\nexport let pivot;\n\n// Helper to clear drag state\nfunction clearDragState() {\n    drag.active = false;\n    drag.pointStarts.clear();\n    drag.pointIds.length = 0;\n}\n\n// Helper for canvas refresh\nlet _raf = null;\nfunction requestCanvasRefresh() {\n    if (_raf) return;\n    _raf = requestAnimationFrame(() => {\n        _raf = null;\n        refreshViewport();\n    });\n}\n\n\n\n/**\n * Initialize pivot, start positions, and drag state for rotate/scale.\n * Returns the appropriate next FSM state.\n */\nfunction initTransformState(e, STATE) {\n    startMouse = { ...mousePos };\n    startPositions = pointIds.map(pid => ({ ...map.points[pid].position }));\n    const rawPivot = computeCentroid(pointIds.map(id => map.points[id]));\n    pivot = {\n        x: snap(rawPivot.x),\n        y: snap(rawPivot.y),\n        z: snap(rawPivot.z)\n    };\n    pointIds.forEach(pid => {\n        const p = map.points[pid];\n        p.position.x += pivot.x - rawPivot.x;\n        p.position.z += pivot.z - rawPivot.z;\n    });\n    const v0x = startMouse.x - pivot.x;\n    const v0z = startMouse.z - pivot.z;\n    startAngle = Math.atan2(v0z, v0x);\n    startDist = Math.hypot(v0x, v0z);\n    startVector = { x: v0x, z: v0z };\n    const distances = startPositions.map(pos =>\n        Math.hypot(pos.x - pivot.x, pos.z - pivot.z)\n    );\n    startSize = distances.length ? Math.max(...distances) : 0;\n\n    drag.pointIds = [...pointIds];\n    drag.pointStarts.clear();\n    drag.pointIds.forEach(id => drag.pointStarts.set(id, { x: map.points[id].position.x, z: map.points[id].position.z }));\n    drag.startScrX = e.clientX;\n    drag.startScrY = e.clientY;\n    drag.startWorld = { ...mousePos };\n    drag.active = true;\n    canvasMain.setPointerCapture(e.pointerId);\n    refreshViewport();\n\n    return STATE;\n}\n\n\n\n\nlet handlers = {};\nexport function registerNavHandlers(table) {\n    console.log(\"Editing FSM handlers registered for states:\", Object.keys(table));\n    handlers = table || {};\n}\n\n// Handlers for FSM transitions\nregisterNavHandlers({\n    [FSM_STATES.IDLE]: {\n\n        [FSM_EVENTS.POINTER_DOWN]: (e) => {\n            if (e.button === 2) e.preventDefault();\n            clearDragState();\n            /* If navigation FSM has already decided we're in pan\u2011drag mode\n               (or the user is holding Alt/Meta, which we map to pan),\n               do NOT start rectangle selection here. */\n            //   console.log(\"navigation state\", navigation.getState());\n\n\n            // \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Modifier logic \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n            // Holding Cmd (\u2318 / Meta) or Ctrl means \u201Cmulti\u2011select\u201D \u2014 unless\n            // the Navigation FSM has already switched to PANNING, in which\n            // case we let the nav layer have exclusive control.\n            const multi = e.metaKey || e.ctrlKey;\n            const navState = navigation.getState();\n\n            if (navState === STATES.PANNING && multi) {\n                // User is dragging the canvas while the meta key is held.\n                // Defer to navigation; do NOT start any selection logic.\n                return FSM_STATES.IDLE;\n            }\n\n            const before = {\n                points: [...pointIds],\n                lines: [...lineIds],\n                polygons: [...polygonIds]\n            };\n\n            const pointId = hitTest.snapToNode(mousePosRaw);\n            const lineId = hitTest.getClosestBranch(mousePosRaw);\n            const polygonId = hitTest.getSelectedPolygon(e);\n\n            switch (currentSelectionMode) {\n                case SelectionMode.POINT: {\n                    if (!pointId) break;\n                    const idx = pointIds.indexOf(pointId);\n                    if (multi) {\n                        // Toggle selection\n                        if (idx >= 0) pointIds.splice(idx, 1);\n                        else setPointId(pointId);\n                    } else {\n                        // If multiple points already selected and clicked one of them, keep the group\n                        if (!(pointIds.length > 1 && idx >= 0)) {\n                            // Otherwise, single-select this point\n                            pointIds.length = 0;\n                            pointIds.push(pointId);\n                            const pt = map.points[pointId];\n                            if (pt.locationId) {\n                                setLocationId(pt.locationId);\n                                updateSideMenuUI('location');\n                            } else {\n                                setLocationId(null);\n                                updateSideMenuUI('point');\n                            }\n                                             if( pt.twins)         console.log('twings :', pt.twins);\n                        }\n                    }\n\n                    // Initialize drag state so you can move the selected point(s)\n                    drag.pointIds = [...pointIds];\n                    drag.pointStarts.clear();\n                    drag.pointIds.forEach(pid => {\n                        const pos = map.points[pid].position;\n                        drag.pointStarts.set(pid, { x: pos.x, z: pos.z });\n                    });\n                    drag.startScrX = e.clientX;\n                    drag.startScrY = e.clientY;\n                    drag.startWorld = { ...mousePos };\n                    canvasMain.setPointerCapture(e.pointerId);\n\n                    return FSM_STATES.READY_TO_DRAG;\n                }\n\n                case SelectionMode.LINE: {\n                    if (!lineId) break;\n\n                    const idx = lineIds.indexOf(lineId);\n\n                    if (multi) {\n                        // Toggle behaviour when Shift/Ctrl/Meta pressed\n                        if (idx >= 0) lineIds.splice(idx, 1);\n                        else setLineId(lineId);\n                    } else {\n                        // Single click \u2192 select entire ring the edge belongs to\n                        lineIds.length = 0;\n\n                        // const group = map.groups[groupId];\n                        // if (!group) return;\n                        // const layer = group.layers[layerId];\n                        // if (!layer) return;\n                        //    lineIds.push(lineId);\n                        setLineId(lineId);\n                    }\n                    break;\n                }\n\n                case SelectionMode.POLYGON: {\n                    //  console.log(\"polygonId\" + polygonId);\n                    if (!polygonId) return;\n                    const idx = polygonIds.indexOf(polygonId);\n                    if (multi) {\n                        // Toggle behaviour when Shift/Ctrl/Meta pressed\n                        if (idx >= 0) polygonIds.splice(idx, 1);\n                        else setPolygonId(polygonId);\n                    } else {\n                        // Single click \u2192 select entire ring the edge belongs to\n                        polygonIds.length = 0;\n                        //polygonIds.splice(0, polygonIds.length, polygonId);\n                        // polygonIds.push(polygonId);\n                        setPolygonId(polygonId);\n                    }\n                    console.log(\"polygonIds.length\", polygonIds.length);\n                    break;\n                }\n            }\n\n            const after = {\n                points: [...pointIds],\n                lines: [...lineIds],\n                polygons: [...polygonIds]\n            };\n            if (\n                before.points.join(\",\") !== after.points.join(\",\") ||\n                before.lines.join(\",\") !== after.lines.join(\",\") ||\n                before.polygons.join(\",\") !== after.polygons.join(\",\")\n            ) {\n                commit(selectCommand(\n                    before.points, after.points,\n                    before.lines, after.lines,\n                    before.polygons, after.polygons\n                ));\n            }\n\n            if (!multi &&                                   // \u2318 / Ctrl held \u2192 no rect select\n                currentSelectionMode !== SelectionMode.POLYGON &&\n                !pointId && !lineId) {\n                const overlayRect = canvasOverlay.getBoundingClientRect();\n\n                // clear any previous rectangle right away\n                const octx = canvasOverlay.getContext('2d');\n                octx.clearRect(0, 0, canvasOverlay.width, canvasOverlay.height);\n\n                rectSelectState.active = true;\n                canvasMain.setPointerCapture(e.pointerId);\n\n                // pixel position of the click\n                rectSelectState.x0 = e.clientX - overlayRect.left;\n                rectSelectState.y0 = e.clientY - overlayRect.top;\n\n                //  \uD83D\uDD11 reset the far corner so it starts as a zero-size box\n                rectSelectState.x1 = rectSelectState.x0;\n                rectSelectState.y1 = rectSelectState.y0;\n\n                // store world coords for filtering\n                startSelectWorld = { x: mousePos.x, z: mousePos.z };\n\n                return FSM_STATES.RECT_SELECTING;\n            }\n            refreshViewport();\n            return FSM_STATES.IDLE;\n\n\n        },\n        [FSM_EVENTS.DOUBLE_CLICK]: (e) => {\n\n            if (e.button === 0) {\n                pointIds.length = 0;\n                lineIds.length = 0;\n                polygonIds.length = 0;\n            }\n\n            refreshViewport();\n            return FSM_STATES.IDLE;\n        },\n        // Ignore pointer move/up when idle\n        [FSM_EVENTS.POINTER_MOVE]: () => { FSM_STATES.IDLE },\n        [FSM_EVENTS.POINTER_UP]: () => FSM_STATES.IDLE,\n    },\n    [FSM_STATES.RECT_SELECTING]: {\n        [FSM_EVENTS.POINTER_MOVE]: (e) => {\n            const overlayRect = canvasOverlay.getBoundingClientRect();\n            rectSelectState.x1 = e.clientX - overlayRect.left;\n            rectSelectState.y1 = e.clientY - overlayRect.top;\n            drawSelectionRect(rectSelectState);\n            return FSM_STATES.RECT_SELECTING;\n        },\n        [FSM_EVENTS.POINTER_UP]: (e) => {\n            const octx = canvasOverlay.getContext('2d');\n            octx.clearRect(0, 0, canvasOverlay.width, canvasOverlay.height);\n            // No need to reset transform since we always use save/restore for rect drawing now\n\n            canvasMain.releasePointerCapture(e.pointerId);\n            rectSelectState.active = false;\n            const sWorld = startSelectWorld !== undefined\n                ? startSelectWorld\n                : screenToWorld(rectSelectState.x0, rectSelectState.y0);\n            // World\u2010space rectangle bounds (no rotation)\n            const wx0 = Math.min(startSelectWorld.x, mousePos.x);\n            const wz0 = Math.min(startSelectWorld.z, mousePos.z);\n            const wx1 = Math.max(startSelectWorld.x, mousePos.x);\n            const wz1 = Math.max(startSelectWorld.z, mousePos.z);\n\n            const beforePoints = [...pointIds];\n            const beforeLines = [...lineIds];\n            const beforePolygons = [...polygonIds];\n\n            const newPointIdsSet = new Set();\n            const newLineIdsSet = new Set();\n            const newPolygonIdsSet = new Set();\n\n            switch (currentSelectionMode) {\n                case SelectionMode.POINT: {\n\n\n                    const sel = treeSelection.at(-1);\n                    if (sel) {\n                        const group = map.groups[sel.groupId];\n                        if (!group) return;\n                        const layer = group.layers[sel.layerId];\n                        if (!layer) return;\n                        Object.entries(layer.lines).forEach(([lineId, line]) => {\n                            line.pointIds.forEach(pid => {\n                                if (newPointIdsSet.has(pid)) return;\n                                const p = map.points[pid].position;\n                                if (p.x >= wx0 && p.x <= wx1 && p.z >= wz0 && p.z <= wz1) {\n                                    newPointIdsSet.add(pid);\n                                }\n                            });\n                        });\n                    };\n\n                    if (newPointIdsSet.length == 1) {\n                        const pt = map.points[newPointIdsSet[0]];\n                        if (pt.locationId) {\n                            setLocationId(pt.locationId);\n                            updateSideMenuUI('location');\n                        } else {\n                            setLocationId(null);\n                            updateSideMenuUI('point');\n                        }\n                    }\n\n                    break;\n                }\n\n                case SelectionMode.LINE:\n                    hitTest.pickLinesRect({ x0: wx0, z0: wz0, x1: wx1, z1: wz1 }).forEach(lineId => {\n                        if (newLineIdsSet.has(lineId)) return;\n                        newLineIdsSet.add(lineId);\n                    });\n                    break;\n\n                case SelectionMode.POLYGON:\n                    break;\n            }\n\n            const newPointIds = Array.from(newPointIdsSet);\n            const newLineIds = Array.from(newLineIdsSet);\n            const newPolygonIds = Array.from(newPolygonIdsSet);\n\n            if (\n                JSON.stringify(beforePoints) !== JSON.stringify(newPointIds) ||\n                JSON.stringify(beforeLines) !== JSON.stringify(newLineIds) ||\n                JSON.stringify(beforePolygons) !== JSON.stringify(newPolygonIds)\n            ) {\n                commit(selectCommand(\n                    beforePoints, newPointIds,\n                    beforeLines, newLineIds,\n                    beforePolygons, newPolygonIds\n                ));\n            }\n            refreshViewport();\n            return FSM_STATES.IDLE;\n        }\n    },\n    [FSM_STATES.READY_TO_DRAG]: {\n        /* If the user moves far enough, switch to full DRAGGING */\n        [FSM_EVENTS.POINTER_MOVE]: (e) => {\n            const dx = e.clientX - drag.startScrX;\n            const dy = e.clientY - drag.startScrY;\n            if (Math.abs(dx) > DRAG_THRESHOLD || Math.abs(dy) > DRAG_THRESHOLD) {\n                /* Promote to DRAGGING (reuse the logic already inside that state) */\n                return FSM_STATES.DRAGGING;\n            }\n            return FSM_STATES.READY_TO_DRAG;\n        },\n        /* If they release without moving much, treat it like a simple click */\n        [FSM_EVENTS.POINTER_UP]: (e) => {\n            canvasMain.releasePointerCapture(e.pointerId);\n            clearDragState();\n            refreshViewport();\n            return FSM_STATES.IDLE;\n        },\n        /* Ignore other events */\n        [FSM_EVENTS.POINTER_DOWN]: () => FSM_STATES.READY_TO_DRAG,\n        [FSM_EVENTS.KEY_DOWN]: () => FSM_STATES.READY_TO_DRAG,\n        [FSM_EVENTS.KEY_UP]: () => FSM_STATES.READY_TO_DRAG\n    },\n    [FSM_STATES.DRAGGING]: {\n        [FSM_EVENTS.POINTER_MOVE]: (e) => {\n            const worldDX = mousePos.x - drag.startWorld.x;\n            const worldDZ = mousePos.z - drag.startWorld.z;\n\n            drag.pointIds.forEach(id => {\n                const s = drag.pointStarts.get(id);\n                map.points[id].position.x = snap(s.x + worldDX);\n                map.points[id].position.z = snap(s.z + worldDZ);\n            });\n            requestCanvasRefresh();\n            return FSM_STATES.DRAGGING;\n        },\n        [FSM_EVENTS.POINTER_UP]: (e) => {\n            const before = drag.pointIds.map(id => ({ pointId: id, x: drag.pointStarts.get(id).x, z: drag.pointStarts.get(id).z }));\n            const after = drag.pointIds.map(id => ({\n                pointId: id,\n                x: map.points[id].position.x,\n                z: map.points[id].position.z\n            }));\n            const changed = before.some((b, i) => b.x !== after[i].x || b.z !== after[i].z);\n            if (changed) {\n                const moveCmd = moveCommand(before, after);\n                commit(moveCmd);\n            }\n            canvasMain.releasePointerCapture(e.pointerId);\n            clearDragState();\n            refreshViewport();\n            return FSM_STATES.IDLE;\n        }\n    },\n    [FSM_STATES.ROTATE]: {\n        [FSM_EVENTS.POINTER_DOWN]: (e) => initTransformState(e, FSM_STATES.ROTATE),\n\n        [FSM_EVENTS.POINTER_MOVE]: (e) => {\n            if (!pivot) {\n                // Ensure pivot is set; bail until POINTER_DOWN sets it\n                return FSM_STATES.ROTATE;\n            }\n            const v = { x: mousePos.x - pivot.x, z: mousePos.z - pivot.z };\n            const rawAngle = Math.atan2(v.z, v.x) - startAngle;\n            const snapRotation = map.settings.rotationSnap > 0 ? map.settings.rotationSnap : 5;\n            const snappedDeg = Math.round(rawAngle * (180 / Math.PI) / snapRotation) * snapRotation;\n            const angle = snappedDeg * (Math.PI / 180);\n\n            const cosA = Math.cos(angle);\n            const sinA = Math.sin(angle);\n            drag.pointIds.forEach((id, i) => {\n                const sx = startPositions[i].x - pivot.x;\n                const sz = startPositions[i].z - pivot.z;\n                map.points[id].position.x = pivot.x + (sx * cosA - sz * sinA);\n                map.points[id].position.z = pivot.z + (sx * sinA + sz * cosA);\n            });\n            requestCanvasRefresh();\n            return FSM_STATES.ROTATE;\n        },\n        [FSM_EVENTS.POINTER_UP]: (e) => {\n            clearDragState();\n            refreshViewport();\n            return FSM_STATES.ROTATE;\n        }\n    },\n    [FSM_STATES.SCALE]: {\n        [FSM_EVENTS.POINTER_DOWN]: (e) => initTransformState(e, FSM_STATES.SCALE),\n\n        [FSM_EVENTS.POINTER_MOVE]: (e) => {\n\n            const v = { x: mousePos.x - pivot.x, z: mousePos.z - pivot.z };\n            let factor = 1;\n            if (startDist > 0) {\n                const dot = v.x * startVector.x + v.z * startVector.z;\n                factor = dot / (startDist * startDist);\n            }\n\n            drag.pointIds.forEach((id, i) => {\n                const sx = startPositions[i].x - pivot.x;\n                const sy = startPositions[i].y - pivot.y;\n                const sz = startPositions[i].z - pivot.z;\n\n                map.points[id].position.x = snap(pivot.x + sx * factor);\n                map.points[id].position.y = snap(pivot.y + sy * factor);\n                map.points[id].position.z = snap(pivot.z + sz * factor);\n            });\n            requestCanvasRefresh();\n            return FSM_STATES.SCALE;\n        },\n        [FSM_EVENTS.POINTER_UP]: (e) => {\n            clearDragState();\n            refreshViewport();\n            return FSM_STATES.SCALE;\n        }\n    },\n    [FSM_STATES.ADD_POINT]: {\n        [FSM_EVENTS.POINTER_DOWN]: (e) => {\n            if (e.button !== 0) return FSM_STATES.ADD_POINT;      // ignore right/middle\n\n            const cmd = addCommand();\n            commit(cmd);\n            //  refreshViewport();\n            /* stay in ADD mode, but return to Idle state awaiting next click */\n            return FSM_STATES.ADD_POINT;\n        },\n\n        [FSM_EVENTS.POINTER_MOVE]: (e) => {\n            //  const group = map.groups[groupId];\n            //  if (!group) return FSM_STATES.ADD_POINT;\n            //  const layer = group.layers[layerId];\n            //  if (!layer) return FSM_STATES.ADD_POINT;\n\n            //  if (lineIds.length) {\n            //      splineTransform = hitTest.getClosestPointOnBranches(\n            //          mousePos,\n            //          lineIds\n            //      );\n            //      refreshViewport();\n            //  }\n            drawPointEdit();\n            return FSM_STATES.ADD_POINT;\n        },\n        [FSM_EVENTS.POINTER_UP]: (e) => {\n            // This state is for adding; pointerup means the action is complete.\n            // The actual add command is committed on pointerdown in IDLE state.\n            return FSM_STATES.ADD_POINT;\n        }\n    },\n    [FSM_STATES.ADD_DOOR]: {\n        [FSM_EVENTS.POINTER_MOVE]: (e) => {\n            //  const group = map.groups[groupId];\n            //  if (!group) return FSM_STATES.ADD_DOOR;\n            //  const layer = group.layers[layerId];\n            //  if (!layer) return FSM_STATES.ADD_DOOR;\n            if (lineIds) {\n                const doorWidth = map.settings.gridSize;\n                splineTransform = hitTest.getClosestPointOnBranches(mousePos, lineIds, doorWidth);\n                //   console.log(\"update splineTransform\" + splineTransform);\n                refreshViewport();\n            }\n            drawDoorEdit();\n            return FSM_STATES.ADD_DOOR;\n        },\n        [FSM_EVENTS.POINTER_UP]: (e) => {\n            // This state is for adding, pointerup means the action is complete.\n\n            const addDoorCmd = addDoorCommand(splineTransform, doorNode1Position, doorNode2Position);\n            commit(addDoorCmd);\n            return FSM_STATES.IDLE;\n        }\n    },\n    [FSM_STATES.PICK_POLYGON]: {\n        [FSM_EVENTS.POINTER_DOWN]: (e) => {\n            //  const group = map.groups[groupId];\n            //  if (!group) return null;\n            //\n            //  const layer = group.layers[layerId];\n            //  if (!layer) return null;\n\n            const location = map.locations[locationId];\n            if (!location) return null;\n\n            const polygonId = hitTest.getSelectedPolygon(e);\n            if (!polygonId) return;\n\n            if (!location.polygonIds.includes(polygonId)) {\n                // add it\n                location.polygonIds.push(polygonId);\n            } else {\n                // remove it\n                const idx = location.polygonIds.indexOf(polygonId);\n                if (idx !== -1) {\n                    location.polygonIds.splice(idx, 1);\n                }\n            }\n            updateLocationsUI();\n            return FSM_STATES.PICK_POLYGON;\n        }\n    },\n\n    [FSM_STATES.PICK_POINT]: {\n        [FSM_EVENTS.POINTER_DOWN]: (e) => {\n            if (pointIds.length === 1) {\n\n                const selectedPointId = pointIds[0];\n                const selectedPoint = map.points[selectedPointId];\n                const pointId = hitTest.pickPoint(mousePosRaw);\n                if (!pointId) return;\n\n                if (selectedPoint.locationId) {\n                    const location = map.locations[locationId];\n                    if (!location) return null;\n                    if (!location.accessPointIds.includes(pointId)) {\n                        // add it\n                        location.accessPointIds.push(pointId);\n                    } else {\n                        // remove it\n                        const idx = location.accessPointIds.indexOf(pointId);\n                        if (idx !== -1) {\n                            location.accessPointIds.splice(idx, 1);\n                        }\n                    }\n                    updateLocationsUI();\n                } else {\n\n                    const twinPoint = map.points[pointId];\n                    // Ensure twin arrays exist\n                    selectedPoint.twins = selectedPoint.twins || [];\n                    twinPoint.twins   = twinPoint.twins   || [];\n\n                    // Add missing relationship entries\n                    if (!selectedPoint.twins.includes(pointId)) {\n                      selectedPoint.twins.push(pointId);\n                    }\n                    if (!twinPoint.twins.includes(selectedPointId)) {\n                      twinPoint.twins.push(selectedPointId);\n                    }\n\n                    // Debug logs to verify both sides\n                   \n                    updatePointUI();\n                }\n            }\n            return FSM_STATES.PICK_POINT;\n        }\n    }\n});\n//console.log(\"Editing FSM fully initialized. States:\", Object.keys(handlers));\n\nexport function dispatch(event, e) {\n    const handler = handlers[currentState]?.[event];\n    // console.log(`dispatch: state=${currentState}, event=${event}, handler=${handler}`);\n    if (handler) {\n        const nextState = handler(e);\n        if (nextState && nextState !== currentState) {\n            //   console.log(`FSM Transition: ${currentState} -> ${nextState} on ${event}`);\n            currentState = nextState;\n        }\n    }\n}\n\nexport function getCurrentState() {\n    return currentState;\n}\n\nexport function setMousePos(newMousePos, newMousePosRaw) {\n\n    mousePos = {\n        x: snap(newMousePos.x),\n        z: snap(newMousePos.z)\n    };\n    mousePosRaw = newMousePosRaw;   // keep the unsnapped copy\n}\nexport function getRectSelectState() {\n    return rectSelectState;\n}\n\n/**\n * Forcefully set the current FSM state.\n * @param {string} state - One of FSM_STATES.\n */\nexport function setFSMState(state) {\n    if (Object.values(FSM_STATES).includes(state)) {\n        currentState = state;\n        console.log(`Current state: ${state}`);\n\n        switch (currentState) {\n            case FSM_STATES.ROTATE:\n                canvasMain.style.cursor = \"alias\";\n                break;\n\n            case FSM_STATES.SCALE:\n                canvasMain.style.cursor = \"nwse-resize\";\n                break;\n\n            case FSM_STATES.ADD_DOOR:\n                break;\n\n            case FSM_STATES.ADD_POINT:\n                canvasMain.style.cursor = \"crosshair\";\n                break;\n\n            case FSM_STATES.IDLE:\n        \n                    octx.setTransform(1, 0, 0, 1, 0, 0);\n                    octx.clearRect(0, 0, canvasOverlay.width, canvasOverlay.height);\n              \n                canvasMain.style.cursor = \"default\";\n                switch (currentSelectionMode) {\n                    case SelectionMode.POINT: {\n                        forcePointSelection();\n                        break;\n                    }\n\n                    case SelectionMode.LINE:\n                        forceEdgeSelection();\n                        break;\n\n                    case SelectionMode.POLYGON:\n                        forcePolygonSelection();\n                        break;\n                }\n                break;\n\n            case FSM_STATES.PICK_POLYGON:\n                canvasMain.style.cursor = 'crosshair'\n                deselectEverything();\n                break;\n\n            case FSM_STATES.PICK_POINT:\n                canvasMain.style.cursor = 'crosshair'\n                deselectEverything();\n                break;\n\n            default:\n                canvasMain.style.cursor = \"default\";\n                break;\n        }\n    } else {\n        console.warn(`Invalid FSM state: ${state}`);\n    }\n}\n\n// Add local screenToWorld function for use in this file\nfunction screenToWorld(screenX, screenY) {\n    const dpr = window.devicePixelRatio || 1;\n    const canvasWidth = canvasOverlay.width / dpr;\n    const canvasHeight = canvasOverlay.height / dpr;\n\n    //  const relX = (screenX - canvasWidth / 2 - pan.x) / scale;\n    //  const relZ = (screenY - canvasHeight / 2 - pan.y) / scale;\n\n    const transform = navigation.getTransform();\n    const relX = (screenX - canvasWidth / 2 - transform.dx) / transform.scale;\n    const relZ = (screenY - canvasHeight / 2 - transform.dy) / transform.scale;\n\n    return { x: relX, z: relZ };\n}\n\nfunction worldToScreen(worldX, worldZ) {\n    const dpr = window.devicePixelRatio || 1;\n    const canvasWidth = canvasOverlay.width / dpr;\n    const canvasHeight = canvasOverlay.height / dpr;\n\n    //const screenX = canvasWidth / 2 + pan.x + worldX * scale;\n    //const screenY = canvasHeight / 2 + pan.y + worldZ * scale;\n\n    const transform = navigation.getTransform();\n    const screenX = canvasWidth / 2 + transform.dx + worldX * transform.scale;\n    const screenY = canvasHeight / 2 + transform.dy + worldZ * transform.scale;\n\n    return { x: screenX, y: screenY };\n}\n\n", "/**\n * Create and show a modal dialog purely in JS.\n * @param {'info'|'error'} type\n * @param {string} message\n */\nfunction showDialog(type, message, onOk, onCancel) {\n  // 1) Overlay\n  const overlay = document.createElement('div');\n  Object.assign(overlay.style, {\n    position: 'fixed',\n    top: 0, left: 0, right: 0, bottom: 0,\n    background: 'rgba(0,0,0,0.5)',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    zIndex: 10000,\n  });\n\n  // 2) Dialog box\n  const box = document.createElement('div');\n  Object.assign(box.style, {\n    background:  type === 'error' ? '#ffe6e6' : '#f0f8ff',\n    color:       type === 'error' ? '#900'   : '#000',\n    padding:     '20px',\n    borderRadius:'8px',\n    minWidth:    '280px',\n    boxShadow:   '0 4px 12px rgba(0,0,0,0.3)',\n    textAlign:   'center',\n  });\n\n  // 3) Message\n  const txt = document.createElement('p');\n  txt.textContent = message;\n  txt.style.margin = '0 0 16px';\n  box.appendChild(txt);\n\n  // 4) OK button\n  const btn = document.createElement('button');\n  btn.textContent = 'OK';\n  Object.assign(btn.style, {\n    padding:     '8px 16px',\n    border:      'none',\n    borderRadius:'4px',\n    cursor:      'pointer',\n    background:  type === 'error' ? '#d9534f' : '#007bff',\n    color:       '#fff',\n  });\n  btn.addEventListener('click', () => {\n    document.body.removeChild(overlay);\n    onOk?.();\n  });\n  box.appendChild(btn);\n\n  const cancelBtn = document.createElement('button');\n  cancelBtn.textContent = 'Cancel';\n  Object.assign(cancelBtn.style, {\n    padding:     '8px 16px',\n    border:      'none',\n    borderRadius:'4px',\n    cursor:      'pointer',\n    background:  '#6c757d',\n    color:       '#fff',\n    marginLeft:  '8px'\n  });\n  cancelBtn.addEventListener('click', () => {\n    document.body.removeChild(overlay);\n    onCancel?.();\n  });\n  box.appendChild(cancelBtn);\n\n  // 5) Attach\n  overlay.appendChild(box);\n  document.body.appendChild(overlay);\n}\n\n// Convenience wrappers\nexport function showInfo(message, onOk, onCancel)  { showDialog('info',  message, onOk, onCancel); }\nexport function showError(message, onOk, onCancel) { showDialog('error', message, onOk, onCancel); }", "import { map } from \"../editor.js\";\nimport { showInfo } from \"../dialogBox.js\";   // safe\u2011optional\nimport { refreshViewport } from \"../draw.js\";\nimport { BuildNavigationTree } from \"./sideMenuUI.js\";\nimport { treeSelection, setLocationId } from \"../selection.js\";\n\nexport let backgroundImage;\n\n\n\nexport function initLayersUI() {\n    backgroundImage = new Image();\n\n\n    const deleteLayer = document.getElementById('deleteLayer');\n    deleteLayer.addEventListener(\"click\", (evt) => {\n        const selectionData = currentGroupLayerId();\n        if (!selectionData) return null;\n\n        showInfo(\n            \"Are you sure you want to delete this layer?\",\n            () => {\n                removeLayer(selectionData.groupId, selectionData.layerId);\n                BuildNavigationTree();\n                updateLayersUI();\n            },\n            null\n        );\n    });\n\n    // Grab references if you haven\u2019t already:\n    const layerName = document.getElementById(\"layerName\");\n    layerName.style.marginBottom = '8px';\n    const bgWidthInput = document.getElementById(\"bgWidthInput\");\n    bgWidthInput.style.marginBottom = '8px';\n    const bgHeightInput = document.getElementById(\"bgHeightInput\");\n    bgHeightInput.style.marginBottom = '8px';\n    const bgOpacityInput = document.getElementById(\"bgOpacityInput\");\n    bgOpacityInput.style.marginBottom = '8px';\n    const bgOpacityValue = document.getElementById(\"bgOpacityValue\");\n    /* always fetch the latest selected  layer */\n\n    document\n        .querySelector(\".side-menu\")          // parent container\n        .addEventListener(\"click\", (e) => {\n            // const assignBtn     = e.target.closest(\".btn-assign\");\n            const bgAssignBtn = e.target.closest(\".btn-bg-assign\");\n            if (!bgAssignBtn) return;     // clicked elsewhere\n            const actionsEl = e.target.closest(\".field-group\");\n\n            /* ---------- \u201CAssign background\u201D ---------- */\n            if (bgAssignBtn) {\n                const fileInput = actionsEl.querySelector(\".bg-file-input\");\n                fileInput.click();                      // open chooser\n\n                fileInput.onchange = () => {\n                    const file = fileInput.files[0];\n                    if (!file) return;\n\n                    const reader = new FileReader();\n                    reader.onload = () => {\n                        const layer = currentLayer();\n                        if (!layer) return;\n                        layer.backgroundDataURI = reader.result;\n                        layer.backgroundFileName = file.name;\n                        // default opacity\n                        if (typeof layer.backgroundOpacity !== \"number\") {\n                            layer.backgroundOpacity = 1.0;\n                            document.getElementById(\"bgOpacityInput\").value = \"1\";\n                            // document.getElementById(\"bgOpacityValue\").textContent = \"1.00\";\n                        }\n                        updateLayersUI();\n                    };\n                    reader.readAsDataURL(file);\n                };\n            }\n        });\n\n\n    layerName.addEventListener(\"input\", (evt) => {\n        const layer = currentLayer();\n        if (!layer) return;\n\n        layer.name = evt.target.value;\n        BuildNavigationTree();\n    });\n\n    // ---------------------------------------------------\n    // 3) Handle \u201CWidth (world units)\u201D change\n    bgWidthInput.addEventListener(\"input\", (evt) => {\n        const layer = currentLayer();\n        if (!layer) return;\n        const val = parseFloat(evt.target.value);\n        if (!isNaN(val) && val >= 0) {\n            layer.backgroundWorldWidth = val;\n            refreshViewport();\n        }\n    });\n\n    // ---------------------------------------------------\n    // 4) Handle \u201CHeight (world units)\u201D change\n    bgHeightInput.addEventListener(\"input\", (evt) => {\n        const layer = currentLayer();\n        if (!layer) return;\n        const val = parseFloat(evt.target.value);\n        if (!isNaN(val) && val >= 0) {\n            layer.backgroundWorldHeight = val;\n            refreshViewport();\n        }\n    });\n\n    // ---------------------------------------------------\n    // 5) Handle \u201COpacity\u201D slider change\n    bgOpacityInput.addEventListener(\"input\", (evt) => {\n        const layer = currentLayer();\n        if (!layer) return;\n        const val = parseFloat(evt.target.value);\n        if (!isNaN(val) && val >= 0 && val <= 1) {\n            layer.backgroundOpacity = val;\n\n            refreshViewport();\n        }\n    });\n\n    updateLayersUI();\n}\n\n\nexport function updateLayersUI() {\n    const layerName = document.getElementById(\"layerName\");\n    const bgWidthInput = document.getElementById(\"bgWidthInput\");\n    const bgHeightInput = document.getElementById(\"bgHeightInput\");\n    const bgOpacityInput = document.getElementById(\"bgOpacityInput\");\n    // const layerOpacityInput = document.getElementById(\"layerOpacityInput\");\n    //  const bgOpacityValue = document.getElementById(\"bgOpacityValue\");\n    //  const bgPreview = document.getElementById(\"bgPreview\");\n    const bgFileName = document.getElementById(\"bgFileName\");\n    //  const worldUnitLabel = document.getElementById(\"worldunitlabel\");\n\n    const layer = currentLayer();\n    if (!layer) return;\n\n    layerName.value = layer.name;\n\n    // worldUnitLabel.textContent = \"Size (world units in \" + map.settings.unit + \") :\"\n\n    /* ----- number fields ----- */\n    bgWidthInput.value = layer.backgroundWorldWidth ?? \"\";\n    bgHeightInput.value = layer.backgroundWorldHeight ?? \"\";\n\n    // const op = typeof  layer.backgroundOpacity === \"number\" ?  layer.backgroundOpacity : 1;\n    bgOpacityInput.value = layer.backgroundOpacity;\n    //  layerOpacityInput.value = layer.layerOpacity;\n    // bgOpacityValue.textContent = layer.backgroundOpacity.toFixed(2);\n    // fl.textContent = layer.backgroundOpacity.toFixed(2);\n\n    /* ----- preview image ----- */\n    //  if (bgPreview) {\n    //   if (layer.backgroundFileName) {\n    // bgPreview.src = layer.backgroundDataURI;\n    bgFileName.value = layer.backgroundFileName || \"\";\n    //  bgPreview.classList.remove(\"hidden\");\n    //  } else {\n    //  bgPreview.src = \"\";\n    // bgFileName.textContent = \"\";\n    // bgPreview.classList.add(\"hidden\");\n    // }\n    //  }\n    //renderLayersList();\n    updateBackground();   // keep the canvas in sync\n}\n\n\n\nexport function updateBackground() {\n    const layer = currentLayer();\n    if (!layer) return;\n\n    const backgroundURI = layer.backgroundDataURI;\n\n    // console.log(\"backgroundURI\"+backgroundURI);\n\n    if (!backgroundImage) backgroundImage = new Image();\n    if (backgroundURI) {\n        backgroundImage.src = backgroundURI;\n        backgroundImage.onload = () => {\n            // Once the image is ready, force a redraw so the background appears immediately\n            refreshViewport();\n        };\n    } else {\n        backgroundImage = null;\n        refreshViewport();\n    }\n}\n\nfunction currentLayer() {\n    if (!treeSelection || treeSelection.length === 0) return null;\n    const sel = treeSelection.at(-1);\n\n    const group = map.groups[sel.groupId];\n    if (!group) return null;\n\n    const layer = group.layers[sel.layerId];\n    if (!layer) return null;\n    return layer\n}\n\nfunction currentGroupLayerId() {\n    if (!treeSelection || treeSelection.length === 0) return null;\n    const sel = treeSelection.at(-1);\n    if (sel === -1) return null;\n\n    return { groupId: sel.groupId, layerId: sel.layerId }\n}\n\nfunction removeLayer(gId, layId) {\n    // Remove the layer from its group\n    if (gId && map.groups[gId]) {\n        delete map.groups[gId].layers[layId];\n    }\n\n    // Remove any points belonging to the deleted layer\n    Object.keys(map.points).forEach(pId => {\n        if (map.points[pId].layerId === layId) {\n            delete map.points[pId];\n        }\n    });\n\n    // Remove any location belonging to the deleted layer\n    Object.keys(map.locations).forEach(lId => {\n        if (map.locations[lId].layerId === layId) {\n            delete map.locations[lId];\n        }\n    });\n\n    // Clear selection if it was this layer\n    // if (layerId === layId) {\n    // setLayerId?.(null);\n    setLocationId(null);\n    treeSelection.length = 0;\n    //  }\n    // Rebuild the tree, show group settings, and re-open the group\n    //  const navRoot = parentUL.closest(\"#navTree\");\n    //  buildNavTree(map, navRoot);\n    // updateSideMenuUI(\"group\");\n\n}", "import { SelectionMode } from \"./models/models.js\";\nimport { styleOrder } from \"../shared/models.js\";\nimport { createNavigator } from \"./navigation.js\";//\nimport { mousePos, getCurrentState, FSM_STATES, splineTransform } from \"./editing/state.js\";\nimport { map, isGrid, isPreview, isDebug } from \"./editor.js\";\nimport { backgroundImage } from \"./UI/layerUI.js\";\nimport { lineIds, pointIds, polygonIds, currentSelectionMode, locationId, treeSelection } from \"./selection.js\";\nimport { updateSideMenuUI } from \"./UI/sideMenuUI.js\";\nimport { addNewLocation } from \"./UI/toolsMenu.js\";\n\n\n\n// adjust path as needed\nexport let canvasBackground = null;\nexport let canvasSelection = null;\nexport let canvasMain = null;\nexport let canvasOverlay = null;\nexport let canvasGrid = null;\nexport let navigation = null;\n\n\nconst size = 24;\n\nexport let grid = new Map();          // key = \"ix,iz\"  \u2192 array<PointModel>\n\nexport let doorNode1Position = {};\nexport let doorNode2Position = {};\n//export let doorWidth = 2;\n\nlet bctx = null;\nlet sctx = null;\nlet ctx = null;\nlet gctx = null;\nexport let octx = null;\n\nlet scale = null;\nlet pan = {};\n\n\nexport let pickColorMap = {};      // \"#RRGGBB\" \u2192 polygonId\nlet nextPickIndex = 0;\n\nconst selectableColor = 'rgb(237, 134, 18)'\nconst pathColor = 'rgb(18, 237, 113)'\nconst twinLinkColor = 'rgba(245, 161, 16, 1)'\nconst polygonSelectedColor = 'rgba(229, 193, 127, 1)'\nconst standbyColor = '#7F7F7F';  // neutral medium-grey\nconst standbyPointColor = '#454545ff';  // neutral medium-grey\nconst standbyLineColor = '#a4a4a4ff';  // neutral medium-grey\nconst sharedPointColor = \"rgb(246, 30, 195)\";  // neutral medium-grey\nconst selectedColor = \"rgb(230, 44, 44)\";  // neutral medium-grey\nconst groupColor = \"rgb(240, 240, 240)\";  // neutral medium-grey\nconst iconCache = {};\n\n\n\nwindow.addEventListener(\"IndoorLens:modeChange\", e => {\n  const newMode = e.detail.mode;\n  // now you know the mode flipped\u2014update your drawing logic:\n  if (newMode != FSM_STATES.ADD_POINT) {\n    octx.setTransform(1, 0, 0, 1, 0, 0);\n\n    // clear the full canvas\n    octx.clearRect(0, 0, canvasOverlay.width, canvasOverlay.height);\n  }\n});\n\n/** give the module a canva  let circlePos = null;s *after* it exists in the DOM */\nexport function initCanvas(_canvasBackground, _canvasSelection, _canvasMain, _canvasOverlay, _canvasGrid) {\n  canvasBackground = _canvasBackground;\n  canvasSelection = _canvasSelection;\n  canvasMain = _canvasMain;\n  canvasOverlay = _canvasOverlay;\n  canvasGrid = _canvasGrid;\n\n  bctx = canvasBackground.getContext(\"2d\");\n  sctx = canvasSelection.getContext(\"2d\");\n  ctx = canvasMain.getContext(\"2d\");\n  octx = canvasOverlay.getContext(\"2d\");\n  gctx = canvasGrid.getContext(\"2d\");\n\n\n  if (document.readyState === 'complete') {\n    resizeAllCanvases();\n  } else {\n    window.addEventListener('load', resizeAllCanvases, { once: true });\n  }\n\n  // Clear any previous overlay content\n  bctx.clearRect(0, 0, canvasBackground.width, canvasBackground.height);\n  sctx.clearRect(0, 0, canvasSelection.width, canvasSelection.height);\n  gctx.clearRect(0, 0, canvasGrid.width, canvasGrid.height);\n  octx.clearRect(0, 0, canvasOverlay.width, canvasOverlay.height);\n\n\n  window.addEventListener(\"resize\", resizeAllCanvases);\n\n  const selecetdImg = new Image();\n  selecetdImg.src = \"/Images/Pin.png\";                 // absolute path avoids relative issues\n  iconCache.selectedLocation = selecetdImg;\n  const standbyImg = new Image();\n  standbyImg.src = \"/Images/StandbyLocation.png\";\n  iconCache.standbyLocation = standbyImg;\n  const keyImg = new Image();\n  keyImg.src = \"/Images/Key.png\";\n  iconCache.accessPoint = keyImg;\n  const portalImg = new Image();\n  portalImg.src = \"/Images/Portal.png\";\n  iconCache.portal = portalImg;\n\n  /* --------------------------------------------------------------\n     Spawn map centred in the canvas on first load\n  ----------------------------------------------------------------*/\n  const dpr = window.devicePixelRatio || 1;\n  const rect = canvasMain.getBoundingClientRect();\n\n  // Buffer\u2011pixel half\u2011size of the canvas\n  const screenCX = (rect.width * dpr) / 2;\n  const screenCY = (rect.height * dpr) / 2;\n\n  // World\u2011space centre of the current map\n\n\n  // Translate so that world\u2011centre appears at screen\u2011centre\n  const initialPan = {\n    dx: screenCX,\n    dy: screenCY\n  };\n\n  // Create the navigation with that initial pan\n  navigation = createNavigator(canvasMain, {\n    initialPan,\n    onUpdate: refreshViewportPure\n  });\n}\n\n\n// Your canvas drawing function\nfunction refreshViewportPure(viewTransform) {\n  // Sync legacy globals for code that still reads them\n  scale = viewTransform.scale;\n  pan.x = viewTransform.dx;\n  pan.y = viewTransform.dy;\n  // Clear canvas\n\n  backgroundCanvasNav();\n  rgbSelectionCanvasNav();\n  mainCanvasNav();\n  gridCanvasNav();\n\n  //overlayCanvasNav();\n}\n\nexport function refreshViewport() {\n  // Clear canvas\n  if (!navigation) return;\n  const viewTransform = navigation.getTransform();\n  if (!viewTransform) return;\n  // Sync legacy globals for code that still reads them\n  scale = viewTransform.scale;\n  pan.x = viewTransform.dx;\n  pan.y = viewTransform.dy;\n\n  backgroundCanvasNav();\n  rgbSelectionCanvasNav();\n  mainCanvasNav();\n  gridCanvasNav();\n  //overlayCanvasNav();\n}\nexport function resetViewport() {\n  const container = canvasMain.parentElement;\n  const rect = container.getBoundingClientRect();\n  const newW = rect.width * (window.devicePixelRatio || 1);\n  const newH = rect.height * (window.devicePixelRatio || 1);\n\n  canvasMain.width = newW;\n  canvasMain.height = newH;\n\n  requestAnimationFrame(() => {\n    // \u2026 your existing scale/dx/dy math and navigation.setTransform() \u2026\n    centerView(10);\n  });\n\n}\n\nfunction mainCanvasNav() {\n  ctx.setTransform(1, 0, 0, 1, 0, 0);\n  ctx.clearRect(0, 0, canvasMain.width, canvasMain.height);\n  ctx.save();\n  ctx.setTransform(scale, 0, 0, scale, pan.x, pan.y);\n  drawMap();\n  ctx.restore();\n}\n\nfunction overlayCanvasNav() {\n  octx.setTransform(1, 0, 0, 1, 0, 0);\n  octx.clearRect(0, 0, canvasOverlay.width, canvasOverlay.height);\n  octx.save();\n  octx.setTransform(scale, 0, 0, scale, pan.x, pan.y);\n  drawOverlay();\n  octx.restore();\n}\n\nfunction gridCanvasNav() {\n  gctx.setTransform(1, 0, 0, 1, 0, 0);\n  gctx.clearRect(0, 0, canvasGrid.width, canvasGrid.height);\n  if (isGrid) {\n    gctx.save();\n    drawGrid();\n    gctx.restore();\n  }\n}\n\nfunction rgbSelectionCanvasNav() {\n  sctx.setTransform(1, 0, 0, 1, 0, 0);\n  sctx.clearRect(0, 0, canvasSelection.width, canvasSelection.height);\n  if (isGrid) {\n    sctx.save();\n    sctx.setTransform(scale, 0, 0, scale, pan.x, pan.y);\n    drawRGBSelection();\n    sctx.restore();\n  }\n}\n\nexport function backgroundCanvasNav() {\n  bctx.setTransform(1, 0, 0, 1, 0, 0);\n  bctx.clearRect(0, 0, canvasBackground.width, canvasBackground.height);\n  bctx.save();\n  bctx.setTransform(scale, 0, 0, scale, pan.x, pan.y);\n  drawBackground();\n  bctx.restore();\n\n}\n\n\n\nexport function buildMap() {\n  // Clear all points' associated lines in one pass\n  for (const point of Object.values(map.points)) {\n    if (point) point.associatedLines = [];\n  }\n\n  // Predefine style categories\n  const lineStyleIds = ['none', 'innerwall', 'outerwall'];\n  const polyStyleIds = ['floor', 'public', 'private'];\n  // grid = new Map();\n  // Initialize layers for every layer\n  for (const group of Object.values(map.groups)) {\n    if (!group) continue;\n    for (const layer of Object.values(group.layers)) {\n      if (!layer) continue;\n      layer.linesByStyle = {};\n      for (const style of lineStyleIds) {\n        layer.linesByStyle[style] = [];\n      }\n      layer.polygonsByStyle = {};\n      for (const style of polyStyleIds) {\n        layer.polygonsByStyle[style] = [];\n      }\n    }\n  }\n\n  // Populate layers and build associations\n  for (const [groupId, group] of Object.entries(map.groups)) {\n    if (!group) continue;\n    for (const [layerId, layer] of Object.entries(group.layers)) {\n      if (!layer) continue;\n\n      // Lines\n      for (const [lineId, line] of Object.entries(layer.lines || {})) {\n        if (!line) continue;\n        for (const pid of line.pointIds) {\n          const pt = map.points[pid];\n          pt.groupId = groupId;\n          pt.layerId = layerId;\n          //  if (!pt.layerIds.includes(layerId)) pt.layerIds.push(layerId);\n          if (pt && !pt.isLocation) {\n            pt.associatedLines.push(lineId);\n            // if (group.enabled && layer.enabled) {\n            //   gridInsert(pid);\n            // }\n          }\n        }\n        const styleLineIds = layer.linesByStyle[line.styleId];\n        if (styleLineIds) styleLineIds.push(lineId);\n      }\n\n      // Polygons\n      for (const [polyId, poly] of Object.entries(layer.polygons || {})) {\n        const stylePolygonIds = layer.polygonsByStyle[poly.styleId];\n        if (stylePolygonIds) stylePolygonIds.push(polyId);\n      }\n    }\n\n    //  console.log(\"rebuilt map \"+ JSON.stringify(map));\n  }\n}\n\nfunction refreshGrid() {\n  grid = new Map();\n  treeSelection.forEach(sel => {\n    if (!sel.groupId) return;\n    const group = map.groups[sel.groupId];\n    if (!sel.layerId) return;\n    const layer = group.layers[sel.layerId];\n    Object.entries(layer.lines ?? {}).forEach(([lineId, line]) => {\n      if (!line) return;\n      line.pointIds.forEach(pid => {\n        const point = map.points[pid];\n        if (!point) return;\n        gridInsert(pid);\n      });\n    });\n  });\n\n}\n\nexport function getSnapPointId(mousePos) {\n  let snapPointId = null;\n  // if (mousePos && pointIds.length !== 0) {\n  if (mousePos) {\n    refreshGrid();\n    snapPointId = findSnapTargetFast(mousePos);\n  }\n  return snapPointId;\n}\n\n/**\n * Ray\u2011casting point\u2011in\u2011polygon test on the X\u2011Z plane.\n * Returns true when the given world\u2011space point lies inside the polygon.\n *\n * @param {{x:number, z:number}} point  \u2013 mousePos in world units\n * @param {Array} poly                  \u2013 array of PointModel or {x,z} verts\n */\nexport function isPointInPoly(point, poly) {\n  if (!point) return false;\n  const px = point.x;\n  const py = point.z ?? point.y;\n\n  let inside = false;\n  for (let i = 0, j = poly.length - 1; i < poly.length; j = i++) {\n    const pi = poly[i].position ?? poly[i];\n    const pj = poly[j].position ?? poly[j];\n\n    const xi = pi.x, yi = pi.z ?? pi.y;\n    const xj = pj.x, yj = pj.z ?? pj.y;\n\n    const intersect =\n      (yi > py) !== (yj > py) &&\n      px < ((xj - xi) * (py - yi)) / (yj - yi) + xi;\n    if (intersect) inside = !inside;\n  }\n  return inside;\n}\n\n/* ---------- main draw loop ---------- */\nexport function drawMap() {\n  if (!map.groups) return;          // nothing to draw yet\n  if (isPreview) renderLayer();\n  else {\n\n    ctx.save();\n    //group entourage shape drawing\n    Object.entries(map.groups).forEach(([gId, group]) => {\n      // if(treeSelection.some(sel=>(sel.groupId!==gId)))return;\n      Object.entries(group.layers).forEach(([layId, layer]) => {\n        const style = map.styles?.[\"floor\"];\n        if (style && !style.enabled) return;\n\n        const stylePolygonIds = layer.polygonsByStyle?.[\"floor\"];\n        if (!stylePolygonIds) return;\n\n        stylePolygonIds.forEach(polyId => {\n          const polygon = layer.polygons[polyId];\n          ctx.fillStyle = groupColor;\n          ctx.beginPath();\n          polygon?.pointIds.forEach((pId, i) => {\n            const point = map.points[pId];\n            if (!point) return;\n            i === 0 ? ctx.moveTo(point.position.x, point.position.z) : ctx.lineTo(point.position.x, point.position.z);\n          });\n          ctx.closePath();\n          ctx.fill();\n        });\n      });\n    });\n    ctx.restore();\n\n\n\n    /*-----------Draw selection--------*/\n\n    treeSelection.forEach((sel, i) => {\n      const group = map.groups[sel.groupId];\n      if (!group) return;\n      const layer = group.layers[sel.layerId];\n      if (!layer) return;\n\n      if (i === (treeSelection.length - 1)) {\n        drawGizmos(layer, true);\n        drawLocations(layer);\n      } else {\n        drawGizmos(layer, false);\n      }\n\n\n    });\n  }\n}\n\n\nfunction renderLayer() {\n\n  ctx.save();\n  //group entourage shape drawing\n  Object.entries(map.groups).forEach(([gId, group]) => {\n    // if(treeSelection.some(sel=>(sel.groupId!==gId)))return;\n    Object.entries(group.layers).forEach(([layId, layer]) => {\n      const stylePolygonIds = layer.polygonsByStyle?.[\"floor\"];\n      if (!stylePolygonIds) return;\n\n      stylePolygonIds.forEach(polyId => {\n        const polygon = layer.polygons[polyId];\n        ctx.fillStyle = groupColor;\n        ctx.beginPath();\n        polygon.pointIds.forEach((pId, i) => {\n          const point = map.points[pId];\n          i === 0 ? ctx.moveTo(point.position.x, point.position.z) : ctx.lineTo(point.position.x, point.position.z);\n        });\n        ctx.closePath();\n        ctx.fill();\n      });\n    });\n  });\n  ctx.restore();\n\n  if (!treeSelection || treeSelection.length === 0) return;\n  const sel = treeSelection.at(-1);\n\n  const group = map.groups[sel.groupId];\n  if (!group) return;\n\n  const layer = group.layers[sel.layerId];\n  if (!layer) return;\n\n  styleOrder.forEach(styleId => {\n    if (styleId === 'none') return;\n    const stylePolygonIds = layer.polygonsByStyle?.[styleId];\n    if (!stylePolygonIds) return;\n\n    const style = map.styles?.[styleId];\n    // restore real fillStyle below\n    if (style && !style.enabled) return;\n    ctx.fillStyle = style.color;\n\n    stylePolygonIds.forEach(polygonId => {\n      const polygon = layer.polygons[polygonId];\n      if (!polygon) return;\n\n\n      ctx.beginPath();\n      polygon.pointIds.map(g => map.points[g]).forEach((p, i) => {\n        const { x, z } = p.position;\n        i === 0 ? ctx.moveTo(x, z) : ctx.lineTo(x, z);\n      });\n      ctx.closePath();\n      ctx.fill();\n    });\n  });\n\n  //ctx.globalAlpha = (currentSelectionMode === SelectionMode.LINE) ? ctx.globalAlpha : 0.3;\n\n  styleOrder.forEach(styleId => {\n    if (styleId === 'none') return;\n    const styleLineIds = layer.linesByStyle?.[styleId];\n    if (!styleLineIds) return;\n\n    //  Object.entries(layer.linesByStyle ?? {}).forEach(([styleId, styleLineIds]) => {\n    styleLineIds.forEach(lineId => {\n      const line = layer.lines[lineId];\n      if (!line) return;\n\n      const style = map.styles?.[styleId];\n\n\n      if (style && !style.enabled) return;\n\n      const points = line.pointIds.map(id => map.points[id]);\n      if (!points) return;\n      //---- Segments Drawing---- \n      if (points.length >= 2) {\n\n        ctx.lineWidth = style.lineThickness / scale;\n        ctx.strokeStyle = style.color;\n        ctx.beginPath();\n        ctx.moveTo(points[0].position.x, points[0].position.z);\n        points.slice(1).forEach(p => ctx.lineTo(p.position.x, p.position.z));\n\n        ctx.stroke();\n      }\n    });\n  })\n\n}\n\n\nfunction drawLocations(layer) {\n\n  if (currentSelectionMode !== SelectionMode.POINT) return;\n  ctx.globalAlpha = 1;\n\n  layer.locationIds.forEach(locId => {\n    const location = map.locations[locId];\n    if (!location) return;\n\n    const locationPoint = map.points[location.pointId];\n    if (!locationPoint) return;\n    /* choose which icon to draw */\n    const icon = (locId === locationId) ? iconCache.selectedLocation : iconCache.standbyLocation;\n    if (!icon || !icon.complete) return;   // skip until loaded\n\n    // world \u2192 screen transform\n    const size = (locId === locationId) ? 30 : 24;\n    ctx.save();\n    ctx.translate(locationPoint.position.x, locationPoint.position.z);  // move to icon position\n\n    ctx.scale(1 / scale, 1 / scale);\n\n    ctx.drawImage(icon, -size / 2, -size / 2, size, size);\n    ctx.restore();\n\n    // LABELS -------------------------------------------------\n\n    const label = location.name ?? location.locationType;\n    ctx.save();\n    ctx.translate(locationPoint.position.x, locationPoint.position.z);  // move to icon position\n    ctx.scale(1 / scale, 1 / scale);\n\n    ctx.font = \"20px Arial\";\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\";\n    ctx.fillStyle = \"#000\";\n    ctx.fillText(label, 0, -30);\n    ctx.restore();\n\n    if (locId === locationId) {\n      location.accessPointIds.forEach(pid => {\n        const point = map.points[pid];\n        if (!point) return;\n\n\n        ctx.save();\n        ctx.translate(point.position.x + 1, point.position.z);  // move to icon position\n        ctx.scale(1 / scale, 1 / scale);\n        ctx.drawImage(iconCache.accessPoint, -size / 2, -size / 2, size, size);\n        ctx.restore();\n\n        //  if (point.twins && point.twins.length !== 0) {\n\n        //    ctx.save();\n        //    ctx.translate(point.position.x, point.position.z );  // move to icon position\n        //    ctx.scale(1 / scale, 1 / scale);\n        //    ctx.drawImage(iconCache.portal, -size / 2, -size / 2, size, size);\n        //    ctx.restore();\n\n        //  }else{\n\n        ctx.fillStyle = pathColor;\n        const dotRadius = 6 / scale;\n        ctx.beginPath();\n        ctx.arc(point.position.x, point.position.z, dotRadius, 0, Math.PI * 2);\n        ctx.fill();\n        // }\n\n\n\n      });\n    }\n\n  });\n}\n\n\n\nfunction drawGizmos(layer, highlight) {\n\n  ctx.save();\n\n  // const isLineMode = (currentSelectionMode === SelectionMode.LINE);\n  const isPointMode = (currentSelectionMode === SelectionMode.POINT);\n  // const isPolygonMode = (currentSelectionMode === SelectionMode.POLYGON);\n\n  /*---------Polygons----------*/\n  if (!highlight) ctx.globalAlpha = 0.3;\n  else ctx.globalAlpha = 1;\n\n  let polygonColor;\n  styleOrder.forEach(styleId => {\n    const stylePolygonIds = layer.polygonsByStyle?.[styleId];\n    if (!stylePolygonIds) return;\n\n    const style = map.styles?.[styleId];\n\n    if (style && !style.enabled) return;\n    stylePolygonIds.forEach(polygonId => {\n      const polygon = layer.polygons[polygonId];\n      if (!polygon) return;\n\n      // \u2500\u2500 Choose polygon fill colour \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n      polygonColor = style.color;\n      ctx.fillStyle = polygonColor;\n\n      ctx.beginPath();\n      polygon.pointIds.map(g => map.points[g]).forEach((p, i) => {\n        if (!p) return;\n        const { x, z } = p.position;\n        i === 0 ? ctx.moveTo(x, z) : ctx.lineTo(x, z);\n      });\n      // ctx.closePath();\n      ctx.fill();\n    });\n  });\n\n  /*---------Lines----------*/\n\n  let lineColor = standbyLineColor;\n  Object.entries(layer.lines ?? {}).forEach(([lineId, line]) => {\n    if (!line) return;\n    preProcessBranch(layer, lineId, line.pointIds);\n    //---- Segments Drawing----\n    const points = line.pointIds.map(id => map.points[id]);\n    if (points.length >= 2) {\n\n      ctx.strokeStyle = lineColor;\n      if (isPointMode && line.styleId === \"none\") {\n        ctx.strokeStyle = pathColor;\n      }\n      ctx.lineWidth = 3 / scale;\n      ctx.beginPath();\n      // draw each segment separately\n      for (let i = 0; i < points.length - 1; i++) {\n        const a = points[i].position;\n        const b = points[i + 1].position;\n\n        ctx.moveTo(a.x, a.z);\n        ctx.lineTo(b.x, b.z);\n        ctx.stroke();\n      }\n    }\n\n\n    /*---------Points----------*/\n    let pointColor;\n    // if (!highlight) ctx.globalAlpha *= 0.5;\n    pointColor = standbyPointColor;\n\n    line.pointIds.forEach(pid => {\n      const point = map.points[pid];\n      if (!point) return;\n\n      const lineCount = Array.isArray(point.associatedLines)\n        ? point.associatedLines.length\n        : 0;\n      const dotRadius =   4  / scale;\n\n      // \u2500\u2500 Choose point fill colour \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n      ctx.fillStyle =   (lineCount > 1 )? sharedPointColor : pointColor;\n      ctx.beginPath();\n      //  ctx.setLineDash([]);\n         ctx.arc(point.position.x, point.position.z, dotRadius, 0, Math.PI * 2);\n       // ctx.closePath();\n      ctx.fill();\n\n      //Bridge Icons\n      if (highlight && point.twins && point.twins.length !== 0) {\n        ctx.save();\n        ctx.translate(point.position.x, point.position.z - 1);  // move to icon position\n        ctx.scale(1 / scale, 1 / scale);\n        ctx.drawImage(iconCache.portal, -size / 2, -size / 2, size, size);\n        ctx.restore();\n\n\n        ctx.strokeStyle = twinLinkColor;\n        ctx.lineWidth = 3 / scale;\n        ctx.beginPath();\n       \n        ctx.setLineDash([0.2, 0.2]);\n        // draw each segment separately\n        for (let i = 0; i < point.twins.length; i++) {\n          const twinPointId = point.twins[i];\n          const twinPoint = map.points[twinPointId];\n          if (!twinPoint) continue;\n          const a = point.position;\n          const b = twinPoint.position;\n\n          ctx.moveTo(a.x, a.z);\n          ctx.lineTo(b.x, b.z);\n          ctx.stroke();\n        }\n      }\n      ctx.setLineDash([]);\n      if (isDebug && !point.locationId) { // ---- label just above the dot ----\n\n        const cx = point.position.x;\n        const cy = point.position.z;\n\n        ctx.save();\n        ctx.translate(cx, cy);  // move to icon position\n        ctx.scale(1 / scale, 1 / scale);\n        ctx.beginPath();\n        ctx.font = \"20px Arial\";\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillStyle = \"#000\";\n        ctx.fillText(lineCount.toString(), cx / scale, (cy / scale) - 15);\n        ctx.restore();\n      }\n    });\n  });\n\n  if (highlight) drawSelection(layer);\n  /* --- restore the context saved at the very top of drawGizmos() --- */\n  ctx.restore();\n}\n\nfunction drawSelection(layer) {\n  const isLineMode = (currentSelectionMode === SelectionMode.LINE);\n  const isPointMode = (currentSelectionMode === SelectionMode.POINT);\n  const isPolygonMode = (currentSelectionMode === SelectionMode.POLYGON);\n\n  ctx.save();\n  polygonIds.forEach(polygonId => {\n    const polygon = layer.polygons[polygonId];\n    if (!polygon) return;\n\n    ctx.globalAlpha = 0.4;\n    let color;\n    if (isPolygonMode) {\n      color = polygonSelectedColor;\n    }\n    else if (isLineMode) {\n      color = polygonSelectedColor;\n    }\n    else if (isPointMode) {\n      if (locationId) {\n        const selectedLocation = map.locations[locationId];\n        if (selectedLocation && selectedLocation.polygonIds.includes(polygonId)) {\n          color = selectedColor;\n          ctx.globalAlpha = 0.2;\n        }\n      }\n    }\n    ctx.fillStyle = color;\n    ctx.beginPath();\n    polygon.pointIds.map(g => map.points[g]).forEach((p, i) => {\n      if (!p) return;\n      const { x, z } = p.position;\n      i === 0 ? ctx.moveTo(x, z) : ctx.lineTo(x, z);\n    });\n\n    ctx.fill();\n  });\n  ctx.restore();\n\n  /* --------- Highlight selected lines (single pass) --------- */\n  if (lineIds.length && isLineMode) {\n    ctx.save();\n    ctx.lineWidth = 6 / scale;\n    ctx.strokeStyle = selectedColor;\n\n    lineIds.forEach(lId => {\n      const selLine = layer.lines[lId];\n      if (!selLine) return;\n      let color;\n      if (isLineMode) {\n        ctx.globalAlpha = 1;\n        color = selectableColor;                          // regular, selectable node\n      }\n      else if (isPolygonMode) {\n        ctx.globalAlpha = 0.4;\n        color = standbyColor;                          // regular, selectable node\n        //return;\n      }\n      else if (isPointMode) {\n        color = standbyColor;\n        ctx.globalAlpha = 0.4;\n      }\n\n      ctx.strokeStyle = color;\n      ctx.beginPath();\n      const firstPt = map.points[selLine.pointIds[0]];\n      if (!firstPt) return;\n      ctx.moveTo(firstPt.position.x, firstPt.position.z);\n\n      for (let i = 1; i < selLine.pointIds.length; i++) {\n        const p = map.points[selLine.pointIds[i]];\n        if (!p) continue;\n        ctx.lineTo(p.position.x, p.position.z);\n      }\n      ctx.stroke();\n    });\n    ctx.restore();\n  }\n\n  /* --------- Highlight selected points (single pass) --------- */\n  if (pointIds.length && isPointMode) {\n    ctx.save();\n    ctx.strokeStyle = selectedColor;\n    ctx.lineWidth = 2 / scale;\n    const highlightRadius = 10 / scale;\n    let color;\n    pointIds.forEach(pid => {\n      const pt = map.points[pid];\n      if (!pt) return;\n\n\n      if (isPointMode) {\n        ctx.globalAlpha = 1;\n        color = selectableColor;                          // regular, selectable node\n      }\n      else if (isLineMode) {\n        ctx.globalAlpha = 0.4;\n        if (lineCount > 1) {\n          color = sharedPointColor;                         // node shared by \u22652 lines\n        } else {\n          color = standbyColor;\n        }\n      } else if (isPolygonMode) {\n        return;\n      }\n\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.arc(pt.position.x, pt.position.z, highlightRadius, 0, Math.PI * 2);\n      ctx.stroke();\n\n      //  if (isDebug) {\n      //    const cx = pt.position.x;\n      //    const cy = pt.position.z;\n      //\n      //    ctx.save();\n      //    ctx.translate(cx, cy);  // move to icon position\n      //    ctx.scale(1 / scale, 1 / scale);\n      //    ctx.beginPath();\n      //    ctx.font = \"20px Arial\";\n      //    ctx.textAlign = \"center\";\n      //    ctx.textBaseline = \"middle\";\n      //    ctx.fillStyle = \"#000\";\n      //    ctx.fillText(pid, cx / scale, (cy / scale) - 15);\n      //    ctx.restore();\n      //  }\n    });\n    ctx.restore();\n  }\n\n}\n\n\n\nexport function drawRGBSelection() {\n  if (!treeSelection || treeSelection.length === 0) return;\n  const sel = treeSelection.at(-1);\n\n  const group = map.groups[sel.groupId];\n  if (!group) return;\n\n  const layer = group.layers[sel.layerId];\n  if (!layer) return;\n\n  // Reset pick map and start index at 1 to avoid rgb(0,0,0)\n  pickColorMap = {};\n  nextPickIndex = 1;\n\n  //--- Rooms color selection\n  styleOrder.forEach(styleId => {\n    const stylePolygonIds = layer.polygonsByStyle?.[styleId];\n    if (!stylePolygonIds) return;\n    stylePolygonIds.forEach(polygonId => {\n      const polygon = layer.polygons[polygonId];\n      if (!polygon) return;\n      // generate a unique pick\u2010color for this polygon\n      const colorNum = nextPickIndex++;\n      const r = (colorNum >> 16) & 0xFF;\n      const g = (colorNum >> 8) & 0xFF;\n      const b = colorNum & 0xFF;\n      const pickColor = `rgb(${r},${g},${b})`;\n\n      pickColorMap[pickColor] = polygonId;\n\n      // --- pick\u2010color pass: draw the same polygon in pickColor ---\n      sctx.beginPath();\n      polygon.pointIds.map(g => map.points[g])?.forEach((p, i) => {\n        if (!p) return;\n        const { x, z } = p.position;\n        if (i === 0) sctx.moveTo(x, z);\n        else sctx.lineTo(x, z);\n      });\n\n      sctx.closePath();\n      sctx.fillStyle = pickColor;\n      sctx.fill();\n    });\n  });\n\n}\n\nfunction drawBackground() {\n  if (!treeSelection || treeSelection.length === 0) return;\n  const sel = treeSelection.at(-1);\n\n  const group = map.groups[sel.groupId];\n  if (!group) return;\n\n  const layer = group.layers[sel.layerId];\n  if (!layer) return;\n\n  bctx.globalAlpha = layer.backgroundOpacity;\n\n  if (\n    backgroundImage &&\n    backgroundImage.complete &&\n    backgroundImage.naturalWidth > 0 &&\n    layer &&\n    layer.backgroundWorldWidth &&\n    layer.backgroundWorldHeight\n  ) {\n    const worldW = layer.backgroundWorldWidth;\n    const worldH = layer.backgroundWorldHeight;\n\n    // Since we've already translated to (pivotX, pivotY) \u2192 world(0,0) in buffer\u2010pixels,\n    // drawing at (\u2212worldW/2, \u2212worldH/2) places the image's center at world(0,0).\n    bctx.drawImage(\n      backgroundImage,\n      -worldW / 2,\n      -worldH / 2,\n      worldW,\n      worldH\n    );\n  }\n\n\n}\n\n\n// draw.js\n\nexport function drawGrid() {\n  // const { scale, dx, dy } = viewTransform;\n\n  /* ---------- canvas / dpi ---------- */\n  const dpr = window.devicePixelRatio || 1;\n  const cwBuf = canvasGrid.width;   // buffer-px width  (already \u00D7dpr)\n  const chBuf = canvasGrid.height;  // buffer-px height\n\n  /* ---------- clear layer ---------- */\n  gctx.setTransform(1, 0, 0, 1, 0, 0);\n  gctx.clearRect(0, 0, cwBuf, chBuf);\n\n  /* ---------- figure out world bounds now visible ----------\n     screenX = worldX * scale + dx     (all in *buffer* pixels)\n     \u2192 worldX = (screenX \u2212 dx) / scale\n  ----------------------------------------------------------- */\n  const invS = 1 / scale;\n  const minX = Math.floor((-pan.x) * invS);\n  const maxX = Math.ceil((cwBuf - pan.x) * invS);\n  const minY = Math.floor((-pan.y) * invS);\n  const maxY = Math.ceil((chBuf - pan.y) * invS);\n\n  /* ---------- apply the pan/zoom so we can draw in world units ---------- */\n  gctx.setTransform(scale, 0, 0, scale, pan.x, pan.y);\n\n  /* ---------- grid style & fade ---------- */\n  const FADE_START = 4, FADE_END = 6;\n  let fade = (scale - FADE_START) / (FADE_END - FADE_START);\n  fade = Math.max(0, Math.min(0.3, fade));\n\n  const invScale = 1 / scale;      // keep strokes 1 px on-screen\n  gctx.lineWidth = 1 * invScale;\n  gctx.strokeStyle = `rgba(140,140,140,${fade})`;\n\n  /* ---------- draw light grid every gridSize world-units ---------- */\n  const step = Math.abs(map.settings.gridSize) || 1;\n  const startX = Math.floor(minX / step) * step;\n  const startY = Math.floor(minY / step) * step;\n\n  gctx.beginPath();\n  for (let x = startX; x <= maxX; x += step) {\n    gctx.moveTo(x, minY);\n    gctx.lineTo(x, maxY);\n  }\n  for (let y = startY; y <= maxY; y += step) {\n    gctx.moveTo(minX, y);\n    gctx.lineTo(maxX, y);\n  }\n  gctx.stroke();\n\n  /* ---------- draw bold centre axes ---------- */\n  gctx.lineWidth = 2 * invScale;\n  gctx.strokeStyle = \"rgba(0,0,0,0.5)\";\n  gctx.beginPath();\n  gctx.moveTo(0, minY); gctx.lineTo(0, maxY);  // Y-axis\n  gctx.moveTo(minX, 0); gctx.lineTo(maxX, 0);  // X-axis\n  gctx.stroke();\n}\n\n\nexport function drawOverlay() {\n  // Only run overlay in ADD_POINT or ADD_DOOR modes\n  if (getCurrentState() !== FSM_STATES.ADD_POINT && getCurrentState() !== FSM_STATES.ADD_DOOR) return;\n  //if (getCurrentState() !== FSM_STATES.IDLE) return;\n\n  // drawNodeEdit();\n  // drawDoorEdit();\n  // drawNodeDetails();\n}\n\n\nexport function drawPointEdit() {\n\n  if (pointIds.length === 0) return;\n  if (!treeSelection || treeSelection.length === 0) return;\n  const sel = treeSelection.at(-1);\n\n  const group = map.groups[sel.groupId];\n  if (!group) return;\n\n  const layer = group.layers[sel.layerId];\n  if (!layer) return;\n\n  octx.setTransform(1, 0, 0, 1, 0, 0);\n  octx.clearRect(0, 0, canvasOverlay.width, canvasOverlay.height);\n  octx.save();\n  octx.setTransform(scale, 0, 0, scale, pan.x, pan.y);\n\n\n  const point = map.points[pointIds[0]];\n  const dotRadius = 6 / scale;\n  octx.fillStyle = selectedColor;\n  octx.beginPath();\n  octx.lineWidth = 2 / scale; // keep 2px on screen\n  octx.strokeStyle = selectedColor;\n  octx.moveTo(point.position.x, point.position.z);\n\n  const snapPointId = getSnapPointId(mousePos);\n  if (snapPointId) octx.lineTo(map.points[snapPointId].position.x, map.points[snapPointId].position.z);\n  else octx.lineTo(mousePos.x, mousePos.z);\n\n  octx.stroke();\n  octx.restore();\n\n\n}\n\nexport function drawDoorEdit() {\n\n  if (getCurrentState() === FSM_STATES.ADD_DOOR && splineTransform) {\n\n    if (!treeSelection || treeSelection.length === 0) return;\n    const sel = treeSelection.at(-1);\n\n    const group = map.groups[sel.groupId];\n    if (!group) return;\n\n    const layer = group.layers[sel.layerId];\n    if (!layer) return;\n\n    const line = layer.lines[splineTransform.lineId];\n    if (!line) return;\n\n    octx.setTransform(1, 0, 0, 1, 0, 0);\n    octx.clearRect(0, 0, canvasOverlay.width, canvasOverlay.height);\n    octx.save();\n    octx.setTransform(scale, 0, 0, scale, pan.x, pan.y);\n\n\n    const points = line.pointIds.map(pointId => map.points[pointId]);\n    if (points.length > 1) {\n      // 1) grab your three positions as simple {x, y, z} objects\n      const centerVert = { x: splineTransform.x, z: splineTransform.z };               // e.g. {x:\u2026, y:\u2026, z:\u2026}\n      const vert1 = points[splineTransform.segmentIndex].position;\n      const vert2 = points[splineTransform.segmentIndex + 1].position;\n\n\n      // 2) build the segment\u2010direction vector (in XZ)\n      let nx = vert2.x - vert1.x;\n      let nz = vert2.z - vert1.z;\n\n\n\n      // 4) normalize that normal vector (so its length = 1)\n      const len = Math.hypot(nx, nz);\n      if (len !== 0) {\n        nx /= len;\n        nz /= len;\n      } else {\n        // (degenerate segment: vert1===vert2.  You can just skip or pick a default normal)\n        nx = 0;\n        nz = 0;\n      }\n\n\n      // 3) segment length\n      const d = map.settings.gridSize;\n      const segLen = Math.hypot(nx * len, nz * len);   // or simply len from earlier\n      if (segLen < (d * 2)) {\n        doorNode1Position = null;\n        doorNode2Position = null;\n        return;\n      }\n      // 4) choose your desired offset d, but clamp to segLen/2 \u2212 \u03B5\n\n      // 5) scale by your desired \"offset\" distance (call it d)\n      // <-- how far you want each point from centerVert\n\n      const offsetX = nx * d;\n      const offsetZ = nz * d;\n\n      // 6) build the two offset\u2010points (above and below the segment)\n      doorNode1Position = {\n        x: centerVert.x + offsetX,\n        y: centerVert.y,        // keep same Y\n        z: centerVert.z + offsetZ\n      };\n\n      doorNode2Position = {\n        x: centerVert.x - offsetX,\n        y: centerVert.y,\n        z: centerVert.z - offsetZ\n      };\n\n\n      const dotRadius = 6 / scale;\n      octx.fillStyle = selectedColor;\n      octx.beginPath();\n      octx.arc(doorNode1Position.x, doorNode1Position.z, dotRadius, 0, Math.PI * 2);\n      octx.arc(doorNode2Position.x, doorNode2Position.z, dotRadius, 0, Math.PI * 2);\n      octx.fill();\n    }\n\n  }\n  octx.restore();\n}\n\n\n/* ------------------------------------------------------------------------\n * Zoom\u2011and\u2011pan the new Navigator so a set of world\u2011vertices fills the view.\n * (No rotation support \u2013\u2011 the new nav is 2\u2011D only.)\n *\n * @param {Array<{x:number,y?:number,z?:number}>} verts   \u2013 vertices in world units\n * @param {object} [options]\n * @param {number} [options.padding=250]        \u2013 screen padding in CSS\u2011px\n * @param {number} [options.duration=500]       \u2013 ms animation duration\n * @param {number} [options.minScale=0.5]       \u2013 clamp\n * @param {number} [options.maxScale=100]       \u2013 clamp\n * --------------------------------------------------------------------- */\nexport function focusOnVertices(\n  verts,\n  {\n    padding = 250,\n    duration = 500,\n    minScale = 0.5,\n    maxScale = 100\n  } = {}\n) {\n  if (!navigation || !verts?.length) return;\n\n  /* 0. device pixel ratio + canvas extents */\n  const dpr = window.devicePixelRatio || 1;\n  const bufW = canvasMain.width;\n  const bufH = canvasMain.height;\n\n  /* 1. compute axis\u2011aligned bbox on X\u2011Z plane (Y==Z for 2\u2011D maps) */\n  let minX = Infinity, minY = Infinity;\n  let maxX = -Infinity, maxY = -Infinity;\n\n  verts.forEach(v => {\n    const vx = v.x;\n    const vy = (v.z ?? v.y);      // allow either {x,y} or {x,z}\n    if (vx == null || vy == null) return;\n    if (vx < minX) minX = vx;\n    if (vy < minY) minY = vy;\n    if (vx > maxX) maxX = vx;\n    if (vy > maxY) maxY = vy;\n  });\n\n  const bboxW = Math.max(maxX - minX, 1e-6);\n  const bboxH = Math.max(maxY - minY, 1e-6);\n\n  /* 2. choose target scale (buffer\u2011px / world\u2011unit) */\n  const availW = bufW - padding * dpr * 2;\n  const availH = bufH - padding * dpr * 2;\n  let targetScale = Math.min(availW / bboxW, availH / bboxH);\n  targetScale = Math.max(minScale, Math.min(maxScale, targetScale));\n\n  /* 3. target pan so bbox centre \u2192 screen centre */\n  const cx = (minX + maxX) / 2;\n  const cy = (minY + maxY) / 2;\n  // Centre the bbox on\u2011screen: screen = world * scale + pan\n  // \u2192 pan = screenCentreBufPx \u2212 scale * worldCentre\n  const panX_target = (bufW / 2) - targetScale * cx;\n  const panY_target = (bufH / 2) - targetScale * cy;\n\n  /* 4. animate via Navigator */\n  const { scale: startScale, dx: startPanX, dy: startPanY } = navigation.getTransform();\n  const t0 = performance.now();\n  const ease = t => (t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t);\n  const lerp = (a, b, t) => a + (b - a) * t;\n\n  function step(now) {\n    const traw = Math.min((now - t0) / duration, 1);\n    const t = ease(traw);\n\n    navigation.setTransform({\n      scale: lerp(startScale, targetScale, t),\n      dx: lerp(startPanX, panX_target, t),\n      dy: lerp(startPanY, panY_target, t)\n    });\n\n    if (traw < 1) requestAnimationFrame(step);\n  }\n  requestAnimationFrame(step);\n}\n\nexport function drawSelectionRect(rectSelectState) {\n  octx.setTransform(1, 0, 0, 1, 0, 0);\n  octx.clearRect(0, 0, canvasOverlay.width, canvasOverlay.height);\n  octx.save();\n  const dpr = window.devicePixelRatio || 1;\n  octx.setTransform(dpr, 0, 0, dpr, 0, 0);   // scale so CSS\u2011pixel coords match\n\n  octx.strokeStyle = \"#00e069\";\n  octx.lineWidth = 2 / dpr;                  // 1 CSS px\n  octx.setLineDash([4, 4]);\n  octx.strokeRect(\n    Math.min(rectSelectState.x0, rectSelectState.x1),\n    Math.min(rectSelectState.y0, rectSelectState.y1),\n    Math.abs(rectSelectState.x1 - rectSelectState.x0),\n    Math.abs(rectSelectState.y1 - rectSelectState.y0)\n  );\n  octx.setLineDash([]);\n  octx.restore();\n}\n\n/**\n * Remove \"orphan\" lines exactly as in the C# PreProcessing:\n * - 0 points  \u2192 delete line\n * - 1 point   \u2192 if that point was shared, remove the line key, then delete\n * - 2 points  \u2192 if both ends are the same shared point, remove that line key, then delete\n *\n * @param {LineModel} line\n * @param {object} map.layout  \u2013 your root data (with .lines dictionary)\n */\n\n\n\n\nexport function preProcessBranch(layer, lineId, pointIds) {\n  if (getCurrentState() === FSM_STATES.ADD_POINT) return;\n\n  // safety cleanup for accidetly deleted points\n  const line = layer.lines[lineId];\n  // Remove any non-existent points from the line and delete them from the map\n  line.pointIds = line.pointIds.filter(ptId => {\n    if (!map.points[ptId]) {\n      delete map.points[ptId];\n      return false;\n    }\n    return true;\n  });\n\n  // Clean up twin relationships for remaining points\n// line.pointIds.forEach(ptId => {\n//   const point = map.points[ptId];\n//   if (!Array.isArray(point.twins)) return;\n//   point.twins = point.twins.filter(twinId => {\n//     // Keep only twins that still exist in the map\n//     if (!map.points[twinId]) return false;\n//     // Also remove the back-reference from the twin\n//     const twinPoint = map.points[twinId];\n//     const backIdx = twinPoint.twins.indexOf(ptId);\n//     if (backIdx !== -1) twinPoint.twins.splice(backIdx, 1);\n//     return true;\n//   });\n// });\n\n  // 0 points \u2192 delete outright\n  if (pointIds.length === 0) {\n\n    delete layer.lines[lineId];\n    console.log(`Orphan line ${lineId} deleted`);\n    return;\n  }\n\n  // 1 point \u2192 clean up any shared association, then delete\n  if (pointIds.length === 1) {\n    const pointId = pointIds[0];\n    const point = map.points[pointId];\n    if (point.associatedLines && point.associatedLines.length === 1 && !point.locationId) {\n      addNewLocation(pointId);\n      updateSideMenuUI('location');\n    }\n\n    //  delete layer.lines[id];\n    //  console.log(`Orphan line ${id} deleted`);\n    //return;\n  }\n\n\n\n\n  // 2 points \u2192 if they're actually the same shared point, clean up then delete\n  if (pointIds.length === 2 && pointIds[0] === pointIds[1]) {\n    delete layer.lines[lineId];\n    console.log(`Orphan line ${lineId} deleted`);\n    return;\n  }\n\n}\n\n\nexport function resizeAllCanvases() {\n  const container = canvasMain.parentElement;\n  const rect = container.getBoundingClientRect();\n  const newW = rect.width * (window.devicePixelRatio || 1);\n  const newH = rect.height * (window.devicePixelRatio || 1);\n\n  [canvasBackground, canvasSelection, canvasMain, canvasGrid, canvasOverlay].forEach(cv => {\n    cv.width = newW;\n    cv.height = newH;\n    cv.style.width = rect.width + 'px';\n    cv.style.height = rect.height + 'px';\n  });\n  console.log(\"resizeAllCanvases\");\n  refreshViewport();\n}\n\n\n\n\n/** Convert world X/Z to integer cell coordinates */\nfunction cellKey(x, z) {\n  const ix = Math.floor(x / map.settings.gridSize);\n  const iz = Math.floor(z / map.settings.gridSize);\n  return `${ix},${iz}`;\n}\n\n/** Add a point to the grid */\nfunction gridInsert(pointId) {\n  const point = map.points[pointId];\n  const key = cellKey(point.position.x, point.position.z);\n  if (!grid.has(key)) grid.set(key, []);\n  grid.get(key).push(pointId);\n}\n\n\n\nfunction findSnapTargetFast(pos) {\n  const cx = Math.floor(pos.x / map.settings.gridSize);\n  const cz = Math.floor(pos.z / map.settings.gridSize);\n\n  let bestId = null;\n  const SNAP_EPS = Math.abs(map.settings.gridSize) > 0 ? Math.abs(map.settings.gridSize) : 1; // your snap radius\n  const SNAP_EPS2 = SNAP_EPS * SNAP_EPS;\n  let bestD2 = SNAP_EPS2;\n\n  // search cell (cx,cz) and its 8 neighbors\n  for (let ix = cx - 1; ix <= cx + 1; ix++) {\n    for (let iz = cz - 1; iz <= cz + 1; iz++) {\n      const arr = grid.get(`${ix},${iz}`);\n      if (!arr) continue;\n\n      for (const pointId of arr) {\n        const n = map.points[pointId];\n        if (!n) continue;\n        const dx = n.position.x - pos.x;\n        const dz = n.position.z - pos.z;\n        const d2 = dx * dx + dz * dz;\n        if (d2 < bestD2) {\n          bestD2 = d2;\n          bestId = pointId;\n        }\n      }\n    }\n  }\n  return bestId;   // null if nothing in radius\n}\n\n// --- helper: reset view so world origin sits in the canvas centre -----------\nexport function centerView(targetScale = 6) {\n  console.log(\"reset center view editor\");\n\n\n  // 1. Work in *buffer* pixels (canvas.width / height already include DPR)\n  const bufW = canvasMain.width;      // e.g. 2560 on a 1280-CSS-px retina screen\n  const bufH = canvasMain.height;\n\n\n  // 2. World point you want at screen-centre.\n  //    For the global origin (0, 0) use cx = 0, cy = 0.\n  //    For an arbitrary world point replace cx / cy.\n  const cx = 0;\n  const cy = 0;\n\n  // 3. Pan so that (cx,cy) \u2192 middle of the canvas\n  const dx = bufW / 2 - targetScale * cx;\n  const dy = bufH / 2 - targetScale * cy;\n\n  // 4. Commit it\n  navigation.setTransform({\n    scale: targetScale,\n    dx,       // = panX buffer-pixels\n    dy,       // = panY buffer-pixels\n    rotation: 0\n  });\n\n  // redraw (if your onUpdate handler doesn\u2019t already do it)\n  refreshViewport();\n}\n", "import { MapModel, SelectionMode } from \"./models/models.js\";\nimport { refreshViewport } from \"./draw.js\";\nimport { setLocationId, setSelectionMode, setTreeSelection, treeSelection, setIsDirty } from \"./selection.js\";\n\nexport let map;\nexport let styles;\nexport let isGrid;\nexport let isSnap;\nexport let isPreview;\nexport let isDebug;\n\n\nexport function initMap(mapid) {\n    // 1) Build an empty local map\n    map = new MapModel();\n    map.id = mapid;\n\n    // 2) Auto-select the first group/layer if available\n    autoSelection();\n\n    // 3) (Optional) trigger a draw if needed\n    refreshViewport();\n}\n\n\nexport function switchGridVisibility() {\n    isGrid = !isGrid;\n}\n\nexport function switchPreviewVisibility() {\n    isPreview = !isPreview;\n}\nexport function switchDebugVisibility() {\n    isDebug = !isDebug;\n}\n\nexport function switchSnapVisibility() {\n    isSnap = !isSnap;\n}\n\n\nexport function setMap(v) {\n    map = new MapModel(v);\n    console.log(\"MapModel :\", map);\n  //  window.mapboot.mapid = map.id;\n    const badgeSpan = document.querySelector('#locationBadge span');\n    badgeSpan.textContent = map.name;\n    autoSelection();\n\n    // refreshViewport();              // if you want an immediate redraw\n}\n\n\nexport function setGridSize(v) {\n    map.settings.gridSize = v;\n    // refreshViewport();              // if you want an immediate redraw\n}\n\nexport function setUnit(v) {\n    map.settings.unit = v;\n    // refreshViewport();              // if you want an immediate redraw\n}\n\n\nexport function setRotationSnap(v) {\n    map.settings.rotationSnap = v;\n    // refreshViewport();              // if you want an immediate redraw\n}\n\nexport function setSelectionRadius(v) {\n    map.settings.selectionRadius = v;\n}\n\n\nfunction autoSelection() {\n\n    setSelectionMode(SelectionMode.POINT);\n    isGrid = true;\n    isSnap = true;\n    isPreview = false;\n\n    // Clear everything first\n    // setGroupId(null);\n    //  setLayerId(null);\n    setLocationId(null);\n\n    treeSelection.length = 0;\n\n    if (Object.keys(map.groups).length === 0) return;             // group but no layers\n    const firstGroupId = Object.keys(map.groups)[0];\n    //  setGroupId(firstGroupId);\n    const group = map.groups[firstGroupId];\n    if (!group) return;\n\n    if (Object.keys(group.layers).length === 0) return;             // group but no layers\n    const firstLayerId = Object.keys(group.layers)[0];\n    //  setLayerId(firstLayerId);\n    //  const layer = group.layers[firstLayerId];\n\n    setIsDirty(false);\n    setTreeSelection(firstGroupId, firstLayerId);\n}", "import { map } from \"../editor.js\";\nimport { BuildNavigationTree } from \"./sideMenuUI.js\";\nimport { treeSelection, setLocationId } from \"../selection.js\";\nimport { showInfo } from \"../dialogBox.js\";   // safe\u2011optional\n\nexport function initGroupUI() {\n\n  const deleteGroup = document.getElementById('deleteGroup');\n  deleteGroup.addEventListener(\"click\", (evt) => {\n    const groupId = currentGroupId();\n    if (!groupId) return null;\n\n    showInfo(\n      \"Are you sure you want to delete this group?\",\n      () => {\n        removeGroup(groupId);\n        BuildNavigationTree();\n        updateGroupUI();\n      },\n      null\n    );\n\n\n  });\n\n  const groupName = document.getElementById('groupName');\n  groupName.style.marginBottom = '8px';\n  groupName.addEventListener(\"input\", (evt) => {\n    const group = currentGroup()\n    if (!group) return null;\n    group.name = evt.target.value;\n    BuildNavigationTree();\n    updateGroupUI();\n  });\n\n  const groupType = document.getElementById('groupType');\n  groupType.addEventListener(\"change\", (evt) => {\n    const group = currentGroup()\n    if (!group) return null;\n    group.type = evt.target.value;\n    BuildNavigationTree();\n    updateGroupUI();\n  });\n\n  const groupMetaInput = document.getElementById('groupMetaInput');\n  groupMetaInput.style.marginBottom = '8px';\n  groupMetaInput.addEventListener(\"input\", (evt) => {\n    const group = currentGroup()\n    if (!group) return null;\n    group.meta = evt.target.value;\n\n    updateGroupUI();\n  });\n\n\n}\n\nexport function updateGroupUI() {\n  const group = currentGroup()\n  if (!group) return null;\n  const groupName = document.getElementById('groupName');\n  groupName.value = group.name;\n\n  const groupMetaInput = document.getElementById('groupMetaInput');\n  groupMetaInput.value = group.meta;\n\n  const groupType = document.getElementById('groupType');\n  groupType.value = group.type;\n\n}\n\n\n\nfunction currentGroup() {\n  if (!treeSelection || treeSelection.length === 0) return null;\n  const sel = treeSelection.at(-1);\n\n  const group = map.groups[sel.groupId];\n  if (!group) return null;\n  return group\n}\n\nfunction currentGroupId() {\n  if (!treeSelection || treeSelection.length === 0) return null;\n  const sel = treeSelection.at(-1);\n\n\n  if (sel === -1) return null;\n  return sel.groupId;\n}\n\n\n\n\n\n\n\nfunction removeGroup(gId) {\n  // Remove the group\n  if (gId && map.groups[gId]) {\n    delete map.groups[gId];\n  }\n  // Remove any points belonging to the deleted group\n  Object.keys(map.points).forEach(pId => {\n    if (map.points[pId].groupId === gId) {\n      delete map.points[pId];\n    }\n  });\n\n  // Remove any location belonging to the deleted group\n  Object.keys(map.locations).forEach(lId => {\n    if (map.locations[lId].groupId === gId) {\n      delete map.locations[lId];\n    }\n  });\n\n  setLocationId(null);\n  treeSelection.length = 0;\n}\n\n\n\n", "import {  UnitType } from \"../../shared/models.js\";\nimport { map, setGridSize, setUnit, setRotationSnap, setSelectionRadius } from \"../editor.js\";\nimport { refreshViewport } from \"../draw.js\";\nimport { BuildNavigationTree } from \"./sideMenuUI.js\";\nimport { FSM_STATES, setFSMState } from \"./../editing/state.js\";\n\n\n\nexport function initMapUI() {\n\n  const mapName = document.getElementById('mapName');\n  mapName.style.marginBottom = '8px';\n  mapName.addEventListener(\"input\", (evt) => {\n    if (!map) return;\n    map.name = evt.target.value;\n    const badgeSpan = document.querySelector('#locationBadge span');\n    badgeSpan.textContent = map.name;\n    BuildNavigationTree();\n    updateMapUI();\n  });\n\n  const mapMetaInput = document.getElementById('mapMetaInput');\n  mapMetaInput.style.marginBottom = '8px';\n  mapMetaInput.addEventListener(\"input\", (evt) => {\n    if (!map) return;\n    map.meta = evt.target.value;\n    updateMapUI();\n  });\n\n\n\n\n  // 2) Grab the <select>\n  const unitSelect = document.getElementById('unitSelect');\n  unitSelect.style.marginBottom = '8px';\n\n  // 3) Populate with options\n  Object.entries(UnitType).forEach(([label, value]) => {\n    const option = document.createElement('option');\n    option.value = value;\n    option.textContent = label;\n    unitSelect.appendChild(option);\n  });\n\n  // 4) Pre-select from your settings\n  unitSelect.value = map.settings.unit || UnitType.Meters;\n  unitSelect.addEventListener('change', evt => {\n    unitSelect.value = evt.target.value;\n    map.referenceUnit = evt.target.value;\n    setUnit(evt.target.value);\n    refreshViewport();\n  });\n\n\n  const gridSizeInput = document.getElementById('gridSizeInput');\n  gridSizeInput.style.marginBottom = '8px';\n  gridSizeInput.addEventListener(\"input\", (evt) => {\n    gridSizeInput.value = evt.target.value;\n    setGridSize(evt.target.value);\n    refreshViewport();\n  });\n\n  const rotationSnapInput = document.getElementById('rotationSnapInput');\n  rotationSnapInput.style.marginBottom = '8px';\n  rotationSnapInput.addEventListener(\"input\", (evt) => {\n    rotationSnapInput.value = evt.target.value;\n    setRotationSnap(evt.target.value);\n  });\n\n  const selectionRadiusInput = document.getElementById('selectionRadiusInput');\n  selectionRadiusInput.style.marginBottom = '8px';\n  selectionRadiusInput.addEventListener(\"input\", (evt) => {\n    selectionRadiusInput.value = evt.target.value;\n    setSelectionRadius(evt.target.value);\n  });\n\n  initAllowedDomainsUI();\n  setFSMState(FSM_STATES.IDLE);\n}\n\nexport function updateMapUI() {\n  if (!map) return;\n  const mapName = document.getElementById('mapName');\n  mapName.value = map.name;\n\n  const mapMetaInput = document.getElementById('mapMetaInput');\n  mapMetaInput.value = map.meta;\n\n  const unitSelect = document.getElementById('unitSelect');\n  const gridSizeInput = document.getElementById('gridSizeInput');\n  const rotationSnapInput = document.getElementById('rotationSnapInput');\n  const selectionRadiusInput = document.getElementById('selectionRadiusInput');\n  selectionRadiusInput.value = map.settings.selectionRadius;\n  unitSelect.value = map.settings.unit;\n  gridSizeInput.value = map.settings.gridSize;\n  rotationSnapInput.value = map.settings.rotationSnap;\n  renderAllowedDomains();\n}\n\n\nfunction initAllowedDomainsUI() {\n  // Ensure the map.allowedDomains array exists\n  if (!map.settings.allowedDomains) map.settings.allowedDomains = [];\n\n  const container = document.getElementById('allowed-domains-group');\n  // Clear any existing nodes\n  container.innerHTML = '';\n\n  // Create label + Add button\n  const label = document.createElement('label');\n  label.textContent = 'Allowed Domains:';\n label.className = 'secondary-title-label';\n  label.style.marginRight = '8px';\n\n  const addBtn = document.createElement('button');\n  addBtn.type = 'button';\n\n\n  addBtn.style.backgroundImage = `url(\"/Images/Add.png\")`;\n  addBtn.style.backgroundSize = \"contain\";\n  addBtn.style.backgroundRepeat = \"no-repeat\";\n  addBtn.style.backgroundPosition = \"center\";\n  // Icon size\n  addBtn.style.backgroundSize = \"14px 14px\";\n  // Button dimensions\n  addBtn.style.width = \"20px\";\n  addBtn.style.height = \"20px\";\n\n  addBtn.className = 'toolbar-btn';\n  addBtn.addEventListener('click', () => {\n    map.settings.allowedDomains.push('');\n    renderAllowedDomains();\n  });\n\n  const header = document.createElement('div');\n  header.style.display = 'flex';\n  header.style.alignItems = 'center';\n  header.style.justifyContent = 'space-between';  // push Add button to the right\n  header.appendChild(label);\n  header.appendChild(addBtn);\n  container.appendChild(header);\n\n  // Create list area\n  const list = document.createElement('div');\n  list.id = 'allowed-domains-list';\n  list.style.marginTop = '8px';\n  container.appendChild(list);\n\n  // Initial render\n  renderAllowedDomains();\n}\n\nfunction renderAllowedDomains() {\n  const list = document.getElementById('allowed-domains-list');\n  list.innerHTML = '';\n  map.settings.allowedDomains.forEach((domain, idx) => {\n    const row = document.createElement('div');\n    row.style.display = 'flex';\n    row.style.alignItems = 'center';\n    row.style.marginBottom = '4px';\n\n    const input = document.createElement('input');\n    input.type = 'text';\n    input.value = domain;\n    input.placeholder = \"example.com\";\n    input.className = 'form-control form-control-sm';\n    input.style.flex = '1';\n    input.style.marginRight = '2px';\n    input.addEventListener('input', () => {\n      map.settings.allowedDomains[idx] = input.value.trim();\n    });\n\n    const delBtn = document.createElement('button');\n    delBtn.type = 'button';\n\n    delBtn.style.backgroundImage = `url(\"/Images/Delete.png\")`;\n    delBtn.style.backgroundSize = \"contain\";\n    delBtn.style.backgroundRepeat = \"no-repeat\";\n    delBtn.style.backgroundPosition = \"center\";\n    // Icon size\n    delBtn.style.backgroundSize = \"14px 14px\";\n    // Button dimensions\n    delBtn.style.width = \"20px\";\n    delBtn.style.height = \"20px\";\n    delBtn.className = 'toolbar-btn ms-2';\n    delBtn.addEventListener('click', () => {\n      map.settings.allowedDomains.splice(idx, 1);\n      renderAllowedDomains();\n    });\n\n    row.appendChild(input);\n    row.appendChild(delBtn);\n    list.appendChild(row);\n  });\n}\n\n\n\n\n\n\n\n\n", "// Dynamically load Highlight.js and its GitHub theme\n(async function loadHighlightJS() {\n  if (!window.hljs) {\n    const link = document.createElement('link');\n    link.rel = 'stylesheet';\n    link.href = 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/styles/github.min.css';\n    document.head.appendChild(link);\n\n    await new Promise((resolve, reject) => {\n      const script = document.createElement('script');\n      script.src = 'https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.8.0/highlight.min.js';\n      script.onload = resolve;\n      script.onerror = reject;\n      document.head.appendChild(script);\n    });\n  }\n})();\n\n// embedDialog.js\nexport function showEmbedDialog(mapid) {\n  let overlay = document.getElementById('embedDialog');\n  if (!overlay) {\n    overlay = document.createElement('div');\n    overlay.id = 'embedDialog';\n    Object.assign(overlay.style, {\n      display: 'none',\n      position: 'fixed',\n      inset: '0',                  // top/right/bottom/left = 0\n      background: 'rgba(0,0,0,0.5)',\n      alignItems: 'center',\n      justifyContent: 'center',\n      zIndex: '9999',\n      display: 'flex'\n    });\n\n    const box = document.createElement('div');\n    box.id = 'embedDialogContent';\n    Object.assign(box.style, {\n      background: '#fff',\n      padding: '1.5rem',\n      borderRadius: '0.5rem',\n      maxWidth: '600px',\n      width: '90%',\n      maxHeight: '80%',\n      overflowY: 'auto',\n      boxShadow: '0 4px 12px rgba(0,0,0,0.15)'\n    });\n\n    box.innerHTML = `\n      <h4 style=\"margin-top:0\">Embed Code</h4>\n      <pre>\n        <code id=\"embedCode\" class=\"language-html\"></code>\n      </pre>\n      <div style=\"display:flex;justify-content:flex-end;gap:0.5rem;margin-top:1rem;\">\n        <button id=\"copyEmbedCode\" style=\"\n            padding:0.5rem 1rem;\n            background:#0d6efd;\n            color:#fff;\n            border:none;\n            border-radius:0.25rem;\n            cursor:pointer;\n          \">\n          Copy Code\n        </button>\n        <button id=\"closeEmbedDialog\" style=\"\n            padding:0.5rem 1rem;\n            background:#6c757d;\n            color:#fff;\n            border:none;\n            border-radius:0.25rem;\n            cursor:pointer;\n          \">\n          Close\n        </button>\n      </div>\n    `;\n    overlay.appendChild(box);\n    document.body.appendChild(overlay);\n\n    // Close handler\n    box.querySelector('#closeEmbedDialog')\n       .addEventListener('click', () => overlay.style.display = 'none');\n\n    // Copy handler\n    box.querySelector('#copyEmbedCode')\n       .addEventListener('click', () => {\n         const code = overlay.querySelector('#embedCode').textContent;\n         navigator.clipboard.writeText(code).then(() => {\n           const btn = overlay.querySelector('#copyEmbedCode');\n           btn.textContent = 'Copied!';\n           setTimeout(() => btn.textContent = 'Copy Code', 2000);\n         });\n       });\n  }\n\n  // Always update snippet and show dialog\n  const snippet = `\n<div id=\"mapbootviewer\"></div>\n<script type=\"module\">\n  import { init } from '/js/editor/mapboot_viewer.js';\n  init({\n    target: '#mapbootviewer',\n    mapid: '${mapid}',\n    type: 'viewer'\n  });\n</script>\n`;\n  const codeEl = overlay.querySelector('#embedCode');\n  codeEl.textContent = snippet;\n  if (window.hljs) {\n    hljs.highlightElement(codeEl);\n  }\n  overlay.style.display = 'flex';\n\n}", "\nimport { initGroupUI, updateGroupUI } from \"./groupUI.js\";\nimport { initLayersUI, updateLayersUI } from \"./layerUI.js\";\nimport { initLocationsUI, updateLocationsUI } from \"./locationsUI.js\";\nimport { updatePointUI } from \"./pointUI.js\";\nimport { initMapUI, updateMapUI } from \"./mapUI.js\";\nimport { map } from \"../editor.js\";\nimport { setTreeSelection, treeSelection, setLocationId, isMapDirty, setIsDirty } from \"../selection.js\";\nimport { GroupModel, LayerModel, generateShortGuid } from \"../models/models.js\";\nimport { refreshViewport } from \"../draw.js\";   // safe\u2011optional\n\nimport { postMap,  publishMap } from \"../cloud.js\";   // safe\u2011optional\nimport { showEmbedDialog } from \"./embedDialogUI.js\";   // safe\u2011optional\n\n// Track whether the map has unsaved changes\n\n\n\n\nexport function initSideMenuUI() {\n\n  initSaveBtnsUI();\n  initTreeUI();\n  initMapUI();\n  initGroupUI();\n  initLayersUI();\n  initLocationsUI();\n  updateSideMenuUI('map');\n}\n\nexport function initSaveBtnsUI() {\n  // Add Save and Publish buttons toolbar\n  // Insert toolbar directly above the navigation tree\n  const navTree = document.getElementById('navTree');\n  const toolbar = document.createElement('div');\n  toolbar.style.display = 'flex';\n  toolbar.style.gap = '8px';\n  toolbar.style.marginBottom = '3px';\n\n  const backBtn = document.createElement('button');\n  backBtn.className = 'btn btn-secondary toolbar-btn';\n  // backBtn.style.flex = '1';\n  // Show a back-arrow icon in the button\n  backBtn.style.backgroundImage = \"url('/Images/Back.png')\";\n  backBtn.style.backgroundRepeat = 'no-repeat';\n  backBtn.style.backgroundPosition = 'center';\n  backBtn.style.backgroundSize = '16px 16px';\n  backBtn.style.height = '20px';\n  backBtn.style.fontSize = '12px';\n\n  backBtn.title = 'Back';\n  backBtn.style.cursor = 'pointer';\n\n\n  const saveBtn = document.createElement('button');\n  saveBtn.textContent = 'Save';\n  saveBtn.className = 'btn btn-secondary toolbar-btn';\n  saveBtn.style.height = '20px';\n  saveBtn.style.fontSize = '12px';\n\n  saveBtn.style.flex = '1';\n  saveBtn.style.cursor = 'pointer';\n\n\n  const publishBtn = document.createElement('button');\n  publishBtn.textContent = 'Publish';\n  publishBtn.className = 'btn btn-secondary toolbar-btn';\n  publishBtn.style.height = '20px';\n  publishBtn.style.fontSize = '12px';\n  publishBtn.style.flex = '1';\n  publishBtn.style.cursor = 'pointer';\n\n  const embedBtn = document.createElement('button');\n  embedBtn.textContent = 'Embed';\n  embedBtn.className = 'btn btn-secondary toolbar-btn';\n  embedBtn.style.height = '20px';\n  embedBtn.style.fontSize = '12px';\n  embedBtn.style.flex = '1';\n  embedBtn.style.cursor = 'pointer';\n\n  toolbar.appendChild(backBtn);\n  toolbar.appendChild(saveBtn);\n  toolbar.appendChild(publishBtn);\n  toolbar.appendChild(embedBtn);\n  if (navTree && navTree.parentElement) {\n    navTree.parentElement.insertBefore(toolbar, navTree);\n  }\n\n\n  backBtn.addEventListener(\"click\", () => {\n    if (isMapDirty) {\n      const leave = confirm('You have unsaved changes. Save before leaving?');\n      if (leave) {\n        saveBtn.click();\n        return; // wait for save to finish\n      }\n    }\n    window.location.href = '/Dashboard/Index';\n  });\n\n  saveBtn.addEventListener(\"click\", () => {\n    // Attempt to save and clear dirty flag\n    const mapid = map.id;\n    const loadingOverlay = document.getElementById(\"loadingOverlay\");\n    const deadOverlay = document.getElementById(\"deadOverlay\");\n    loadingOverlay?.classList.remove(\"hidden\");\n    deadOverlay?.classList.add(\"hidden\");\n    postMap({\n      map,\n      onSuccess: () => {\n        console.log(\"Successfully sent to cloud, map id:\", mapid);\n        setIsDirty(false);  // clear dirty flag\n        loadingOverlay?.classList.add(\"hidden\");\n      },\n      onError: e => {\n        console.error(e);\n        console.error(\"Could not save to cloud\");\n        deadOverlay?.classList.remove(\"hidden\");\n      }\n    })\n      .finally(() => {\n        loadingOverlay?.classList.add(\"hidden\");\n      });\n  });\n\n  publishBtn.addEventListener(\"click\", () => {\n    const mapid = map.id;\n    const loadingOverlay = document.getElementById(\"loadingOverlay\");\n    const deadOverlay = document.getElementById(\"deadOverlay\");\n    loadingOverlay?.classList.remove(\"hidden\");\n    deadOverlay?.classList.add(\"hidden\");\n\n    let published = false;\n    publishMap({\n      mapid,\n      onSuccess: () => {\n        console.log(\"Successfully published, map id:\", mapid);\n        setIsDirty(false);  // clear dirty flag\n        loadingOverlay?.classList.add(\"hidden\");\n        published = true;\n      },\n      onError: e => {\n        console.error(e);\n        console.error(\"Could not publish map with id\", mapid);\n        deadOverlay?.classList.remove(\"hidden\");\n        published = false;\n      }\n    })\n      .finally(() => {\n        loadingOverlay?.classList.add(\"hidden\");\n        const goToViewer = confirm('Map has been published successfully, would you like to view it?');\n        if (published && goToViewer) {\n          window.location.href = '/Builder/Viewer?mapid=' + mapid;\n        }\n      });\n  });\n\n  embedBtn.addEventListener(\"click\", () => {\n    showEmbedDialog(map.id);\n  });\n\n\n}\nexport function updateSideMenuUI(content) {\n  const menu = document.getElementById(\"menu\");\n  const panels = menu.querySelectorAll(\".content-panel\");\n  panels.forEach(p => {\n    p.classList.toggle(\"hidden\", p.dataset.content !== content);\n  });\n\n  console.log(\"content is \", content);\n  // tree stays as-is; we only rebuild when the data changes\n  if (content == 'map') {\n    updateMapUI();\n  }\n  else if (content == 'group') {\n    updateGroupUI();\n  }\n  else if (content == 'layer') {\n    updateLayersUI();\n  }\n  else if (content == 'location') {\n    updateLocationsUI();\n  }\n  else if (content == 'point') {\n    updatePointUI();\n  }\n\n  updateSelectedRows();          // keep tree highlight in sync\n  refreshViewport();\n}\n\n\nfunction clearSelectedRows(root = document.getElementById(\"navTree\")) {\n  // Remove selected state from labels\n  root.querySelectorAll(\".label.selected\").forEach(el => el.classList.remove(\"selected\"));\n  //lastSelected = null;   // reset bookkeeping\n}\n\n\nfunction initTreeUI() {\n  const navRoot = document.getElementById(\"navTree\");\n  buildNavTree();\n\n  // listen for selections anywhere in the tree\n  navRoot.addEventListener(\"NavTree:select\", e => {\n    const { key } = e.detail;\n    console.log(\"user clicked point:\", key);\n  });\n}\nexport function BuildNavigationTree() {\n\n  buildNavTree();\n\n}\n\n\n\nfunction buildNavTree() {\n\n  const root = document.getElementById(\"navTree\");\n  root.innerHTML = \"\";                                // clear\n\n  /* \u2500\u2500\u2500\u2500\u2500\u2500\u2500 Root header + \u201CAdd group\u201D button \u2500\u2500\u2500\u2500\u2500\u2500\u2500 */\n  const header = document.createElement(\"div\");\n  header.className = \"point\";\n  header.style.display = \"flex\";\n  header.style.alignItems = \"center\";\n\n  // make root selectable as \"map\"\n  header.dataset.key = \"map\";\n  header.dataset.level = \"map\";\n\n  // 1) Label span\n  const label = document.createElement(\"span\");\n  label.className = \"label\";\n  label.textContent = map.name || map.id;\n  label.style.color=\"#2aa14eff\";\n  label.style.fontSize=\"14px\";\n  label.style.paddingLeft=\"20px\";\n  label.style.cursor = \"pointer\";\n  label.addEventListener(\"click\", e => {\n    e.stopPropagation();\n    updateSideMenuUI(\"map\");\n  });\n  header.appendChild(label);\n\n\n  header.querySelector(\".label\").style.cursor = \"pointer\";\n  header.querySelector(\".label\").addEventListener(\"click\", (e) => {\n    e.stopPropagation();\n    // selectNode(header);\n    updateSideMenuUI(\"map\");\n  });\n\n  root.appendChild(header);\n\n  const groupsLabel = document.createElement(\"div\");\n  groupsLabel.className = \"point\";\n  groupsLabel.style.display = \"flex\";\n  groupsLabel.style.alignItems = \"center\";\n  groupsLabel.style.gap = \"4px\";\n  groupsLabel.style.backgroundColor = \"rgba(200, 200, 200, 1)\"; // light gray\n  root.appendChild(groupsLabel);\n  // add-group button next to Groups label\n  const addGroupBtn = document.createElement(\"button\");\n  addGroupBtn.className = \"btn-img\";\n  addGroupBtn.title = \"Add group\";\n  addGroupBtn.style.marginLeft = \"auto\";\n  addGroupBtn.style.paddingRight = \"5px\";\n  addGroupBtn.style.backgroundImage = \"url(/Images/AddGroup.png)\";\n  addGroupBtn.style.backgroundRepeat = \"no-repeat\";\n  addGroupBtn.style.backgroundPosition = \"center\";\n  addGroupBtn.style.backgroundSize = \"20px 20px\";\n  addGroupBtn.addEventListener(\"click\", e => {\n    e.stopPropagation();\n    // create and add a new group\n    const group = new GroupModel();\n    //  group.name = \"Name here\";\n    const newGroupId = generateShortGuid();\n    map.groups[newGroupId] = group;\n    // setGroupId(newGroupId);\n    // setLayerId();\n\n    treeSelection.length = 0;\n    setTreeSelection(newGroupId, Object.keys(group.layers)[0]);\n    // refresh group UI and tree\n    updateGroupUI?.();\n    buildNavTree(map, root);\n  });\n  // const groupsText = document.createElement(\"span\");\n  //  groupsText.textContent = \"Groups\";\n  //groupsLabel.appendChild(groupsText);\n  header.appendChild(addGroupBtn);\n\n  /* \u2500\u2500\u2500\u2500\u2500\u2500\u2500 UL for the expandable tree \u2500\u2500\u2500\u2500\u2500\u2500\u2500 */\n  const ul = document.createElement(\"ul\");\n  root.appendChild(ul);\n  Object.entries(map.groups).forEach(([gId, b]) => {\n    const ulB = addNode(\n      ul,\n      gId,\n      null,\n      null,\n      b,\n      \"group\"\n    );\n\n    const layersUL = document.createElement(\"ul\");\n    ulB.appendChild(layersUL);\n\n    Object.entries(b.layers).forEach(([layId, f]) => {\n      const ulG = addNode(\n        layersUL,\n        gId,\n        layId,\n        null,\n        f,\n        \"layer\"\n      );\n    });\n  });\n\n  updateSelectedRows();\n}\n\n\n/* Expand the given row *and all ancestors* so the row is visible. */\nfunction expandRow(root, key) {\n  const nodeRow = root.querySelector(`.point[data-key=\"${key}\"]`);\n  if (!nodeRow) return;\n\n  function openRow(row) {\n    const toggle = row.querySelector(\".toggle\");\n    if (toggle && toggle.textContent === \"\u25B8\") {\n      toggle.textContent = \"\u25BE\";\n    }\n    // reveal its direct child <ul>\n    row.parentElement.querySelectorAll(\":scope > ul\").forEach(\n      ul => (ul.style.display = \"\")\n    );\n  }\n\n  // open this row \u2026\n  openRow(nodeRow);\n\n  // \u2026 then walk ancestors to the root\n  let li = nodeRow.parentElement;         // <li> hosting this .point\n  while (li) {\n    const parentLi = li.parentElement?.closest(\"li\");\n    if (!parentLi) break;\n    const parentRow = parentLi.querySelector(\":scope > .point\");\n    if (parentRow) openRow(parentRow);\n    li = parentLi;\n  }\n}\n\n/* \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 helper \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 */\n\nfunction addNode(parentUL, gId, layId, locId, model, level = \"\") {\n  const li = document.createElement(\"li\");\n  const row = document.createElement(\"div\");\n  row.className = \"field-group  point\";\n  row.dataset.groupId = gId;\n  row.dataset.layerId = layId;\n  row.dataset.locationId = locId;\n  row.dataset.level = level;   // \"group\", \" layer\", etc.\n  // key for selection and expansion\n  if (level === \"group\") row.dataset.key = gId;\n  else if (level === \"layer\") row.dataset.key = layId;\n  else if (level === \"location\") row.dataset.key = locId;\n  /* disclosure \u25B8/\u25BE only for group & layer */\n  let tgl = null;\n  if (level === \"group\") {\n    tgl = document.createElement(\"span\");\n    tgl.className = \"toggle\";\n    tgl.textContent = \"\u25BE\";\n    row.appendChild(tgl);\n  }\n\n  /* editable name field for groups &  layers */\n  let nameEl;\n  if (level === \"group\" ) {\n    nameEl = document.createElement(\"span\");\n    nameEl.style.fontSize=\"14px\";\n    nameEl.className = \"label list-name\";\n    // nameEl.type = \"text\";\n    nameEl.textContent = model.name ?? \"\";\n\n  } else if (level === \"layer\"){\n    // static text for any deeper level\n    nameEl = document.createElement(\"span\");\n    nameEl.style.fontSize=\"12px\";\n    nameEl.style.fontStyle=\"italic\";\n    nameEl.className = \"label\";\n    nameEl.textContent = model.name ?? \"\";\n  }\n  row.appendChild(nameEl);\n\n\n\n  /* optional PLUS button */\n  // Removed the entire if (level === \"group\") block as per instructions\n\n  // \u2500\u2500\u2500 Delete group button \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n  if (level === \"group\") {\n    //  const delGroup = document.createElement(\"button\");\n    //  delGroup.className = \"btn-img\";\n    //  delGroup.title = \"Delete group\";\n    //  delGroup.style.backgroundImage = \"url(/Images/DeleteDark.png)\";\n    //  delGroup.style.backgroundRepeat = \"no-repeat\";\n    //  delGroup.style.backgroundPosition = \"center\";\n    //  delGroup.style.backgroundSize = \"16px 16px\";\n    //  delGroup.style.marginLeft = \"4px\";\n    //  // delGroup.style.cursor = \"not-allowed\";\n    //  row.appendChild(delGroup);\n\n    //  delGroup.onclick = (e) => {\n    //    e.stopPropagation();\n    //    showInfo(\n    //      \"Are you sure you want to delete this group?\",\n    //      () => {\n    //        removeGroup(gId);\n    //        buildNavTree(map, parentUL.closest(\"#navTree\"));\n    //      },\n    //      null\n    //    );\n    //  };\n\n    // \u2500\u2500 Add layer button \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    const addLayerBtn = document.createElement(\"button\");\n    addLayerBtn.className = \"btn-img\";\n    addLayerBtn.title = \"Add layer\";\n  //  addLayerBtn.style.paddingRight = \"4px\";\n  addLayerBtn.style.paddingRight = \"5px\";\n\n    addLayerBtn.style.backgroundImage = \"url(/Images/AddLayer.png)\";\n    addLayerBtn.style.backgroundRepeat = \"no-repeat\";\n    addLayerBtn.style.backgroundPosition = \"center\";\n    addLayerBtn.style.backgroundSize = \"20px 20px\";\n    addLayerBtn.onclick = (e) => {\n      e.stopPropagation();\n\n      // mirror buildNavTree logic for adding layers\n      const group = map.groups[gId];\n      const newLayer = new LayerModel();\n      const nextIndex = Object.keys(group.layers).length + 1;\n      //  newLayer.name = \"Name here...\";\n      const newLayerId = generateShortGuid();\n      group.layers[newLayerId] = newLayer;\n      // setGroupId(gId);\n      // setLayerId(newLayerId);\n\n      setTreeSelection(gId, newLayerId);\n      updateLayersUI?.();\n      buildNavTree();\n      expandRow(document.getElementById(\"navTree\"), gId);\n    };\n    row.appendChild(addLayerBtn);\n  }\n\n  /* plus button for locations */\n  // if (level === \"layer\") {\n  // Removed add-location plus button as per instructions\n\n  // \u2500\u2500\u2500 Delete layer button \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n  //  const delLayer = document.createElement(\"button\");\n  //  delLayer.className = \"btn-img\";\n  //  delLayer.title = \"Delete layer\";\n  //  delLayer.style.backgroundImage = \"url(/Images/DeleteDark.png)\";\n  //  delLayer.style.backgroundRepeat = \"no-repeat\";\n  //  delLayer.style.backgroundPosition = \"center\";\n  //  delLayer.style.backgroundSize = \"16px 16px\";\n  //  delLayer.style.marginLeft = \"4px\";\n  //  // delLayer.style.cursor = \"not-allowed\";\n  //  row.appendChild(delLayer);\n\n  //  delLayer.onclick = (e) => {\n  //    e.stopPropagation();\n  //    showInfo(\n  //      \"Are you sure you want to delete this layer?\",\n  //      () => {\n  //        removeLayer(gId, layId);\n  //        buildNavTree(map, parentUL.closest(\"#navTree\"));\n  //      },\n  //      null\n  //    );\n  //  };\n  //}\n\n\n\n  /* show / hide button (groups & layers & locations & styles) */\n  //  if (level === \"group\" || level === \"layer\") {\n  //    const eye = document.createElement(\"button\");\n  //    eye.className = \"btn-img\";\n  //    eye.type = \"button\";\n  //    eye.style.marginLeft = \"4px\";\n  //    row.appendChild(eye);                 // append *before* plus button (if any)\n  //    eye.style.width = \"6px\";\n  //    eye.style.background = model.enabled ? enabledColor : disabledColor;\n  //\n  //    eye.onclick = (e) => {\n  //      e.stopPropagation();        // don\u2019t fold / select\n  //      model.enabled = !(model.enabled !== false);  // toggle\n  //      //  syncEye();\n  //      eye.style.background = model.enabled ? enabledColor : disabledColor;\n  //      //   if (level === \"group\") {\n  //      // Object.values(map.groups[gId].layers).forEach(layer => {\n  //      //   layer.enabled = map.groups[gId].enabled;\n  //      // });\n  //      //  }\n  //\n  //      /* refresh whatever UI needs repainting */\n  //      if (level === \"group\") {\n  //        updateGroupUI?.();\n  //      }\n  //      else if (level === \"layer\") {\n  //        updateLayersUI?.();\n  //      }\n  //      refreshViewport?.();\n  //    };\n  //  }\n\n  /* fold / select behavior */\n  if (tgl) {\n    let open = false;                  // track disclosure state\n    tgl.onclick = (e) => {\n      e.stopPropagation();             // don\u2019t trigger row\u2011selection\n      open = !open;\n      tgl.textContent = open ? \"\u25BE\" : \"\u25B8\";\n      li.querySelectorAll(\":scope > ul\").forEach(\n        ul => (ul.style.display = open ? \"\" : \"none\")\n      );\n    };\n  }\n\n\n  row.onclick = (e) => {\n\n    if (level === \"group\") {\n      const group = map.groups[gId];\n      if (!group) return;\n \n      const firstLayerId = Object.keys(group.layers)[0];\n      if (firstLayerId) {\n        if (e.metaKey) setTreeSelection(gId, firstLayerId);\n        else {\n          treeSelection.length = 0;\n          setTreeSelection(gId, firstLayerId);\n        }\n      } else {\n        if (e.metaKey) setTreeSelection(gId, null);\n        else {\n          treeSelection.length = 0;\n          setTreeSelection(gId, null);\n        }\n      }\n     \n    updateSideMenuUI(\"group\");\n  }\n    else if (level === \"layer\") {\n    const group = map.groups[gId];\n    if (!group) return;\n\n    const layer = group.layers[layId];\n    if (!layer) return;\n\n    if (e.metaKey) setTreeSelection(gId, layId);\n    else {\n      treeSelection.length = 0;\n      setTreeSelection(gId, layId);\n    }\n\n    updateSideMenuUI(\"layer\");\n  }\n};\n\nli.appendChild(row);\nparentUL.appendChild(li);\n\n// Only create child <ul> for expandable rows (group, layer)\nlet childUL = null;\nif (level === \"group\" || level === \"layer\") {\n  childUL = document.createElement(\"ul\");\n  childUL.style.display = \"\";\n  li.appendChild(childUL);\n}\nreturn childUL;   // callers can now populate this <ul>\n}\n\n// inject once\nif (!document.getElementById(\"tree-ui-style\")) {\n  const css = document.createElement(\"style\");\n  css.id = \"tree-ui-style\";\n  css.textContent = `\n  /* Highlight selected label text */\n  #navTree .label.selected {\n    color: #2aa14eff;\n \n  }\n  /* Zebra striping on li elements for group rows */\n  #navTree > ul > li:nth-child(odd) { background: rgba(240, 240, 240, 0.8); }\n \n  `;\n  document.head.appendChild(css);\n}\n\n\nfunction getRowById(id, level, root = document.getElementById(\"navTree\")) {\n  // Always escape user-supplied strings in a CSS selector\n  const escapedId = CSS.escape(id);\n  const selector = level\n    ? `.point[data-level=\"${level}\"][data-key=\"${escapedId}\"]`\n    : `.point[data-key=\"${escapedId}\"]`;\n\n  return root.querySelector(selector);\n}\n\nexport function updateSelectedRows() {\n  const root = document.getElementById(\"navTree\");\n  // Remove any previous selections\n  clearSelectedRows(root);\n\n  treeSelection.forEach(sel => {\n    // Always select the group row by key only\n    const groupRow = getRowById(sel.groupId) || getRowById(sel.groupId, \"group\");\n    if (groupRow) {\n      const label = groupRow.querySelector('.label');\n      if (label) label.classList.add('selected');\n    }\n\n    // If there's a valid layer selected, highlight it\n    if (sel.layerId) {\n      const layerRow = getRowById(sel.layerId, \"layer\");\n      if (layerRow) {\n        const label = layerRow.querySelector('.label');\n        if (label) label.classList.add('selected');\n      }\n    }\n  });\n\n  refreshViewport();\n}\n\n\n\n\n", "import { getMap } from \"./cloud.js\";\nimport { initSideMenuUI } from \"./UI/sideMenuUI.js\";\nimport { initCanvas, refreshViewport, buildMap } from \"./draw.js\";\n\nimport { initToolsMenu } from \"./UI/toolsMenu.js\";       // UI buttons,  layer +/- logic\nimport { initMap, setMap, map } from \"./editor.js\";       // UI buttons,  layer +/- logic\nimport { initEditing } from \"./editing/editing.js\";       // UI buttons,  layer +/- logic\n\nexport class widget {\n  constructor(root, opts) {\n    this.root = root;          // <div> host element\n    this.opts = opts;\n    // injectIndoorLensCSS().then(() => {\n\n    // build all DOM elements inside the host and get references\n    const refs = buildIndoorLensDOM(this.root);\n\n    this.loadingOverlay = refs.loadingOverlay;\n    this.deadOverlay = refs.deadOverlay;\n\n    const mapid = opts.mapid;\n\n    console.log(\"Loading map with id:\", mapid);\n    if (mapid) {\n      const loadingOverlay = document.getElementById(\"loadingOverlay\");\n      const deadOverlay = document.getElementById(\"deadOverlay\");\n      loadingOverlay?.classList.remove(\"hidden\");\n      deadOverlay?.classList.add(\"hidden\");\n\n      getMap({\n        mapid,\n        onSuccess: (mapJson) => {\n          setMap(mapJson);\n          console.log(\"Successfully loaded, map id:\", mapid);\n          loadingOverlay?.classList.add(\"hidden\");\n        },\n        onError: e => {\n          console.log(\"Could not load map, a new map is created\", mapid);\n          console.log(\"why \", e);\n          initMap(mapid);\n        }\n      })\n        .finally(() => {\n\n          deadOverlay?.classList.add(\"hidden\");\n\n\n\n          // Wait one frame so the flex layout settles *and* we know the real dimensions\n          requestAnimationFrame(() => {\n            // Now that layout is correct, init canvases and editors\n            initCanvas(\n              refs.canvasBackground,\n              refs.canvasSelection,\n              refs.canvasMain,\n              refs.canvasOverlay,\n              refs.canvasGrid\n            );\n\n\n            initEditing(refs.canvasMain, refreshViewport);\n\n            // Build static side panels while overlay is still up\n            initSideMenuUI();\n            initToolsMenu();\n\n            buildMap();\n            refreshViewport();\n            loadingOverlay?.classList.add(\"hidden\");\n          });\n        });\n    }\n    //  });\n\n  }\n}\n\nfunction injectIndoorLensCSS() {\n  return new Promise((resolve, reject) => {\n    // Skip if the sheet is already present\n    if (document.getElementById('indoorlens-css')) return resolve();\n\n    const link = document.createElement('link');\n    link.id = 'indoorlens-css';\n    link.rel = 'stylesheet';\n    link.href = '/dist/indoorlens-editor.css';\n    link.onload = () => resolve();\n    link.onerror = reject;\n    document.head.appendChild(link);\n  });\n}\n\n\n\n\n/**\n * Dynamically constructs the HTML/CSS structure for the map widget.\n * @param {HTMLElement} host  container to append into\n * @param {{width:number, height:number}} opts\n * @returns {Object} references to created elements\n */\nexport function buildIndoorLensDOM(host) {\n  injectIndoorLensCSS();\n  const uilayout = document.createElement(\"div\");\n  uilayout.id = \"wrapper\";\n  uilayout.className = \"ui-layout\";\n  uilayout.style.display = \"flex\";\n  uilayout.style.flexDirection = \"row\";\n  uilayout.style.alignItems = \"stretch\";\n  //wrapper.style.width = \"100%\";\n  // wrapper.style.height = cssHeight;\n\n  uilayout.style.width = \"100%\";\n  uilayout.style.height = \"100%\";\n  host.appendChild(uilayout);\n\n\n  uilayout.insertAdjacentHTML(\"beforeend\", `\n \n<!-- inside your existing side-menu element -->\n<div  class=\"side-menu\">\n    <aside id=\"navTree\" class=\"tree-panel\"></aside> \n\n  <!-- 2) Content sections (only one visible at a time) -->\n  <div id=\"menu\" class=\"menu-content\">\n\n     \n\n      <!-- \u2500\u2500\u2500 Map Panel \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 -->\n    <div class=\"content-panel hidden\" data-content=\"map\">\n\n      <div class=\"menu-header\">\n        <span class=\"secondary-title-label\" >Map:</span> \n       </div>\n\n             <div class=\"field-group\">\n          <label for=\"mapName\">Name</label>\n          <input\n            type=\"text\"\n            id=\"mapName\"\n            placeholder=\"Map name here\"\n          />\n        </div>\n\n      <div class=\"field-group\">\n        <label for=\"mapMetaInput\">MetaData:</label>\n        <textarea\n          id=\"mapMetaInput\"\n          rows=\"3\"\n          placeholder=\"Map meta here\u2026\"\n          style=\"width:100%; /* or whatever fits your layout */\"\n        ></textarea>\n      </div>\n\n                 <div class=\"menu-header\">\n        <span class=\"secondary-title-label\" >Settings:</span>\n      </div>\n    <div class=\"field-group\">\n      <label for=\"unitSelect\">Reference Unit:</label>\n      <select id=\"unitSelect\"></select>\n    </div>\n        <div class=\"field-group\">\n          <label for=\"gridSizeInput\">Grid Size:</label>\n          <input\n            type=\"number\"\n            id=\"gridSizeInput\"\n            step=\"0.1\"\n            min=\"0\"\n            placeholder=\"e.g. 1\"\n          />\n        </div>\n\n\n          <div class=\"field-group\">\n          <label for=\"rotationSnapInput\">Rotation Snap:</label>\n          <input\n            type=\"number\"\n            id=\"rotationSnapInput\"\n            step=\"1\"\n            min=\"0\"\n            placeholder=\"e.g. 15\"\n          />\n        </div>\n\n                <div class=\"field-group\">\n          <label for=\"selectionRadiusInput\">Selection Radius:</label>\n          <input\n            type=\"number\"\n            id=\"selectionRadiusInput\"\n            step=\"1\"\n            min=\"1\"\n            placeholder=\"e.g. 5\"\n          />\n        </div>\n\n      <div id=\"allowed-domains-group\"> </div>\n    </div>\n\n\n\n      <!-- \u2500\u2500\u2500 Group Panel \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 -->\n    <div class=\"content-panel hidden\" data-content=\"group\">\n   <div class=\"menu-header\">\n        <span class=\"secondary-title-label\" >Group:</span> \n       <button id= \"deleteGroup\" class=\"btn-header \" title=\"Delete Group\">Delete</button>\n    </div>\n\n         <div class=\"field-group\">\n          <label for=\"groupName\">Name</label>\n          <input\n            type=\"text\"\n            id=\"groupName\"\n            placeholder=\"Group name here\"\n          />\n        </div>\n\n      <div class=\"field-group\">\n        <label for=\"groupMetaInput\">MetaData:</label>\n        <textarea\n          id=\"groupMetaInput\"\n          rows=\"3\"\n          placeholder=\"Group meta here\u2026\"\n          style=\"width:100%; /* or whatever fits your layout */\"\n        ></textarea>\n      </div>\n\n<!-- Group type selector -->\n      <div class=\"field-group\">\n        <label for=\"groupType\">Type:</label>\n        <select id=\"groupType\" name=\"layerType\">\n          <option value=\"regular\">Regular</option>\n          <option value=\"transit\">Transit</option>\n        </select>\n    </div>\n \n    </div>\n \n    <!-- \u2500\u2500\u2500 Layers Panel \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 -->\n    <div class=\"content-panel\" data-content=\"layer\">\n\n       <div class=\"menu-header\">\n        <span class=\"secondary-title-label\" >Layer:</span> \n        <button id= \"deleteLayer\" class=\"btn-header \" title=\"Delete Layer\">Delete</button>\n     </div>\n\n      <!-- 2b) Background Settings for Current Group -->\n      <div class=\" layer-settings\">\n              <div class=\"field-group\">\n          <label for=\"layerName\">Name</label>\n          <input\n            type=\"text\"\n            id=\"layerName\"\n            placeholder=\"Layer name here\"\n          />\n           \n        </div>\n        </div>\n\n      <div class=\"menu-header\">\n        <span  class=\"secondary-title-label\" >Blue Print:</span>\n      </div>\n        <!-- 1) Image chooser (file input) -->\n<div class=\"field-group\">\n  <label for=\"bgFileName\">Image:</label>\n\n  <!-- new wrapper around the input+button -->\n  <div class=\"bg-input-group\">\n    <input\n      type=\"text\"\n      id=\"bgFileName\"\n      placeholder=\"\"\n      disabled\n      style=\"border:none; outline:none; background:transparent; margin:0; padding:0;\"\n    />\n         \n    <button\n      class=\"blueprint-btn btn-bg-assign\"\n      type=\"button\"\n      title=\"Assign background to layer\"\n      style=\"background-image:url('/Images/File.png')\">\n    </button>\n  </div>\n\n  <!-- keep the hidden file input here -->\n  <input\n    id=\"blueprint\"\n    class=\"bg-file-input\"\n    type=\"file\"\n    accept=\"image/*\"\n    hidden\n  />\n</div>\n\n        <!-- 4) Opacity slider -->\n        <div class=\"field-group\">\n          <label for=\"bgOpacityInput\">Opacity:</label>\n          <input\n            type=\"range\"\n            id=\"bgOpacityInput\"\n            min=\"0\"\n            max=\"1\"\n            step=\"0.01\"\n            value=\"1\"\n          />\n       \n        </div>\n\n        <!-- 2) Real-world Width input -->\n\n \n        <div class=\"field-group\">\n          <label for=\"bgWidthInput\">Width:</label>\n          <input\n            type=\"number\"\n            id=\"bgWidthInput\"\n            step=\"0.1\"\n            min=\"0\"\n            placeholder=\"e.g. 50\"\n          />\n  \n        </div>\n\n              <div class=\"field-group\">\n          <label for=\"bgHeightInput\">Height:</label>\n     \n            <input\n            type=\"number\"\n            id=\"bgHeightInput\"\n            step=\"0.1\"\n            min=\"0\"\n            placeholder=\"e.g. 30\"\n          />\n        </div>\n\n      </div>\n    <!-- \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 -->\n\n    <!-- \u2500\u2500\u2500 Locations Panel \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 -->\n    <div class=\"content-panel hidden\" data-content=\"location\">\n        <div id=\"locationFieldsContainer\"></div>\n    </div>\n\n        <!-- \u2500\u2500\u2500 Point Panel \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 -->\n    <div class=\"content-panel hidden\" data-content=\"point\">\n        <div id=\"pointContainer\"></div>\n    </div>\n\n\n  </div>\n\n  </div> \n \n    \n  `);\n\n\n\n\n\n  // 3) create a container div for both canvases (80%)\n  const canvasesContainer = document.createElement(\"div\");\n\n  canvasesContainer.className = \"canvases-container\";\n  uilayout.appendChild(canvasesContainer);\n\n  // 4) main canvas (fills container)\n  const canvasMain = document.createElement(\"canvas\");\n  canvasMain.id = \"canvasMain\";\n  canvasMain.className = \"canvas canvas-main\";\n  canvasMain.style.position = \"absolute\";\n  canvasMain.style.top = \"0\";\n  canvasMain.style.left = \"0\";\n  canvasMain.style.width = \"100%\";\n  canvasMain.style.height = \"100%\";\n  canvasMain.style.zIndex = \"2\";\n  canvasesContainer.appendChild(canvasMain);\n\n  // 4) background canvas (fills container)\n  const canvasBackground = document.createElement(\"canvas\");\n  canvasBackground.id = \"canvasBackground\";\n  canvasBackground.className = \"canvas canvas-background\";\n  canvasBackground.style.position = \"absolute\";\n  canvasBackground.style.top = \"0\";\n  canvasBackground.style.left = \"0\";\n  canvasBackground.style.width = \"100%\";\n  canvasBackground.style.height = \"100%\";\n  canvasBackground.style.zIndex = \"0\";\n  canvasesContainer.appendChild(canvasBackground);\n\n  // 4) selection canvas (fills container)\n  const canvasSelection = document.createElement(\"canvas\");\n  canvasSelection.id = \"canvasSelection\";\n  canvasSelection.className = \"canvas canvas-selection\";\n  canvasSelection.style.position = \"absolute\";\n  canvasSelection.style.pointerEvents = 'none';       // let clicks pass through\n  canvasSelection.style.opacity = '0';          // fully transparent\n  canvasSelection.style.top = \"0\";\n  canvasSelection.style.left = \"0\";\n  canvasSelection.style.width = \"100%\";\n  canvasSelection.style.height = \"100%\";\n  canvasSelection.style.zIndex = \"1\";\n  canvasesContainer.appendChild(canvasSelection);\n\n  // 5)   canvas overlay  (on top of main)\n  const canvasOverlay = document.createElement(\"canvas\");\n  canvasOverlay.id = \"canvasOverlay\";\n  canvasOverlay.className = \"canvas canvas-overlay\";\n  canvasOverlay.style.position = \"absolute\";\n  canvasOverlay.style.top = \"0\";\n  canvasOverlay.style.left = \"0\";\n  canvasOverlay.style.width = \"100%\";\n  canvasOverlay.style.height = \"100%\";\n  canvasOverlay.style.zIndex = \"3\";\n  canvasesContainer.appendChild(canvasOverlay);\n\n  // 5) overlay canvas (on top of main)\n  const canvasGrid = document.createElement(\"canvas\");\n  canvasGrid.id = \"canvasGrid\";\n  canvasGrid.className = \"canvas canvas-grid\";\n  canvasGrid.style.position = \"absolute\";\n  canvasGrid.style.top = \"0\";\n  canvasGrid.style.left = \"0\";\n  canvasGrid.style.width = \"100%\";\n  canvasGrid.style.height = \"100%\";\n  canvasGrid.style.zIndex = \"4\";\n  canvasesContainer.appendChild(canvasGrid);\n\n  // brand badge\n  canvasesContainer.insertAdjacentHTML(\"beforeend\", `\n    <div class=\"brand-badge badge\">\n      <img src=\"https://cdn.jsdelivr.net/gh/elseforty/IndoorLens/LocationIcons/IconDark.png\" alt=\"MapBoot icon\" />\n      <span>MapBoot.com</span>\n    </div>\n\n    <div id=\"locationBadge\" class=\"location-badge badge\"  >\n      <span></span>\n      <img src=\"https://cdn.jsdelivr.net/gh/elseforty/IndoorLens/LocationIcons/LocationPin.png\" alt=\"MapBoot location\" />\n    </div>\n`);\n\n\n  // settings panel\n  canvasesContainer.insertAdjacentHTML(\"beforeend\", `\n  \n   <div class=\"search-bar\" style=\"background: rgba(51, 51, 51, 0.3); padding:4px; border-radius:4px;\">\n\n\n\n         <button id=  \"point\" class=\"toolbar-btn\"  alt=\"Point selection\"  title=\"Point selection\">\n           <img src=\"/Images/Point.png\" alt=\"Point selection\" width=\"20\" height=\"20\">\n      </button>\n           <button id=  \"edge\" class=\"toolbar-btn\"  title=\"Line selection\">\n           <img src=\"/Images/Line.png\" alt=\"Line selection\" width=\"20\" height=\"20\">\n      </button>\n\n     <button id=  \"face\" class=\"toolbar-btn\" title=\"Polygon selection\">\n           <img src=\"/Images/Polygon.png\" alt=\"Polygon selection\"  width=\"20\" height=\"20\">\n      </button>\n\n <div></div>\n      <div></div>\n\n    <button id= \"addpoint\" class=\"toolbar-btn\" title=\"Add Point\">\n            <img src=\"/Images/Add.png\" alt=\"add point\" width=\"20\" height=\"20\">\n      </button>\n\n\n      <button id= \"adddoor\" class=\"toolbar-btn\" title=\"Add Door On Selected Edge\">\n            <img src=\"/Images/Door.png\" alt=\"Add door\"  width=\"20\" height=\"20\">\n      </button>\n \n\n      <button id= \"deletenode\" class=\"toolbar-btn\" title=\"Delete Point/Edge/Face\">\n            <img src=\"/Images/Delete.png\" alt=\"delete point\" width=\"20\" height=\"20\">\n      </button>\n\n      <div></div>\n      <div></div>\n   \n \n      <button id= \"rotate\" class=\"toolbar-btn\"  alt=\"Rotation\"  title=\"Rotate Selection\">\n            <img src=\"/Images/Rotate.png\" alt=\"Rotation\" width=\"20\" height=\"20\">\n      </button>\n\n      <button id= \"scale\" class=\"toolbar-btn\" title=\"Scale Selection\">\n            <img src=\"/Images/Scale.png\" alt=\"Scale\"  width=\"20\" height=\"20\">\n      </button>\n\n      <div></div>\n      <div></div>\n  \n\n      <button id= \"previewmode\" class=\"toolbar-btn\" title=\"Preview Map Graphics Mode\"></button>\n      <button id= \"debugmode\" class=\"toolbar-btn\" title=\"Enable/Disable Debug Mode\"></button>\n      <button id= \"grid\" class=\"toolbar-btn\" title=\"Show/Hide Grid\"> </button>\n      <button id= \"snap\" class=\"toolbar-btn\" title=\"Snap Points\"> </button>\n\n\n      <div></div>\n      <div></div>\n\n      <button id= \"centereditor\" class=\"toolbar-btn\" title=\"Center editor\">\n            <img src=\"https://cdn.jsdelivr.net/gh/elseforty/IndoorLens/LocationIcons/Center.png\" alt=\"center\" width=\"20\" height=\"20\">\n      </button>\n      <button id= \"fullscreeneditor\" class=\"toolbar-btn\" title=\"Fullscreen editor\">\n            <img src=\"https://cdn.jsdelivr.net/gh/elseforty/IndoorLens/LocationIcons/Maximize.png\" alt=\"fullscreen link\"  width=\"20\" height=\"20\">\n      </button>\n\n      <div></div>\n      <div></div>\n\n      \n      <div id=\"styletoolbar\"> </div>\n \n    </div>`);\n\n  // overlays\n  uilayout.insertAdjacentHTML(\"beforeend\", `\n    <div id=\"loadingOverlay\" class=\"loading-overlay hidden\">\n      <img src=\"https://cdn.jsdelivr.net/gh/elseforty/IndoorLens/LocationIcons/Loader.png\" class=\"spin\" alt=\"loading\"/>\n    </div>\n    <div id=\"deadOverlay\" class=\"loading-overlay hidden\">\n      <img src=\"https://cdn.jsdelivr.net/gh/elseforty/IndoorLens/LocationIcons/Dead.png\" alt=\"dead\"/>\n    </div>`);\n\n  const loadingOverlay = uilayout.querySelector('#loadingOverlay');\n  const deadOverlay = uilayout.querySelector('#deadOverlay');\n\n\n  // return refs\n  return {\n    canvasBackground: canvasBackground,\n    canvasSelection: canvasSelection,\n    canvasMain: canvasMain,\n    canvasOverlay: canvasOverlay,\n    canvasGrid: canvasGrid,\n    loadingOverlay: loadingOverlay,\n    deadOverlay: deadOverlay\n  };\n}", "\n \n/* ---------- public init: builds a widget on the given host ---------------- */\nexport function init(options = {}) {\n  const cfg = Object.assign(\n    { },\n    options\n  );\n\n  // expose basic config on window for other modules that rely on it\n  window.mapboot = window.mapboot || {};\n  window.mapboot.cfg = { target: cfg.target};\n\n  /* ---------- helper: read ?mapid= from the current URL -------------------- */\n  //window.mapboot.mapid = cfg.mapid; // new URLSearchParams(window.location.search).get('mapid');;\n \n  const host =\n    typeof cfg.target === \"string\"\n      ? document.querySelector(cfg.target)\n      : cfg.target;\n\n  if (!host) {\n    throw new Error(\"IndoorLens: target element not found\");\n  }\n\n  import(\"./widget.js\").then(({ widget }) => {\n    // do this:\n\n    \n  //  window.mapboot = window.mapboot || {};\n    window.mapboot = new widget(host, cfg);\n  });\n}\n/* make the API available to non\u2011module scripts*/\nif (typeof window !== \"undefined\") {\n  window.mapboot = window.mapboot || {};\n  window.mapboot.init = init;   // \u2190 attaches the function\n} "],
  "mappings": "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",
  "names": ["getMap", "mapid", "onSuccess", "onError", "resp", "data", "err", "postMap", "map", "updated", "publishMap", "result", "init_cloud", "__esmMin", "floorColor", "publicColor", "privateColor", "innerWallColor", "outerWallColor", "GroupType", "StyleIds", "styleOrder", "StyleModel", "LocationType", "UnitType", "DisplayType", "Vec3", "init_models", "__esmMin", "id", "color", "lineThickness", "obj", "generateShortGuid", "bytes", "b", "enabledColor", "disabledColor", "SelectionMode", "PointModel", "LineModel", "LayerModel", "GroupModel", "MapModel", "MapSettingsModel", "LocationModel", "PolygonModel", "init_models", "__esmMin", "init_editor", "src", "Vec3", "srcOrName", "rid", "rData", "dict", "key", "bData", "line", "id", "polygon", "GroupType", "gData", "layer", "initlayerId", "group", "initGroupId", "data", "floorColor", "publicColor", "privateColor", "innerWallColor", "outerWallColor", "color", "lineThickness", "style", "StyleModel", "UnitType", "LocationType", "DisplayType", "srcOrNodeIds", "styleId", "points", "map", "a", "p", "q", "cx", "cz", "pt", "point", "createNavigator", "canvas", "options", "onUpdate", "initialPan", "initialScale", "transform", "currentState", "STATES", "lastPointer", "stateHandlers", "EVENTS", "event", "getEventX", "getEventY", "handleZoom", "handlePan", "screenToCanvas", "screenX", "screenY", "rect", "scaleX", "scaleY", "canvasX", "canvasY", "currentX", "currentY", "curCanvas", "prevCanvas", "deltaX", "deltaY", "factor", "zoomFactor", "mousePos", "newScale", "newDx", "newDy", "dispatch", "eventType", "handler", "nextState", "onPointerDown", "onPointerMove", "onPointerUp", "onWheel", "newTransform", "init_navigation", "__esmMin", "commit", "cmd", "undoStack", "setIsDirty", "buildMap", "refreshViewport", "undo", "c", "init_commit", "__esmMin", "init_draw", "init_selection", "e", "selectCommand", "beforePointIds", "afterPointIds", "beforeLineIds", "afterLineIds", "beforePolygonIds", "afterPolygonIds", "clearSelectionUndoRedo", "treeSelection", "sel", "group", "map", "pointId", "setPointId", "pointIds", "gId", "setLineId", "lineIds", "pId", "setPolygonId", "polygonIds", "init_select", "__esmMin", "init_editor", "init_selection", "setPolygonId", "polygonId", "treeSelection", "sel", "group", "map", "layer", "idx", "polygonIds", "setLineId", "lineId", "lineIds", "setPointId", "pointId", "pointIds", "setTreeSelection", "groupId", "layerId", "setLocationId", "lId", "locationId", "clearSelectionUndoRedo", "clearSelection", "beforeBranchKeys", "beforeNodesGuids", "clearSelectionCmd", "selectCommand", "commit", "setFSMState", "FSM_STATES", "refreshViewport", "setSelectionMode", "mode", "SelectionMode", "currentSelectionMode", "setIsDirty", "v", "isMapDirty", "init_selection", "__esmMin", "init_draw", "init_state", "init_models", "init_commit", "init_select", "init_editor", "computeCentroid", "points", "sum", "point", "count", "snap", "v", "isSnap", "step", "map", "hitTest", "init_hitTest", "__esmMin", "init_editor", "init_draw", "init_selection", "pos", "transform", "navigation", "tol", "closestId", "minDist", "sel", "treeSelection", "group", "layer", "line", "pid", "p", "dx", "dz", "dist", "locationId", "location", "rectWorld", "x0", "z0", "x1", "z1", "lineIds", "lineId", "guid", "n", "e", "rect", "canvasMain", "x", "y", "scaleX", "scaleY", "px", "py", "data", "canvasSelection", "pickColor", "pickColorMap", "tolWorld", "tolSq", "bestId", "bestDistSq", "bestSegs", "id", "pts", "nid", "i", "a", "distSq", "Dlimit", "best", "b", "proj", "segLen", "pz", "x2", "z2", "vx", "vz", "wx", "wz", "c1", "c2", "t", "projx", "projz", "tryGeneratePolygon", "lineIds", "styleId", "treeSelection", "sel", "group", "map", "layer", "pointIds", "stitchBranchesIntoRing", "canonicalKey", "eventualRoomId", "generatePolygonIdFromCanonicalKey", "PolygonModel", "lines", "pts", "ring", "graph", "lid", "i", "a", "b", "pid", "neighbours", "start", "prev", "current", "next", "str", "hash", "init_polygonGenerator", "__esmMin", "init_editor", "init_models", "init_selection", "deleteCommand", "affectedBranches", "affectedPolygons", "affectedLocs", "treeSelection", "sel", "group", "map", "layer", "cacheGroupId", "cacheLayerId", "lineIds", "gId", "branchToDelete", "savedBranch", "LineModel", "pointId", "setPointId", "polygonIds", "polygonId", "affectedPolygon", "savedPolygon", "PolygonModel", "pointIds", "point", "i", "affectedBranch", "locationId", "location", "lIdIndex", "lId", "line", "pointIndex", "id", "setFSMState", "FSM_STATES", "buildMap", "restoredBranch", "pId", "restoredPolygon", "restoredLocation", "init_delete", "__esmMin", "init_models", "init_editor", "init_selection", "init_draw", "init_state", "forcePointSelection", "pointBtn", "modeButtons", "b", "setSelectionMode", "SelectionMode", "canvasMain", "refreshViewport", "forcePolygonSelection", "faceBtn", "deselectEverything", "forceEdgeSelection", "edgeBtn", "initToolsMenu", "rotateBtn", "scaleBtn", "centerBtn", "addBtn", "deleteBtn", "fullScreenBtn", "addDoorBtn", "previewBtn", "debugBtn", "snapBtn", "gridBtn", "centerView", "activate", "btn", "mode", "sel", "setFSMState", "FSM_STATES", "updateSideMenuUI", "switchGridVisibility", "updateGridIcon", "deleteSelectionCommand", "deleteCommand", "commit", "switchSnapVisibility", "updateSnapIcon", "switchPreviewVisibility", "updatePreviewIcon", "switchDebugVisibility", "updateDebugIcon", "root", "fullscreen", "updateFullscreenIcon", "resizeAllCanvases", "styletoolbar", "toolbar", "createToolbar", "img", "icon", "isGrid", "isPreview", "isDebug", "isSnap", "toolbarDiv", "makeBtn", "id", "title", "color", "style", "map", "wrapper", "top", "bottom", "enabledColor", "disabledColor", "e", "treeSelection", "group", "layer", "lineIds", "lineId", "ln", "updatePolygonsStyle", "buildMap", "styleId", "innerWallColor", "outerWallColor", "groupSpacer", "floorColor", "publicColor", "privateColor", "addNewLocation", "pointId", "point", "loc", "LocationModel", "newLocId", "generateShortGuid", "setLocationId", "polygonIds", "pid", "poly", "tryGeneratePolygon", "fsFallbackStyle", "init_toolsMenu", "__esmMin", "init_models", "init_editor", "init_draw", "init_state", "init_commit", "init_delete", "init_polygonGenerator", "init_selection", "init_sideMenuUI", "initEditing", "_canvasMain", "_updateCanvas", "canvasMain", "refreshViewport", "handlePointerMove", "e", "dpr", "rect", "bx", "by", "transform", "navigation", "worldX", "worldZ", "setMousePos", "dispatch", "FSM_EVENTS", "clearSelection", "setFSMState", "FSM_STATES", "init_editing", "__esmMin", "init_draw", "init_navigation", "init_state", "init_selection", "init_models", "init_polygonGenerator", "init_editor", "init_toolsMenu", "cloneBranch", "br", "copy", "LineModel", "init_utils", "__esmMin", "init_models", "addDoorCommand", "splineTransform", "position1", "position2", "linesToDelete", "affectedBranches", "treeSelection", "sel", "group", "map", "layer", "line", "cloneBranch", "newPointIdB", "getSnapPointId", "nodeB", "PointModel", "Vec3", "generateShortGuid", "nodeCenter", "newPointIdCenter", "newPointIdA", "nodeA", "i", "rawFirstNodeIds", "rawSecondNodeIds", "newBranch", "LineModel", "secondHalfBranchKey", "doorBranch", "doorBranchKey", "buildMap", "clearSelectionUndoRedo", "forceEdgeSelection", "setFSMState", "FSM_STATES", "gId", "lineId", "init_addDoor", "__esmMin", "init_models", "init_editor", "init_draw", "init_utils", "init_state", "init_toolsMenu", "init_selection", "addCommand", "linesToDelete", "affectedBranches", "createdPoints", "ErrorHandler", "currentLinesToDeleteRef", "context", "SelectionManager", "snapTolerance", "map", "CONFIG", "snapPointId", "getSnapPointId", "mousePos", "point", "newPointId", "PointManager", "result", "selectedPointId", "CommandStrategies", "buildMap", "setFSMState", "FSM_STATES", "lineId", "pointId", "stillUsed", "g", "l", "line", "EPSILON", "SNAP_TOLERANCE_MULTIPLIER", "GeometryUtils", "LineManager", "IntersectionHandler", "GeometricCalculator", "init_addPoint", "__esmMin", "init_models", "init_editor", "init_selection", "init_draw", "init_state", "init_utils", "a", "b", "eps", "value", "array", "index", "p1", "p2", "box1", "box2", "message", "error", "fn", "operation", "fallback", "position", "groupId", "layerId", "PointModel", "Vec3", "generateShortGuid", "id", "styleId", "LineModel", "layer", "cloneBranch", "treeSelection", "selection", "group", "pointIds", "setPointId", "hit", "segmentIndex", "mainBranch", "hits", "initialLineId", "pointIndex", "newLineId", "newLine", "leftPoints", "rightPoints", "pId", "pointX", "pointZ", "points", "pid", "i", "segmentHit", "testPoint", "segmentStart", "segmentEnd", "px", "pz", "sx", "sz", "ex", "ez", "minX", "maxX", "minZ", "maxZ", "segmentDx", "segmentDz", "pointDx", "pointDz", "cross", "segmentLength", "t", "excludeLineId", "startPoint", "endPoint", "intersections", "intersection", "seg1Start", "seg1End", "seg2Start", "seg2End", "dx1", "dz1", "dx2", "dz2", "denominator", "startDx", "startDz", "u", "z", "newPoint", "selectedNode", "targetLine", "setLineId", "affectedBranch", "newBranchId", "endpointHit", "startPos", "endPos", "insertOffset", "intersectionPoint", "intersectionId", "moveCommand", "before", "after", "a", "treeSelection", "sel", "group", "map", "n", "b", "init_move", "__esmMin", "init_editor", "init_selection", "initLocationsUI", "makeFieldGroup", "labelText", "fieldEl", "fg", "label", "container", "nameInput", "e", "location", "getCurrentLocation", "BuildNavigationTree", "metaInput", "typeSelect", "LocationType", "lbl", "val", "opt", "dispSelect", "DisplayType", "surfacesHeader", "surfacesTitle", "pickSurfaceBtn", "setFSMState", "FSM_STATES", "updateLocationsUI", "surfacesTags", "accessPointsHeader", "accessPointsTitle", "pickAccessPointBtn", "accessPointsTags", "polygonId", "setPolygonId", "refreshViewport", "renderPolygonTags", "renderAccessPointsTags", "locationId", "map", "polyIds", "polygonIds", "i", "pillBtn", "delSurfaceBtn", "accesPointIds", "pointId", "pointIds", "setPointId", "delBtn", "init_locationsUI", "__esmMin", "init_models", "init_editor", "init_draw", "init_selection", "init_sideMenuUI", "init_state", "updatePointUI", "pointIds", "pointId", "point", "map", "container", "twinsHeader", "twinsTitle", "pickTwinsBtn", "setFSMState", "FSM_STATES", "refreshViewport", "twinsTags", "renderTwinTags", "idList", "parent", "pid", "idx", "pill", "delBtn", "e", "init_pointUI", "__esmMin", "init_state", "init_draw", "init_selection", "init_editor", "clearDragState", "drag", "requestCanvasRefresh", "_raf", "refreshViewport", "initTransformState", "e", "STATE", "startMouse", "mousePos", "startPositions", "pointIds", "pid", "map", "rawPivot", "computeCentroid", "id", "pivot", "snap", "p", "v0x", "v0z", "startAngle", "startDist", "startVector", "distances", "pos", "startSize", "canvasMain", "registerNavHandlers", "table", "handlers", "dispatch", "event", "handler", "currentState", "nextState", "getCurrentState", "setMousePos", "newMousePos", "newMousePosRaw", "mousePosRaw", "setFSMState", "state", "FSM_STATES", "octx", "canvasOverlay", "currentSelectionMode", "SelectionMode", "forcePointSelection", "forceEdgeSelection", "forcePolygonSelection", "deselectEverything", "screenToWorld", "screenX", "screenY", "dpr", "canvasWidth", "canvasHeight", "transform", "navigation", "relX", "relZ", "FSM_EVENTS", "DRAG_THRESHOLD", "splineTransform", "rectSelectState", "startSelectWorld", "init_state", "__esmMin", "init_models", "init_selection", "init_draw", "init_editor", "init_hitTest", "init_editing", "init_navigation", "init_commit", "init_addDoor", "init_addPoint", "init_select", "init_move", "init_sideMenuUI", "init_toolsMenu", "init_locationsUI", "init_pointUI", "multi", "STATES", "before", "lineIds", "polygonIds", "pointId", "hitTest", "lineId", "polygonId", "idx", "setPointId", "pt", "setLocationId", "updateSideMenuUI", "setLineId", "setPolygonId", "after", "commit", "selectCommand", "overlayRect", "drawSelectionRect", "sWorld", "wx0", "wz0", "wx1", "wz1", "beforePoints", "beforeLines", "beforePolygons", "newPointIdsSet", "newLineIdsSet", "newPolygonIdsSet", "sel", "treeSelection", "group", "layer", "line", "newPointIds", "newLineIds", "newPolygonIds", "dx", "dy", "worldDX", "worldDZ", "s", "b", "i", "moveCmd", "moveCommand", "v", "rawAngle", "snapRotation", "angle", "cosA", "sinA", "sx", "sz", "factor", "sy", "cmd", "addCommand", "drawPointEdit", "doorWidth", "drawDoorEdit", "addDoorCmd", "addDoorCommand", "doorNode1Position", "doorNode2Position", "location", "locationId", "updateLocationsUI", "selectedPointId", "selectedPoint", "twinPoint", "updatePointUI", "showDialog", "type", "message", "onOk", "onCancel", "overlay", "box", "txt", "btn", "cancelBtn", "showInfo", "init_dialogBox", "__esmMin", "initLayersUI", "backgroundImage", "evt", "selectionData", "currentGroupLayerId", "showInfo", "removeLayer", "BuildNavigationTree", "updateLayersUI", "layerName", "bgWidthInput", "bgHeightInput", "bgOpacityInput", "bgOpacityValue", "e", "bgAssignBtn", "actionsEl", "fileInput", "file", "reader", "layer", "currentLayer", "val", "refreshViewport", "bgFileName", "updateBackground", "backgroundURI", "treeSelection", "sel", "group", "map", "gId", "layId", "pId", "lId", "setLocationId", "init_layerUI", "__esmMin", "init_editor", "init_dialogBox", "init_draw", "init_sideMenuUI", "init_selection", "initCanvas", "_canvasBackground", "_canvasSelection", "_canvasMain", "_canvasOverlay", "_canvasGrid", "canvasBackground", "canvasSelection", "canvasMain", "canvasOverlay", "canvasGrid", "bctx", "sctx", "ctx", "octx", "gctx", "resizeAllCanvases", "selecetdImg", "iconCache", "standbyImg", "keyImg", "portalImg", "dpr", "rect", "screenCX", "screenCY", "navigation", "createNavigator", "refreshViewportPure", "viewTransform", "scale", "pan", "backgroundCanvasNav", "rgbSelectionCanvasNav", "mainCanvasNav", "gridCanvasNav", "refreshViewport", "drawMap", "isGrid", "drawGrid", "drawRGBSelection", "drawBackground", "buildMap", "point", "map", "lineStyleIds", "polyStyleIds", "group", "layer", "style", "groupId", "layerId", "lineId", "line", "pid", "pt", "styleLineIds", "polyId", "poly", "stylePolygonIds", "refreshGrid", "grid", "treeSelection", "sel", "gridInsert", "getSnapPointId", "mousePos", "snapPointId", "findSnapTargetFast", "isPreview", "renderLayer", "gId", "layId", "polygon", "groupColor", "pId", "i", "drawGizmos", "drawLocations", "styleOrder", "styleId", "polygonId", "g", "p", "x", "z", "points", "id", "currentSelectionMode", "SelectionMode", "locId", "location", "locationPoint", "icon", "locationId", "size", "label", "pathColor", "dotRadius", "highlight", "isPointMode", "polygonColor", "lineColor", "standbyLineColor", "preProcessBranch", "a", "b", "pointColor", "standbyPointColor", "lineCount", "sharedPointColor", "twinLinkColor", "twinPointId", "twinPoint", "isDebug", "cx", "cy", "drawSelection", "isLineMode", "isPolygonMode", "polygonIds", "color", "polygonSelectedColor", "selectedLocation", "selectedColor", "lineIds", "lId", "selLine", "selectableColor", "standbyColor", "firstPt", "pointIds", "highlightRadius", "pickColorMap", "nextPickIndex", "colorNum", "r", "pickColor", "backgroundImage", "worldW", "worldH", "cwBuf", "chBuf", "invS", "minX", "maxX", "minY", "maxY", "FADE_START", "fade", "invScale", "step", "startX", "startY", "y", "drawPointEdit", "drawDoorEdit", "getCurrentState", "FSM_STATES", "splineTransform", "pointId", "centerVert", "vert1", "vert2", "nx", "nz", "len", "d", "doorNode1Position", "doorNode2Position", "offsetX", "offsetZ", "drawSelectionRect", "rectSelectState", "ptId", "addNewLocation", "updateSideMenuUI", "newW", "newH", "cv", "cellKey", "ix", "iz", "key", "pos", "cz", "bestId", "SNAP_EPS", "bestD2", "arr", "n", "dx", "dz", "d2", "centerView", "targetScale", "bufW", "bufH", "dy", "init_draw", "__esmMin", "init_models", "init_navigation", "init_state", "init_editor", "init_layerUI", "init_selection", "init_sideMenuUI", "init_toolsMenu", "e", "initMap", "mapid", "map", "MapModel", "autoSelection", "refreshViewport", "switchGridVisibility", "isGrid", "switchPreviewVisibility", "isPreview", "switchDebugVisibility", "isDebug", "switchSnapVisibility", "isSnap", "setMap", "v", "badgeSpan", "setGridSize", "setUnit", "setRotationSnap", "setSelectionRadius", "setSelectionMode", "SelectionMode", "setLocationId", "treeSelection", "firstGroupId", "group", "firstLayerId", "setIsDirty", "setTreeSelection", "init_editor", "__esmMin", "init_models", "init_draw", "init_selection", "initGroupUI", "evt", "groupId", "currentGroupId", "showInfo", "removeGroup", "BuildNavigationTree", "updateGroupUI", "groupName", "group", "currentGroup", "groupMetaInput", "groupType", "treeSelection", "sel", "map", "gId", "pId", "lId", "setLocationId", "init_groupUI", "__esmMin", "init_editor", "init_sideMenuUI", "init_selection", "init_dialogBox", "initMapUI", "mapName", "evt", "map", "badgeSpan", "BuildNavigationTree", "updateMapUI", "mapMetaInput", "unitSelect", "UnitType", "label", "value", "option", "setUnit", "refreshViewport", "gridSizeInput", "setGridSize", "rotationSnapInput", "setRotationSnap", "selectionRadiusInput", "setSelectionRadius", "initAllowedDomainsUI", "setFSMState", "FSM_STATES", "renderAllowedDomains", "container", "addBtn", "header", "list", "domain", "idx", "row", "input", "delBtn", "init_mapUI", "__esmMin", "init_models", "init_editor", "init_draw", "init_sideMenuUI", "init_state", "showEmbedDialog", "mapid", "overlay", "box", "code", "btn", "snippet", "codeEl", "init_embedDialogUI", "__esmMin", "link", "resolve", "reject", "script", "initSideMenuUI", "initSaveBtnsUI", "initTreeUI", "initMapUI", "initGroupUI", "initLayersUI", "initLocationsUI", "updateSideMenuUI", "navTree", "toolbar", "backBtn", "saveBtn", "publishBtn", "embedBtn", "isMapDirty", "mapid", "map", "loadingOverlay", "deadOverlay", "postMap", "setIsDirty", "e", "published", "publishMap", "goToViewer", "showEmbedDialog", "content", "p", "updateMapUI", "updateGroupUI", "updateLayersUI", "updateLocationsUI", "updatePointUI", "updateSelectedRows", "refreshViewport", "clearSelectedRows", "root", "el", "navRoot", "buildNavTree", "key", "BuildNavigationTree", "header", "label", "groupsLabel", "addGroupBtn", "group", "GroupModel", "newGroupId", "generateShortGuid", "treeSelection", "setTreeSelection", "ul", "gId", "b", "ulB", "addNode", "layersUL", "layId", "f", "ulG", "expandRow", "nodeRow", "openRow", "row", "toggle", "li", "parentLi", "parentRow", "parentUL", "locId", "model", "level", "tgl", "nameEl", "addLayerBtn", "newLayer", "LayerModel", "nextIndex", "newLayerId", "open", "firstLayerId", "childUL", "getRowById", "id", "escapedId", "selector", "sel", "groupRow", "layerRow", "init_sideMenuUI", "__esmMin", "init_groupUI", "init_layerUI", "init_locationsUI", "init_pointUI", "init_mapUI", "init_editor", "init_selection", "init_models", "init_draw", "init_cloud", "init_embedDialogUI", "css", "widget_exports", "__export", "buildIndoorLensDOM", "widget", "injectIndoorLensCSS", "resolve", "reject", "link", "host", "uilayout", "canvasesContainer", "canvasMain", "canvasBackground", "canvasSelection", "canvasOverlay", "canvasGrid", "loadingOverlay", "deadOverlay", "init_widget", "__esmMin", "init_cloud", "init_sideMenuUI", "init_draw", "init_toolsMenu", "init_editor", "init_editing", "root", "opts", "refs", "mapid", "getMap", "mapJson", "setMap", "e", "initMap", "initCanvas", "initEditing", "refreshViewport", "initSideMenuUI", "initToolsMenu", "buildMap", "mapboot_exports", "__export", "init", "options", "cfg", "host", "widget"]
}
